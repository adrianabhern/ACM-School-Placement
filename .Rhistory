merge(x = gender_frame_g,
y = gender_gs,
by = c("placement", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
}) %>%
summarise(mean_gend_diff = mean(abs_diff_gs))
gender_score <- gender_frame_gs$mean_gend_diff * 10000
#############
# AGE SCORE #
#############
# This score is the difference between the [overall age variance across the corps] and [overall average of each team's average age variance]
team_placements_df$days_old <- as.integer(Sys.Date() - as.Date(as.character(team_placements_df$Birth.Date), format="%Y-%m-%d"))
age_var <-
group_by(team_placements_df, placement) %>%
summarize(age_var = var(days_old)) %>%
ungroup() %>%
summarize(avg_age_var = mean(age_var))
age_score <- abs(age_var$avg_age_var - var(team_placements_df$days_old))
#################
# OVERALL SCORE #
#################
aggr_score <- commute_score + gender_score + age_score
return(list(aggr_score=aggr_score, commute_score=commute_score, gender_score=gender_score, age_score=age_score))
}
run_intermediate_annealing_process = function(acm_df, team_placements_df, placement_score, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
# Create a copy of team_placements
candidate_placements_df = team_placements_df
# Choose 2 schools at random
schools_to_swap = sample(1:nrow(school_df), 2)
# Choose 1 ACM from each of those schools
swap1 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[1]], 1))
swap2 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[2]], 1))
# Swap the team assignment of those 2 ACMs
candidate_placements_df$placement = replace(candidate_placements_df$placement, c(swap1, swap2), candidate_placements_df$placement[c(swap2, swap1)])
# Place firm restrictions here
candidate_score = calculate_score(candidate_placements_df)
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
if (runif(1) < ratio) {
team_placements_df = candidate_placements_df
placement_score = candidate_score$aggr_score
if (placement_score < best_score) {
best_placements = team_placements_df
best_score = placement_score
}
}
}
best_placements <- best_placements[order(best_placements$placement),]
return(list(avg_commute_mins=(candidate_score$commute_score / nrow(acm_df) / 60), gender_score=candidate_score$gender_score, age_score=candidate_score$age_score, best_placements=best_placements, best_score=best_score))
}
## USEFULL: system.time({ <<code to time>> })
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = 445109, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
run_intermediate_annealing_process = function(acm_df, team_placements_df, placement_score, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
# Create a copy of team_placements
candidate_placements_df = team_placements_df
# Choose 2 schools at random
schools_to_swap = sample(1:nrow(school_df), 2)
# Choose 1 ACM from each of those schools
swap1 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[1]], 1))
swap2 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[2]], 1))
# Swap the team assignment of those 2 ACMs
candidate_placements_df$placement = replace(candidate_placements_df$placement, c(swap1, swap2), candidate_placements_df$placement[c(swap2, swap1)])
# Place firm restrictions here
candidate_score = calculate_score(candidate_placements_df)
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
if (runif(1) < ratio) {
team_placements_df = candidate_placements_df
placement_score = candidate_score$aggr_score
if (placement_score < best_score) {
best_placements = team_placements_df
best_score = placement_score
}
}
}
best_placements <- best_placements[order(best_placements$placement),]
return(list(commute_score=candidate_score$commute_score, avg_commute_mins=(candidate_score$commute_score / nrow(acm_df) / 60), gender_score=candidate_score$gender_score, age_score=candidate_score$age_score, best_placements=best_placements, best_score=best_score))
}
## USEFULL: system.time({ <<code to time>> })
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = 445109, starting_iteration = 1, number_of_iterations = 100, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
## USEFULL: system.time({ <<code to time>> })
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, starting_iteration = 1, number_of_iterations = 100, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
## Useful: system.time({ <<code to time>> })
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = 445109, starting_iteration = 1, number_of_iterations = 100, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
calculate_score = function(team_placements_df) {
#################
# COMMUTE SCORE #
#################
# This score is simply the sum number of seconds each ACM travels to their assigned school
team_placements_df$dest = colnames(acm_commutes)[team_placements_df$placement + 1]
team_placements_df <- within(team_placements_df, id_dest <- paste(acm_id, dest, sep = "_"))
dt_commutes <- data.table(acm_commutes_long)
commute_score <- dt_commutes[id_dest %in% team_placements_df$id_dest,  sum(dist)]
################
# GENDER SCORE #
################
# This score measures the average of differences between each gender's percent occurance across the corps and its occurance on each team
# Create data.frame with each potential combination of gender and school, based on the survey responses provided
gender_frame <-
expand.grid(placement = 1:26, Gender = levels(acm_df$Gender))
# Note--need to replace sch_id with the appropriate school id values based off of the data
# Create tibbl containing percentage representation of each gender category across the entire corps
gender_g <- group_by(acm_df, Gender) %>% summarize(pct_g = n()/nrow(acm_df))
# Merge previous two frames by "gender"
gender_frame_g <-
merge(x = gender_frame,
y = gender_g,
by = "Gender",
all.x = TRUE)
# Represent percentage of each gender category within each team
gender_gs <-
team_placements_df %>%
group_by(placement, Gender) %>%
dplyr::summarize(n_gs = n()) %>%
group_by(placement) %>%
dplyr::mutate(pct_gs = n_gs/sum(n_gs))
# Calculate absolute value of difference between gender percentages at each team and across the corps
gender_frame_gs <-
merge(x = gender_frame_g,
y = gender_gs,
by = c("placement", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
}) %>%
summarise(mean_gend_diff = mean(abs_diff_gs))
gender_score <- gender_frame_gs$mean_gend_diff * 100000
#############
# AGE SCORE #
#############
# This score is the difference between the [overall age variance across the corps] and [overall average of each team's average age variance]
team_placements_df$days_old <- as.integer(Sys.Date() - as.Date(as.character(team_placements_df$Birth.Date), format="%Y-%m-%d"))
age_var <-
group_by(team_placements_df, placement) %>%
summarize(age_var = var(days_old)) %>%
ungroup() %>%
summarize(avg_age_var = mean(age_var))
age_score <- abs(age_var$avg_age_var - var(team_placements_df$days_old))
#################
# OVERALL SCORE #
#################
aggr_score <- commute_score + gender_score + age_score
return(list(aggr_score=aggr_score, commute_score=commute_score, gender_score=gender_score, age_score=age_score))
}
## Useful: system.time({ <<code to time>> })
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = 445109, starting_iteration = 1, number_of_iterations = 100, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
calculate_score = function(team_placements_df) {
#################
# COMMUTE SCORE #
#################
# This score is simply the sum number of seconds each ACM travels to their assigned school
team_placements_df$dest = colnames(acm_commutes)[team_placements_df$placement + 1]
team_placements_df <- within(team_placements_df, id_dest <- paste(acm_id, dest, sep = "_"))
dt_commutes <- data.table(acm_commutes_long)
commute_score <- dt_commutes[id_dest %in% team_placements_df$id_dest,  sum(dist)]
################
# GENDER SCORE #
################
# This score measures the average of differences between each gender's percent occurance across the corps and its occurance on each team
# Create data.frame with each potential combination of gender and school, based on the survey responses provided
gender_frame <-
expand.grid(placement = 1:26, Gender = levels(acm_df$Gender))
# Note--need to replace sch_id with the appropriate school id values based off of the data
# Create tibbl containing percentage representation of each gender category across the entire corps
gender_g <- group_by(acm_df, Gender) %>% summarize(pct_g = n()/nrow(acm_df))
# Merge previous two frames by "gender"
gender_frame_g <-
merge(x = gender_frame,
y = gender_g,
by = "Gender",
all.x = TRUE)
# Represent percentage of each gender category within each team
gender_gs <-
team_placements_df %>%
group_by(placement, Gender) %>%
dplyr::summarize(n_gs = n()) %>%
group_by(placement) %>%
dplyr::mutate(pct_gs = n_gs/sum(n_gs))
# Calculate absolute value of difference between gender percentages at each team and across the corps
gender_frame_gs <-
merge(x = gender_frame_g,
y = gender_gs,
by = c("placement", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
}) %>%
summarise(mean_gend_diff = mean(abs_diff_gs))
gender_score <- gender_frame_gs$mean_gend_diff * 100000
#############
# AGE SCORE #
#############
# This score is the difference between the [overall age variance across the corps] and [overall average of each team's average age variance]
team_placements_df$days_old <- as.integer(Sys.Date() - as.Date(as.character(team_placements_df$Birth.Date), format="%Y-%m-%d"))
age_var <-
group_by(team_placements_df, placement) %>%
summarize(age_var = var(days_old)) %>%
ungroup() %>%
summarize(avg_age_var = mean(age_var))
age_score <- abs(age_var$avg_age_var - var(team_placements_df$days_old)) * 100
#################
# OVERALL SCORE #
#################
aggr_score <- commute_score + gender_score + age_score
return(list(aggr_score=aggr_score, commute_score=commute_score, gender_score=gender_score, age_score=age_score))
}
calculate_score = function(team_placements_df) {
#################
# COMMUTE SCORE #
#################
# This score is simply the sum number of seconds each ACM travels to their assigned school
team_placements_df$dest = colnames(acm_commutes)[team_placements_df$placement + 1]
team_placements_df <- within(team_placements_df, id_dest <- paste(acm_id, dest, sep = "_"))
dt_commutes <- data.table(acm_commutes_long)
commute_score <- dt_commutes[id_dest %in% team_placements_df$id_dest,  sum(dist)]
################
# GENDER SCORE #
################
# This score measures the average of differences between each gender's percent occurance across the corps and its occurance on each team
# Create data.frame with each potential combination of gender and school, based on the survey responses provided
gender_frame <-
expand.grid(placement = 1:26, Gender = levels(acm_df$Gender))
# Note--need to replace sch_id with the appropriate school id values based off of the data
# Create tibbl containing percentage representation of each gender category across the entire corps
gender_g <- group_by(acm_df, Gender) %>% summarize(pct_g = n()/nrow(acm_df))
# Merge previous two frames by "gender"
gender_frame_g <-
merge(x = gender_frame,
y = gender_g,
by = "Gender",
all.x = TRUE)
# Represent percentage of each gender category within each team
gender_gs <-
team_placements_df %>%
group_by(placement, Gender) %>%
dplyr::summarize(n_gs = n()) %>%
group_by(placement) %>%
dplyr::mutate(pct_gs = n_gs/sum(n_gs))
# Calculate absolute value of difference between gender percentages at each team and across the corps
gender_frame_gs <-
merge(x = gender_frame_g,
y = gender_gs,
by = c("placement", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
}) %>%
summarise(mean_gend_diff = mean(abs_diff_gs))
gender_score <- gender_frame_gs$mean_gend_diff * 1000000
#############
# AGE SCORE #
#############
# This score is the difference between the [overall age variance across the corps] and [overall average of each team's average age variance]
team_placements_df$days_old <- as.integer(Sys.Date() - as.Date(as.character(team_placements_df$Birth.Date), format="%Y-%m-%d"))
age_var <-
group_by(team_placements_df, placement) %>%
summarize(age_var = var(days_old)) %>%
ungroup() %>%
summarize(avg_age_var = mean(age_var))
age_score <- abs(age_var$avg_age_var - var(team_placements_df$days_old)) * 100
#################
# OVERALL SCORE #
#################
aggr_score <- commute_score + gender_score + age_score
return(list(aggr_score=aggr_score, commute_score=commute_score, gender_score=gender_score, age_score=age_score))
}
## Useful: system.time({ <<code to time>> })
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = 445109, starting_iteration = 1, number_of_iterations = 100, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
calculate_score = function(team_placements_df) {
#################
# COMMUTE SCORE #
#################
# This score is simply the sum number of seconds each ACM travels to their assigned school
team_placements_df$dest = colnames(acm_commutes)[team_placements_df$placement + 1]
team_placements_df <- within(team_placements_df, id_dest <- paste(acm_id, dest, sep = "_"))
dt_commutes <- data.table(acm_commutes_long)
commute_score <- dt_commutes[id_dest %in% team_placements_df$id_dest,  sum(dist)]
################
# GENDER SCORE #
################
# This score measures the average of differences between each gender's percent occurance across the corps and its occurance on each team
# Create data.frame with each potential combination of gender and school, based on the survey responses provided
gender_frame <-
expand.grid(placement = 1:26, Gender = levels(acm_df$Gender))
# Note--need to replace sch_id with the appropriate school id values based off of the data
# Create tibbl containing percentage representation of each gender category across the entire corps
gender_g <- group_by(acm_df, Gender) %>% summarize(pct_g = n()/nrow(acm_df))
# Merge previous two frames by "gender"
gender_frame_g <-
merge(x = gender_frame,
y = gender_g,
by = "Gender",
all.x = TRUE)
# Represent percentage of each gender category within each team
gender_gs <-
team_placements_df %>%
group_by(placement, Gender) %>%
dplyr::summarize(n_gs = n()) %>%
group_by(placement) %>%
dplyr::mutate(pct_gs = n_gs/sum(n_gs))
# Calculate absolute value of difference between gender percentages at each team and across the corps
gender_frame_gs <-
merge(x = gender_frame_g,
y = gender_gs,
by = c("placement", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
}) %>%
summarise(mean_gend_diff = mean(abs_diff_gs))
gender_score <- gender_frame_gs$mean_gend_diff * 10000000 / 2
#############
# AGE SCORE #
#############
# This score is the difference between the [overall age variance across the corps] and [overall average of each team's average age variance]
team_placements_df$days_old <- as.integer(Sys.Date() - as.Date(as.character(team_placements_df$Birth.Date), format="%Y-%m-%d"))
age_var <-
group_by(team_placements_df, placement) %>%
summarize(age_var = var(days_old)) %>%
ungroup() %>%
summarize(avg_age_var = mean(age_var))
age_score <- abs(age_var$avg_age_var - var(team_placements_df$days_old)) * 100
#################
# OVERALL SCORE #
#################
aggr_score <- commute_score + gender_score + age_score
return(list(aggr_score=aggr_score, commute_score=commute_score, gender_score=gender_score, age_score=age_score))
}
## Useful: system.time({ <<code to time>> })
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = 445109, starting_iteration = 1, number_of_iterations = 100, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
## Useful: system.time({ <<code to time>> })
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = calculate_score(team_placements_df), starting_iteration = 1, number_of_iterations = 100, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
calculate_score(team_placements_df)
calculate_score(team_placements_df)$aggr_score
## Useful: system.time({ <<code to time>> })
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = calculate_score(team_placements_df)$aggr_score, starting_iteration = 1, number_of_iterations = 100, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
calculate_score(team_placements_df)$aggr_score
output
## Useful: system.time({ <<code to time>> })
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = calculate_score(team_placements_df)$aggr_score, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
calculate_score(team_placements_df)$aggr_score
## Useful: system.time({ <<code to time>> })
calculate_score(team_placements_df)$aggr_score
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = 1420788, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
initial_score = calculate_score(team_placements_df)$aggr_score
## Useful: system.time({ <<code to time>> })
initial_score = calculate_score(team_placements_df)$aggr_score
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = 2420788, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
initial_score
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 1420788, best_placements = team_placements_df, best_score, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 1420788, best_placements = team_placements_df, best_score = 1420788, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
run_intermediate_annealing_process = function(team_placements_df, best_placements, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
placement_score = calculate_score(team_placements_df)$aggr_score
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
# Create a copy of team_placements
candidate_placements_df = team_placements_df
# Choose 2 schools at random
schools_to_swap = sample(1:nrow(school_df), 2)
# Choose 1 ACM from each of those schools
swap1 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[1]], 1))
swap2 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[2]], 1))
# Swap the team assignment of those 2 ACMs
candidate_placements_df$placement = replace(candidate_placements_df$placement, c(swap1, swap2), candidate_placements_df$placement[c(swap2, swap1)])
# Place firm restrictions here
#IsValid(candidate_placements_df)
candidate_score = calculate_score(candidate_placements_df)
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
if (runif(1) < ratio) {
team_placements_df = candidate_placements_df
placement_score = candidate_score$aggr_score
if (placement_score < best_score) {
best_placements = team_placements_df
best_score = placement_score
}
}
}
best_placements <- best_placements[order(best_placements$placement),]
return(list(commute_score=candidate_score$commute_score,
avg_commute_mins=(candidate_score$commute_score / nrow(team_placements_df) / 60),
gender_score=candidate_score$gender_score,
age_score=candidate_score$age_score,
best_placements=best_placements,
best_score=best_score))
}
## Useful: system.time({ <<code to time>> })
initial_score = calculate_score(team_placements_df)$aggr_score
output <- run_intermediate_annealing_process(team_placements_df, best_placements = team_placements_df, best_score = 1420788, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
run_intermediate_annealing_process = function(team_placements_df, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
placement_score = calculate_score(team_placements_df)$aggr_score
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
# Create a copy of team_placements
candidate_placements_df = team_placements_df
# Choose 2 schools at random
schools_to_swap = sample(1:nrow(school_df), 2)
# Choose 1 ACM from each of those schools
swap1 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[1]], 1))
swap2 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[2]], 1))
# Swap the team assignment of those 2 ACMs
candidate_placements_df$placement = replace(candidate_placements_df$placement, c(swap1, swap2), candidate_placements_df$placement[c(swap2, swap1)])
# Place firm restrictions here
#IsValid(candidate_placements_df)
candidate_score = calculate_score(candidate_placements_df)
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
if (runif(1) < ratio) {
team_placements_df = candidate_placements_df
placement_score = candidate_score$aggr_score
if (placement_score < best_score) {
best_placements = team_placements_df
best_score = placement_score
}
}
}
best_placements <- best_placements[order(best_placements$placement),]
return(list(commute_score=candidate_score$commute_score,
avg_commute_mins=(candidate_score$commute_score / nrow(team_placements_df) / 60),
gender_score=candidate_score$gender_score,
age_score=candidate_score$age_score,
best_placements=best_placements,
best_score=best_score))
}
## Useful: system.time({ <<code to time>> })
initial_score = calculate_score(team_placements_df)$aggr_score
output <- run_intermediate_annealing_process(team_placements_df, best_placements = team_placements_df, best_score = 1420788, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
run_intermediate_annealing_process = function(starting_placements, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
team_placements_df <- starting_placements
placement_score = calculate_score(team_placements_df)$aggr_score
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
# Create a copy of team_placements
candidate_placements_df = team_placements_df
# Choose 2 schools at random
schools_to_swap = sample(1:nrow(school_df), 2)
# Choose 1 ACM from each of those schools
swap1 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[1]], 1))
swap2 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[2]], 1))
# Swap the team assignment of those 2 ACMs
candidate_placements_df$placement = replace(candidate_placements_df$placement, c(swap1, swap2), candidate_placements_df$placement[c(swap2, swap1)])
# Place firm restrictions here
#IsValid(candidate_placements_df)
candidate_score = calculate_score(candidate_placements_df)
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
if (runif(1) < ratio) {
team_placements_df = candidate_placements_df
placement_score = candidate_score$aggr_score
if (placement_score < best_score) {
best_placements = team_placements_df
best_score = placement_score
}
}
}
best_placements <- best_placements[order(best_placements$placement),]
return(list(commute_score=candidate_score$commute_score,
avg_commute_mins=(candidate_score$commute_score / nrow(team_placements_df) / 60),
gender_score=candidate_score$gender_score,
age_score=candidate_score$age_score,
best_placements=best_placements,
best_score=best_score))
}
## Useful: system.time({ <<code to time>> })
# initial score
calculate_score(team_placements_df)$aggr_score
output <- run_intermediate_annealing_process(starting_placements = team_placements_df, best_placements = team_placements_df, best_score = 1420788, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
