SomeCol = sum(Ed_SomeCol),
Tutoring = sum(HasTutored),
Spanish = sum(SpanishAble),
#OtherLang = sum(Lang_Other),
MathAble = sum(Math.Confidence),
Males = sum(Male)) %>%
left_join(., school_targets, by=c("placement" = "sch_id"))
scores$Edscore <- mean((abs((placed$HSGrad_tgt - placed$HS_Grads)) + abs((placed$SomeCol_tgt - placed$SomeCol)))^2.2) * 200 * Edscore_factor
scores$Tutoring <- sum((placed$TutExp - placed$Tutoring)^2) * Tutoring_factor
placed$SpanDiff <- placed$SpanishNeed - placed$Spanish
scores$Spanish <- ifelse(nrow(placed[placed$SpanDiff>0,]) > 0, 1e10, 0) * Spanish_factor
scores$Math <- sum((placed$Math_tgt - placed$MathAble)^2) * Math_factor
scores$Gender <- (sum(ifelse(placed$Males < 1, 1e10, 0)) + mean((placed$Male_tgt - placed$Males)^2) * 250) * Gender_factor
scores$aggr_score <- sum(unlist(scores))
return(scores)
}
# Temperature Function
current_temperature = function(iter, s_curve_amplitude, s_curve_center, s_curve_width) {
s_curve_amplitude * s_curve(iter, s_curve_center, s_curve_width)
}
s_curve = function(x, center, width) {
1 / (1 + exp((x - center) / width))
}
initial_placement <- function(acm_enc, school_targets){
browerser()
team_placements = list()
manual_plc_slots <- acm_enc[!is.na(acm_enc$Manual.Placement),] %>%
left_join(., select(school_targets, sch_id:School),
by=c("Manual.Placement" = "School")) %>%
select(acm_id,sch_id)
filled_slot_counts <- manual_plc_slots %>%
group_by(sch_id) %>%
summarise(filled = n())
team_size_targets <- select(school_targets, sch_id:size) %>%
left_join(., filled_slot_counts, by=("sch_id")) %>%
replace_na(list(filled = 0)) %>%
mutate(non_manual_size = as.numeric(size) - as.numeric(filled))
for (x in team_size_targets$sch_id[team_size_targets$non_manual_size>0]){
# create a list that repeats each school 'id' for the size of each team
team_slots = list(rep(x, subset(team_size_targets$non_manual_size, team_size_targets$sch_id == x)))
team_placements <- c(team_placements, team_slots)
}
# random placements of CMs
team_placements <- data.frame(placement=unlist(team_placements))
# Adds dummy id's if more slots are available than survey respondants
team_placements_df <- data.frame(acm_id=1:sum(school_targets$size))
team_placements_df <- merge(team_placements_df, manual_plc_slots, by="acm_id", all.x = T)
team_placements_df$sch_id[is.na(team_placements_df$sch_id)] <- team_placements[sample(nrow(team_placements), replace=F), ]
team_placements_df <- team_placements_df %>% rename(placement = sch_id)
# Merge team_placements_df with acm_df on the 'id' column
team_placements_df <- left_join(team_placements_df, acm_enc, by = "acm_id") %>%
replace_na(replace = list(Math.Confidence = 0,
Ed_HS = 0,
Ed_SomeCol = 0,
Ed_Col = 0,
HasTutored = 0,
SpanishAble = 0,
Lang_Other = 0,
Male = 0,
Other.Gender =0,
days_old = 0))
return(team_placements_df)
}
# Annealing and Swap Function
run_intermediate_annealing_process = function(starting_placements, school_df, best_placements=starting_placements, number_of_iterations, center_scale, width_scale) {
team_placements_df <- starting_placements
# Sort by acm_id so that each row index will equal acm_id
team_placements_df <- team_placements_df[order(team_placements_df$acm_id), ]
rownames(team_placements_df) <- 1:nrow(team_placements_df)
placement_score <- calculate_score(starting_placements, school_df)$aggr_score
best_score <- 1000000000000
trace <- data.frame(iter=c(1:(number_of_iterations+2)),
commute_score = 0,
age_score = 0,
ethnicity_score= 0,
ij_conflict_score = 0,
Edscore = 0,
Tutoring= 0,
Spanish = 0,
Math = 0,
Gender = 0,
score=0)
trace[1, 2:11] <- calculate_score(starting_placements, school_df)
#Pre-calcucate eligibility of all ACMs to all schools
elig_placements <- elig_plcmnts_static(team_placements_df, school_df)
schools_to_swap <- c(0, 0)
for(i in 1:number_of_iterations) {
iter = 1 + i
temp = current_temperature(iter, 3000, number_of_iterations * center_scale, number_of_iterations * width_scale)
# Create a copy of team_placements_df
candidate_placements_df <- team_placements_df
candidate_placements_df$acm_id_sch_id <- paste(candidate_placements_df$acm_id, candidate_placements_df$placement, sep="_")
# 1-29-18 Chris: this should not be 'if', since it also includes prior relationships, not just roommates
if(prevent_roommates == "Yes"){
elig_placements_iter <- elig_plcmnts_iter(candidate_placements_df, elig_placements, ij)
} else {
elig_placements_iter <- elig_placements
}
candidate_placements_df <- merge(candidate_placements_df, elig_placements_iter[,c("acm_id_sch_id", "elig")], by="acm_id_sch_id", all.x = TRUE)
# 1-29-18 Chris Spanish speaker update to be done:
# Set requirement target manually with column in school config file
# Randomly place Spanish speakers such that targets are met (throw error if not possible)
# When Spanish speaker randomly chosen for placement, only consider swaps with other Spanish speakers, unless the chosen ACM is already at a school with surplus of Spanish speakers, in which case they could be placed anywhere
swap1 <- sample( candidate_placements_df$acm_id[is.na(candidate_placements_df$Manual.Placement)], 1)
schools_to_swap[1] <- candidate_placements_df$placement[candidate_placements_df$acm_id==swap1]
school2_set <- elig_placements_iter$sch_id[(elig_placements_iter$elig==1) &
(elig_placements_iter$acm_id == swap1) &
(elig_placements_iter$sch_id != schools_to_swap[1])]
# & school contains at least one valid ACM to choose who is not roommate/prior relationship of ACM1
# to find valid placement, subtract the schools your roommates are in
if(length(school2_set)==0){
candidate_placements_df <- candidate_placements_df[, !names(candidate_placements_df) %in% c("elig", "elig_rms", "acm_id_sch_id")]
next}
if(length(unique(school2_set)) != 1) {schools_to_swap[2] <- sample(x = unique(school2_set), 1)} else {schools_to_swap[2] <- unique(school2_set)}
swap2_set <- elig_placements_iter$acm_id[elig_placements_iter$elig==1 &
elig_placements_iter$sch_id == schools_to_swap[1] &
elig_placements_iter$acm_id %in%
candidate_placements_df$acm_id[candidate_placements_df$placement == schools_to_swap[2]]]
if(length(swap2_set)==0){
candidate_placements_df <- candidate_placements_df[, !names(candidate_placements_df) %in% c("elig", "elig_rms", "acm_id_sch_id")]
next}
if(length(unique(swap2_set)) != 1) {swap2 <- sample(x = unique(swap2_set), 1)} else {swap2 <- unique(swap2_set)}
# Sort by acm_id and reset the index
candidate_placements_df <- candidate_placements_df[order(candidate_placements_df$acm_id), ]
rownames(candidate_placements_df) <- 1:nrow(candidate_placements_df)
# Swap the team assignment of those 2 ACMs - NOTE this is done by index, and we use acm_id as index
candidate_placements_df$placement <- replace(candidate_placements_df$placement, c(swap1, swap2), candidate_placements_df$placement[c(swap2, swap1)])
candidate_placements_df <- candidate_placements_df[, !names(candidate_placements_df) %in% c("elig", "elig_rms", "acm_id_sch_id")]
candidate_score <- calculate_score(candidate_placements_df, school_df)
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
# Used for bug testing
# if (is.na(ratio)){
#   return(list(placement_score=as.data.frame(placement_score),
#               candidate_score=as.data.frame(candidate_score),
#               best_placements=best_placements,
#               trace=trace))
# }
if (runif(1) < ratio) {
team_placements_df <- candidate_placements_df
placement_score <- candidate_score$aggr_score
trace[i+1, 2:11] <- candidate_score
if (placement_score < best_score) {
best_placements <- team_placements_df
best_score_diff <- candidate_score
best_score <- best_score_diff$aggr_score
}
}
}
# Add best scores to the last row of trace
trace[(number_of_iterations+2), 2:11] <- calculate_score(best_placements, school_df)
# Merge in School Name and all survey info
cols.x <- c("acm_id", "placement", "days_old")
cols.y <- c("School", "sch_id")
best_placements <- merge(best_placements[, cols.x], school_df[, cols.y], by.x = "placement", by.y = "sch_id", all.x = TRUE)
best_placements <- merge(best_placements, acm_df, by = "acm_id", all.x = TRUE)
# Merge in commute info
if(consider_commutes == "Yes"){
home_addresses <- dt_commutes[!duplicated(dt_commutes$Full.Name), ]
best_placements <- merge(best_placements, home_addresses[,c("Full.Name", "Home.Address")], by = "Full.Name", all.x = TRUE)
best_placements <- within(best_placements, id_dest <- paste(Full.Name, School, sep = "_"))
commutes <- dt_commutes[id_dest %in% best_placements$id_dest, ]
commutes <- commutes[,c("Full.Name", "Commute.Time", "Commute.Rank")]
best_placements <- merge(best_placements, commutes, by = "Full.Name", all.x = TRUE)
} else {
best_placements$Commute.Time <- NA
best_placements$Commute.Rank <- NA
best_placements$Home.Address <- NA
}
# Create one Tutoring Experience Grades Column
tut_exp_cols = c("Tutoring.Experience.ES",
"Tutoring.Experience.MS",
"Tutoring.Experience.HS")
best_placements[, tut_exp_cols][best_placements[, tut_exp_cols] == ""] <- NA
best_placements$Tutoring.Experience.Grades <- apply(best_placements[, tut_exp_cols], 1, function(x) toString(na.omit(x)))
# Create one Grade Level Preference Column
grd_lvl_pref_cols = c("Grade.Lvl.Pref.ES",
"Grade.Lvl.Pref.MS",
"Grade.Lvl.Pref.HS")
best_placements[, grd_lvl_pref_cols][best_placements[, grd_lvl_pref_cols] == ""] <- NA
best_placements$Grade.Lvl.Pref <- apply(best_placements[, grd_lvl_pref_cols ], 1, function(x) toString(na.omit(x)))
# Create one language column
language_cols = c("Language.Ability.Arabic"                       ,
"Language.Ability.CapeVerdeanCreole",
"Language.Ability.Chinese.Cantonese",
"Language.Ability.Chinese.Mandarin" ,
"Language.Ability.HaitianCreole"    ,
"Language.Ability.French"           ,
"Language.Ability.Nepali"           ,
"Language.Ability.Polish"           ,
"Language.Ability.Spanish"          ,
"Language.Ability.Swahili"          ,
"Language.Ability.Urdu"             ,
"Language.Ability.Vietnamese"       ,
"Language.Ability.Other")
best_placements[, language_cols][best_placements[, language_cols] == ""] <- NA
best_placements$Language <- apply(best_placements[, language_cols ], 1, function(x) toString(na.omit(x)))
best_placements$Age <- best_placements$days_old/365.25
cols <- c("acm_id",
"Full.Name",
"Pref.Name",
"placement",
"School",
"Gender",
"Race.Ethnicity",
# "Attnd.CY.School",
"Language",
"Language.Ability.Spanish",
"Tutoring.Experience.Months",
"Tutoring.Experience.Grades",
#"Grade.Lvl.Pref",
"Teaching.Credential",
"Tutoring.Preference",
"Math.Confidence",
#"Birth.Date",
"Age",
"Educational.Attainment",
# "You are presented with a project to plan. You would most likely work with your team in which of the following ways?",
# "When you are under pressure to get an assignment in on time, how do you normally react?",
# "If people were to describe you in one word, which of the following would it be?",
# "When given a new project, your first response is which of the following?",
# "Becoming a City Year corps member often comes with a number of uncertainties. Of the following, which is of biggest concern to you?",
"Roommate.Names",
"Prior.Rship.Name",
"IJ.Placement",
"Home.Address",
"Travel.Method",
"Commute.Time",
"Commute.Rank",
"Manual.Placement")
best_placements <- best_placements[, names(best_placements) %in% cols]
best_placements <- best_placements[order(best_placements$placement),]
best_placements$acm_id[best_placements$acm_id > nrow(acm_enc)] <- 800:(800 + sum(school_df$size) - nrow(acm_enc) - 1)
return(list(best_placements=best_placements,
best_score=best_score,
diff_scores=best_score_diff,
trace=trace))
}
# Full Application
acm_df <- read.csv(file = paste(root_dir, acm_df_file, sep = ""), check.names=FALSE, stringsAsFactors = FALSE)
acm_df$acm_id <- 1:nrow(acm_df)
if(consider_commutes == "Yes"){
acm_commutes <- read.csv(file = paste(root_dir, "ACM Commutes.csv", sep = ""), check.names=FALSE)
acm_commutes$Commute.Time <- as.numeric(as.character(acm_commutes$Commute.Time))
acm_commutes$id_dest <- paste(acm_commutes$Full.Name, acm_commutes$School, sep = "_")
dt_commutes <- data.table(acm_commutes)
}
school_df <- read_excel(path = paste(root_dir, school_df_file, sep = ""))
school_df <- school_df[!is.na(school_df$School),]
school_df <- school_df[order(school_df$School),]
school_df$sch_id <- 1:nrow(school_df)
if(used_surveygizmo == "Yes"){
acm_df <- rename_headers(acm_df)
}
# Create One Race.Ethnicity Column
ethn_cols = c("Race.Ethnicity.African.American.Black",
"Race.Ethnicity.American.Indian.Alaskan.Native",
"Race.Ethnicity.Asian",
"Race.Ethnicity.Hispanic.Latino",
"Race.Ethnicity.Middle.Eastern",
"Race.Ethnicity.Native.Hawaiian.Pacific.Islander",
"Race.Ethnicity.White.Caucasian",
"Race.Ethnicity.Other")
acm_df[, ethn_cols][acm_df[, ethn_cols] == ""] <- NA
acm_df$Race.Ethnicity <- apply(acm_df[, ethn_cols], 1, function(x) toString(na.omit(x)))
acm_df <- clean_roommates(acm_df)
acm_df <- clean_pre_rel(acm_df)
acm_df <- acm_df[acm_df$Full.Name!="",]
acm_enc <- encode_acm_df(acm_df)
school_targets <- school_config(school_df, acm_enc)
team_placements_df <- initial_placement(acm_enc, school_targets)
initial_placement <- function(acm_enc, school_targets){
Browerser()
team_placements = list()
manual_plc_slots <- acm_enc[!is.na(acm_enc$Manual.Placement),] %>%
left_join(., select(school_targets, sch_id:School),
by=c("Manual.Placement" = "School")) %>%
select(acm_id,sch_id)
filled_slot_counts <- manual_plc_slots %>%
group_by(sch_id) %>%
summarise(filled = n())
team_size_targets <- select(school_targets, sch_id:size) %>%
left_join(., filled_slot_counts, by=("sch_id")) %>%
replace_na(list(filled = 0)) %>%
mutate(non_manual_size = as.numeric(size) - as.numeric(filled))
for (x in team_size_targets$sch_id[team_size_targets$non_manual_size>0]){
# create a list that repeats each school 'id' for the size of each team
team_slots = list(rep(x, subset(team_size_targets$non_manual_size, team_size_targets$sch_id == x)))
team_placements <- c(team_placements, team_slots)
}
# random placements of CMs
team_placements <- data.frame(placement=unlist(team_placements))
# Adds dummy id's if more slots are available than survey respondants
team_placements_df <- data.frame(acm_id=1:sum(school_targets$size))
team_placements_df <- merge(team_placements_df, manual_plc_slots, by="acm_id", all.x = T)
team_placements_df$sch_id[is.na(team_placements_df$sch_id)] <- team_placements[sample(nrow(team_placements), replace=F), ]
team_placements_df <- team_placements_df %>% rename(placement = sch_id)
# Merge team_placements_df with acm_df on the 'id' column
team_placements_df <- left_join(team_placements_df, acm_enc, by = "acm_id") %>%
replace_na(replace = list(Math.Confidence = 0,
Ed_HS = 0,
Ed_SomeCol = 0,
Ed_Col = 0,
HasTutored = 0,
SpanishAble = 0,
Lang_Other = 0,
Male = 0,
Other.Gender =0,
days_old = 0))
return(team_placements_df)
}
initial_placement <- function(acm_enc, school_targets){
Browser()
team_placements = list()
manual_plc_slots <- acm_enc[!is.na(acm_enc$Manual.Placement),] %>%
left_join(., select(school_targets, sch_id:School),
by=c("Manual.Placement" = "School")) %>%
select(acm_id,sch_id)
filled_slot_counts <- manual_plc_slots %>%
group_by(sch_id) %>%
summarise(filled = n())
team_size_targets <- select(school_targets, sch_id:size) %>%
left_join(., filled_slot_counts, by=("sch_id")) %>%
replace_na(list(filled = 0)) %>%
mutate(non_manual_size = as.numeric(size) - as.numeric(filled))
for (x in team_size_targets$sch_id[team_size_targets$non_manual_size>0]){
# create a list that repeats each school 'id' for the size of each team
team_slots = list(rep(x, subset(team_size_targets$non_manual_size, team_size_targets$sch_id == x)))
team_placements <- c(team_placements, team_slots)
}
# random placements of CMs
team_placements <- data.frame(placement=unlist(team_placements))
# Adds dummy id's if more slots are available than survey respondants
team_placements_df <- data.frame(acm_id=1:sum(school_targets$size))
team_placements_df <- merge(team_placements_df, manual_plc_slots, by="acm_id", all.x = T)
team_placements_df$sch_id[is.na(team_placements_df$sch_id)] <- team_placements[sample(nrow(team_placements), replace=F), ]
team_placements_df <- team_placements_df %>% rename(placement = sch_id)
# Merge team_placements_df with acm_df on the 'id' column
team_placements_df <- left_join(team_placements_df, acm_enc, by = "acm_id") %>%
replace_na(replace = list(Math.Confidence = 0,
Ed_HS = 0,
Ed_SomeCol = 0,
Ed_Col = 0,
HasTutored = 0,
SpanishAble = 0,
Lang_Other = 0,
Male = 0,
Other.Gender =0,
days_old = 0))
return(team_placements_df)
}
team_placements_df <- initial_placement(acm_enc, school_targets)
?browser
initial_placement <- function(acm_enc, school_targets){
browser()
team_placements = list()
manual_plc_slots <- acm_enc[!is.na(acm_enc$Manual.Placement),] %>%
left_join(., select(school_targets, sch_id:School),
by=c("Manual.Placement" = "School")) %>%
select(acm_id,sch_id)
filled_slot_counts <- manual_plc_slots %>%
group_by(sch_id) %>%
summarise(filled = n())
team_size_targets <- select(school_targets, sch_id:size) %>%
left_join(., filled_slot_counts, by=("sch_id")) %>%
replace_na(list(filled = 0)) %>%
mutate(non_manual_size = as.numeric(size) - as.numeric(filled))
for (x in team_size_targets$sch_id[team_size_targets$non_manual_size>0]){
# create a list that repeats each school 'id' for the size of each team
team_slots = list(rep(x, subset(team_size_targets$non_manual_size, team_size_targets$sch_id == x)))
team_placements <- c(team_placements, team_slots)
}
# random placements of CMs
team_placements <- data.frame(placement=unlist(team_placements))
# Adds dummy id's if more slots are available than survey respondants
team_placements_df <- data.frame(acm_id=1:sum(school_targets$size))
team_placements_df <- merge(team_placements_df, manual_plc_slots, by="acm_id", all.x = T)
team_placements_df$sch_id[is.na(team_placements_df$sch_id)] <- team_placements[sample(nrow(team_placements), replace=F), ]
team_placements_df <- team_placements_df %>% rename(placement = sch_id)
# Merge team_placements_df with acm_df on the 'id' column
team_placements_df <- left_join(team_placements_df, acm_enc, by = "acm_id") %>%
replace_na(replace = list(Math.Confidence = 0,
Ed_HS = 0,
Ed_SomeCol = 0,
Ed_Col = 0,
HasTutored = 0,
SpanishAble = 0,
Lang_Other = 0,
Male = 0,
Other.Gender =0,
days_old = 0))
return(team_placements_df)
}
team_placements_df <- initial_placement(acm_enc, school_targets)
View(manual_plc_slots)
View(manual_plc_slots)
View(filled_slot_counts)
View(team_size_targets)
View(team_size_targets)
school_df <- read_excel(path = paste(root_dir, school_df_file, sep = ""))
school_df <- read_excel(path = paste(root_dir, school_df_file, sep = ""))
school_df <- school_df[!is.na(school_df$School),]
school_df <- school_df[order(school_df$School),]
school_df$sch_id <- 1:nrow(school_df)
if(used_surveygizmo == "Yes"){
acm_df <- rename_headers(acm_df)
}
# Create One Race.Ethnicity Column
ethn_cols = c("Race.Ethnicity.African.American.Black",
"Race.Ethnicity.American.Indian.Alaskan.Native",
"Race.Ethnicity.Asian",
"Race.Ethnicity.Hispanic.Latino",
"Race.Ethnicity.Middle.Eastern",
"Race.Ethnicity.Native.Hawaiian.Pacific.Islander",
"Race.Ethnicity.White.Caucasian",
"Race.Ethnicity.Other")
acm_df$Race.Ethnicity <- apply(acm_df[, ethn_cols], 1, function(x) toString(na.omit(x)))
acm_df <- clean_roommates(acm_df)
acm_df <- clean_pre_rel(acm_df)
acm_df <- acm_df[acm_df$Full.Name!="",]
acm_enc <- encode_acm_df(acm_df)
school_targets <- school_config(school_df, acm_enc)
team_placements_df <- initial_placement(acm_enc, school_targets)
View(team_placements)
View(team_size_targets)
school_df <- read_excel(path = paste(root_dir, school_df_file, sep = ""))
school_df <- read_excel(path = paste(root_dir, school_df_file, sep = ""))
school_df <- school_df[!is.na(school_df$School),]
school_df <- school_df[order(school_df$School),]
school_df <- school_df[order(school_df$School),]
school_df$sch_id <- 1:nrow(school_df)
if(used_surveygizmo == "Yes"){
acm_df <- rename_headers(acm_df)
}
# Create One Race.Ethnicity Column
ethn_cols = c("Race.Ethnicity.African.American.Black",
"Race.Ethnicity.American.Indian.Alaskan.Native",
"Race.Ethnicity.Asian",
"Race.Ethnicity.Hispanic.Latino",
"Race.Ethnicity.Middle.Eastern",
"Race.Ethnicity.Native.Hawaiian.Pacific.Islander",
"Race.Ethnicity.White.Caucasian",
"Race.Ethnicity.Other")
school_df <- school_df[order(school_df$School),]
school_df$sch_id <- 1:nrow(school_df)
if(used_surveygizmo == "Yes"){
acm_df <- rename_headers(acm_df)
}
# Create One Race.Ethnicity Column
ethn_cols = c("Race.Ethnicity.African.American.Black",
"Race.Ethnicity.American.Indian.Alaskan.Native",
"Race.Ethnicity.Asian",
"Race.Ethnicity.Hispanic.Latino",
"Race.Ethnicity.Middle.Eastern",
"Race.Ethnicity.Native.Hawaiian.Pacific.Islander",
"Race.Ethnicity.White.Caucasian",
"Race.Ethnicity.Other")
acm_df[, ethn_cols][acm_df[, ethn_cols] == ""] <- NA
acm_df <- clean_roommates(acm_df)
school_targets <- school_config(school_df, acm_enc)
team_placements_df <- initial_placement(acm_enc, school_targets)
View(team_size_targets)
View(school_targets)
View(school_targets)
View(acm_enc)
team_placements_df <- initial_placement(acm_enc, school_targets)
# Full Application
Q
# Full Application
acm_df <- read.csv(file = paste(root_dir, acm_df_file, sep = ""), check.names=FALSE, stringsAsFactors = FALSE)
acm_df$acm_id <- 1:nrow(acm_df)
if(consider_commutes == "Yes"){
acm_commutes <- read.csv(file = paste(root_dir, "ACM Commutes.csv", sep = ""), check.names=FALSE)
acm_commutes$Commute.Time <- as.numeric(as.character(acm_commutes$Commute.Time))
acm_commutes$id_dest <- paste(acm_commutes$Full.Name, acm_commutes$School, sep = "_")
dt_commutes <- data.table(acm_commutes)
}
school_df <- read_excel(path = paste(root_dir, school_df_file, sep = ""))
school_df <- school_df[!is.na(school_df$School),]
school_df <- school_df[order(school_df$School),]
school_df$sch_id <- 1:nrow(school_df)
if(used_surveygizmo == "Yes"){
acm_df <- rename_headers(acm_df)
}
# Create One Race.Ethnicity Column
ethn_cols = c("Race.Ethnicity.African.American.Black",
"Race.Ethnicity.American.Indian.Alaskan.Native",
"Race.Ethnicity.Asian",
"Race.Ethnicity.Hispanic.Latino",
"Race.Ethnicity.Middle.Eastern",
"Race.Ethnicity.Native.Hawaiian.Pacific.Islander",
"Race.Ethnicity.White.Caucasian",
"Race.Ethnicity.Other")
acm_df[, ethn_cols][acm_df[, ethn_cols] == ""] <- NA
acm_df$Race.Ethnicity <- apply(acm_df[, ethn_cols], 1, function(x) toString(na.omit(x)))
acm_df <- clean_roommates(acm_df)
acm_df <- clean_pre_rel(acm_df)
acm_df <- acm_df[acm_df$Full.Name!="",]
acm_enc <- encode_acm_df(acm_df)
school_targets <- school_config(school_df, acm_enc)
team_placements_df <- initial_placement(acm_enc, school_targets)
View(acm_enc)
View(team_size_targets)
for (x in team_size_targets$sch_id[team_size_targets$non_manual_size>0]){
# create a list that repeats each school 'id' for the size of each team
team_slots = list(rep(x, subset(team_size_targets$non_manual_size, team_size_targets$sch_id == x)))
team_placements <- c(team_placements, team_slots)
}
team_placements_df <- initial_valid_placement(team_placements_df, school_df, prevent_roommates=prevent_roommates, ij=ij)
