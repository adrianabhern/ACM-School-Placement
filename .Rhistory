team_placements_df <- data.frame(id = 1:length(team_placements), Team.Placement = team_placements)
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame(Ints=integer())
for (x in acm_df_with_placements$id){
acm_row <- subset(acm_df_with_placements, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
sum(acm_commutes[1])
}
calculate_score(acm_df, team_placements)
run_intermediate_annealing_process(acm_df, team_placements, placement_score = 445109, best_placements = team_placements, best_score = 445109, starting_iteration = 1, number_of_iterations = 200, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
knitr::opts_chunk$set(echo = TRUE)
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
library("gmapsdistance")
library("readxl")
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
gmapsdistance(origin = "1344+W+Eddy+st+Chicago+IL", destination = "36+S+Wabash+Ave+Chicago+IL", mode = "transit", departure = 1493643600, combinations = "all", shape = "wide")
gmapsdistance(origin = "1344+W+Eddy+st+Chicago+IL", destination = "36+S+Wabash+Ave+Chicago+IL", mode = "transit", departure = 1493730000, combinations = "all", shape = "wide")
library("gmapsdistance")
library("readxl")
gmapsdistance(origin = "1344+W+Eddy+st+Chicago+IL", destination = "36+S+Wabash+Ave+Chicago+IL", mode = "transit", departure = 1493730000, combinations = "all", shape = "wide")
gmapsdistance(origin = "1344+W+Eddy+st+Chicago+IL", destination = "36+S+Wabash+Ave+Chicago+IL", mode = "transit", combinations = "all", shape = "wide")
gmapsdistance(origin = "1344+W+Eddy+st+Chicago+IL", destination = "36+S+Wabash+Ave+Chicago+IL", departure = 1493730000, combinations = "all", shape = "wide")
gmapsdistance(origin = "1344+W+Eddy+st+Chicago+IL", destination = "36+S+Wabash+Ave+Chicago+IL", combinations = "all", shape = "wide")
gmapsdistance(origin = "Chicago+IL", destination = "Milwaukee+IL", combinations = "all", shape = "wide")
install.packages("gmapsdistance")
install.packages("readxl")
library("gmapsdistance")
library("readxl")
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# For some reason there is an empty row at the end of acm_df, so it's removed here:
acm_df <- acm_df[-nrow(acm_df),]
# Add an index column for schools and acm's
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
# Prior to this step, you may need to ensure that "Address Line 1" does not include any apartment/suite/room info.
# Note that for public tansit, google does not count the time spent waiting for the bus/train. For example, let's say I get off work at 5pm and a bus comes at 5:30pm which I ride for 45 minutes to get home. My commute is more accurately described as 75 minutes, but this method would still return 45 minutes.
# This line combines address data into one text string:
acm_df$"Full Address" = paste(acm_df$"Address Line 1", acm_df$"City", acm_df$"State", acm_df$"Postal Code")
# Replace spaces with "+" and remove commas (requests to google maps API cannot include spaces)
acm_df$"Full Address" = gsub(" ", "+", acm_df$"Full Address")
school_df$"Address" = gsub(" ", "+", school_df$"Address")
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# Create an empty dataframe that we will fill with commute times
acm_commutes <- data.frame(Ints=integer())
# Create a for loop that will read through each row of ACM data, feed it into the main function of our gmapsdistance package, and build a new data frame of commute info.
for (acm_id in acm_df[1:2,]$id){
# select just one row from acm_df, and assign it to a new object, acm_row
acm_row <- subset(acm_df, id == acm_id)
# feed that ACM's address and mode into the function 'gmapsdistance'. This will return a new object that is a single row of ACM commute times to each school. That row is assigned to a new object, 'commute'
commute = gmapsdistance(origin = acm_row$"Full Address", destination = school_df[1:2,]$"Address", mode = acm_row$"Method of Commute", combinations = "all", shape = "wide")
# create an 'id' column in our new 'commute' row that is the same as acm_id. We will use this to join our data frames.
commute$Time[["id"]] = acm_id
# as the for-loop runs, progressively add each single row of commute data into a new data frame called acm_commutes. As this for-loop runs, this dataframe grows to include all ACM's.
acm_commutes <- rbind(acm_commutes, commute$Time)
}
# Finally, combine our original input 'acm_df' with our new dataframe of commute times 'acm_commutes', and overwrite our original acm_df with this newly combined data frame.
acm_df <- merge(acm_df, acm_commutes, by = "id", all.x = TRUE)
```
# Prior to this step, you may need to ensure that "Address Line 1" does not include any apartment/suite/room info.
# Note that for public tansit, google does not count the time spent waiting for the bus/train. For example, let's say I get off work at 5pm and a bus comes at 5:30pm which I ride for 45 minutes to get home. My commute is more accurately described as 75 minutes, but this method would still return 45 minutes.
# This line combines address data into one text string:
acm_df$"Full Address" = paste(acm_df$"Address Line 1", acm_df$"City", acm_df$"State", acm_df$"Postal Code")
# Replace spaces with "+" and remove commas (requests to google maps API cannot include spaces)
acm_df$"Full Address" = gsub(" ", "+", acm_df$"Full Address")
school_df$"Address" = gsub(" ", "+", school_df$"Address")
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# Create an empty dataframe that we will fill with commute times
acm_commutes <- data.frame(Ints=integer())
# Create a for loop that will read through each row of ACM data, feed it into the main function of our gmapsdistance package, and build a new data frame of commute info.
for (acm_id in acm_df[1:2,]$id){
# select just one row from acm_df, and assign it to a new object, acm_row
acm_row <- subset(acm_df, id == acm_id)
# feed that ACM's address and mode into the function 'gmapsdistance'. This will return a new object that is a single row of ACM commute times to each school. That row is assigned to a new object, 'commute'
commute = gmapsdistance(origin = acm_row$"Full Address", destination = school_df[1:2,]$"Address", mode = acm_row$"Method of Commute", combinations = "all", shape = "wide")
# create an 'id' column in our new 'commute' row that is the same as acm_id. We will use this to join our data frames.
commute$Time[["id"]] = acm_id
# as the for-loop runs, progressively add each single row of commute data into a new data frame called acm_commutes. As this for-loop runs, this dataframe grows to include all ACM's.
acm_commutes <- rbind(acm_commutes, commute$Time)
}
# Finally, combine our original input 'acm_df' with our new dataframe of commute times 'acm_commutes', and overwrite our original acm_df with this newly combined data frame.
acm_df <- merge(acm_df, acm_commutes, by = "id", all.x = TRUE)
acm_df
library("gmapsdistance")
library("readxl")
library("gmapsdistance")
library("readxl")
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# For some reason there is an empty row at the end of acm_df, so it's removed here:
acm_df <- acm_df[-nrow(acm_df),]
# Add an index column for schools and acm's
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
gmapsdistance(origin = "1344+W+Eddy+St+Chicago+IL", destination = "City+Year+Chicago", mode = "transit", combinations = "all", shape = "wide")
gmapsdistance(origin = "1344+W+Eddy+St+Chicago+IL", destination = "City+Year+Chicago", mode = "driving", combinations = "all", shape = "wide")
gmapsdistance(origin = "1344+W+Eddy+St+Chicago+IL", destination = "City+Year+Chicago", mode = "driving", combinations = "all", shape = "wide")$Time
gmapsdistance(origin = "1344+W+Eddy+St+Chicago+IL", destination = "City+Year+Chicago", mode = "driving", combinations = "all", shape = "wide")
gmapsdistance(origin = "1344+W+Eddy+St+Chicago+IL", destination = "City+Year+Chicago", mode = "transit", combinations = "all", shape = "wide")
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
gmapsdistance(origin = "1344+W+Eddy+St+Chicago+IL", destination = "City+Year+Chicago", mode = "transit", combinations = "all", shape = "wide")
gmapsdistance(origin = "1344+W+Eddy+St+Chicago+IL", destination = "City+Year+Chicago", mode = "transit", combinations = "all", departure = 1493816400, shape = "wide")
gmapsdistance(origin = "1344+W+Eddy+St+Chicago+IL", destination = "City+Year+Chicago", mode = "transit", combinations = "all", dep_date = "2017-06-12", dep_time = "08:00:00", shape = "wide")
gmapsdistance(origin = "1344+W+Eddy+St+Chicago+IL", destination = "36+S+Wabash+Ave+Chicago+IL", mode = "transit", combinations = "all", dep_date = "2017-06-12", dep_time = "08:00:00", shape = "wide")
# Assumption: the number of ACMs in acm_df is exactly the same as the number of team slots
# first create an empty list
team_placements = list()
# use a for-loop to read each team size
for (x in 1:nrow(school_df)){
team_slots = list(
# create a list that repeats the school 'id' for the size of each team
rep(x,
subset(school_df$`Team Size`, school_df$`id` == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- unlist(team_placements)
calculate_score = function(acm_df, team_placements) {
team_placements_df <- data.frame(id = 1:length(team_placements), Team.Placement = team_placements)
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame(Ints=integer())
for (x in acm_df_with_placements$id){
acm_row <- subset(acm_df_with_placements, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
mean(acm_commutes[1])
}
current_temperature = function(iter, s_curve_amplitude, s_curve_center, s_curve_width) {
s_curve_amplitude * s_curve(iter, s_curve_center, s_curve_width)
}
s_curve = function(x, center, width) {
1 / (1 + exp((x - center) / width))
}
run_intermediate_annealing_process = function(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
n_acms = nrow(acm_df)
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
candidate_placements = team_placements
swap = sample(n_acms, 2)
candidate_placements[swap[1]:swap[2]] = rev(candidate_placements[swap[1]:swap[2]])
candidate_score = calculate_score(acm_df, candidate_placements)
if (temp > 0) {
ratio = exp((placement_score - candidate_score) / temp)
} else {
ratio = as.numeric(candidate_score < placement_score)
}
if (runif(1) < ratio) {
team_placements = candidate_placements
placement_score = candidate_score
if (placement_score < best_score) {
best_placements = team_placements
best_score = placement_score
}
}
}
return(list(team_placements=team_placements, placement_score=placement_score, best_placements=best_placements, best_score=best_score))
}
calculate_score(acm_df, team_placements)
team_placements
calculate_score(acm_df, team_placements)
calculate_score = function(acm_df, team_placements) {
team_placements_df <- data.frame(id = 1:length(team_placements), Team.Placement = team_placements)
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame(Ints=integer())
for (x in acm_df_with_placements$id){
acm_row <- subset(acm_df_with_placements, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
mean(acm_commutes[1])
}
calculate_score(acm_df, team_placements)
acm_df
team_placements
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# For some reason there is an empty row at the end of acm_df, so it's removed here:
acm_df <- acm_df[-nrow(acm_df),]
# Add an index column for schools and acm's
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
# set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# gmapsdistance(origin = "", destination = "36+S+Wabash+Ave+Chicago+IL", mode = "transit", combinations = "all", dep_date = "2017-06-12", dep_time = "08:00:00", shape = "wide")
# Assumption: the number of ACMs in acm_df is exactly the same as the number of team slots
# first create an empty list
team_placements = list()
# use a for-loop to read each team size
for (x in 1:nrow(school_df)){
team_slots = list(
# create a list that repeats the school 'id' for the size of each team
rep(x,
subset(school_df$`Team Size`, school_df$`id` == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- unlist(team_placements)
team_placements_df <- data.frame(id = 1:length(team_placements), Team.Placement = team_placements)
team_placements_df
calculate_score = function(acm_df, team_placements_df) {
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame(Ints=integer())
for (x in acm_df_with_placements$id){
acm_row <- subset(acm_df_with_placements, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
mean(acm_commutes[1])
}
calculate_score(acm_df, team_placements_df)
acm_df
team_placements_df
acm_df
calculate_score = function(acm_df, team_placements_df) {
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all.x = TRUE)
acm_commutes <- data.frame()
for (x in acm_df_with_placements$id){
acm_row <- subset(acm_df_with_placements, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
mean(acm_commutes[1])
}
#acm_df
#team_placements_df
calculate_score(acm_df, team_placements_df)
calculate_score = function(acm_df, team_placements_df) {
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all.x = TRUE)
acm_commutes <- data.frame()
for (x in acm_df_with_placements$id){
acm_row <- subset(acm_df_with_placements, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
mean(acm_commutes[1])
}
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all.x = TRUE)
acm_commutes <- data.frame()
for (x in acm_df_with_placements$id){
acm_row <- subset(acm_df_with_placements, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
mean(acm_commutes[1])
#calculate_score(acm_df, team_placements_df)
acm_commutes[1]
sum(acm_commutes[1])
mean(acm_commutes[1])
acm_commutes[1]
mean(acm_commutes[1])
colMeans((acm_commutes[1])
acm_commutes[1]
colMeans(acm_commutes[1])
lappply(acm_commutes[1], mean)
lapply(acm_commutes[1], mean)
lapply(acm_commutes[1], mean)[1]
lapply(acm_commutes[1], mean)$X937
sapply(acm_commutes[1], mean)
colMeans(acm_commutes[1])
colMeans(acm_commutes[1])[1]
colMeans(acm_commutes[1])[,1]
colMeans(acm_commutes[1])
colMeans(acm_commutes[1]) + 2
colMeans(acm_commutes[1])
colMeans(acm_commutes[1]) > 2
calculate_score = function(acm_df, team_placements_df) {
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all.x = TRUE)
acm_commutes <- data.frame()
for (x in acm_df_with_placements$id){
acm_row <- subset(acm_df_with_placements, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
colMeans(acm_commutes[1])
}
calculate_score(acm_df, team_placements_df)
current_temperature = function(iter, s_curve_amplitude, s_curve_center, s_curve_width) {
s_curve_amplitude * s_curve(iter, s_curve_center, s_curve_width)
}
s_curve = function(x, center, width) {
1 / (1 + exp((x - center) / width))
}
sample(1:10, 2)
sample(1:nrow(school_df), 2)
list <- sample(1:nrow(school_df), 2)
list[1]
list[[1]
list[[1]]
list[1]
candidate_placements = team_placements
candidate_placements
candidate_placements[candidate_placements = schools_to_swap[1]]
schools_to_swap = sample(1:nrow(school_df), 2)
candidate_placements[candidate_placements = schools_to_swap[1]]
schools_to_swap[1]
candidate_placements
candidate_placements[candidate_placements = 25]
candidate_placements[candidate_placements == 25]
candidate_placements[candidate_placements == schools_to_swap[1]]
candidate_placements
candidate_placements = data.frame(team_placements)
candidate_placements
candidate_placements[candidate_placements == schools_to_swap[1]]
candidate_placements = data.frame(index=1:nrows(team_placements), team_placements)
candidate_placements = data.frame(index=1:nrow(team_placements), team_placements)
nrow(team_placements)
length(team_placements)
candidate_placements = data.frame(index=1:length(team_placements), team_placements)
candidate_placements[candidate_placements == schools_to_swap[1]]
candidate_placements
candidate_placements[candidate_placements == schools_to_swap[1]]
candidate_placements$index[candidate_placements$team_placements == schools_to_swap[1]]
sample(1:3, 2)
sample(1:3, 2)
sample(1:3, 2)
sample(1:3, 2)
sample(1:3, 2)
sample(1:3, 2)
sample(1:3, 2)
sample(1:3, 2)
candidate_placements$index[candidate_placements$team_placements == schools_to_swap[1]]
sample(candidate_placements$index[candidate_placements$team_placements == schools_to_swap[1]], 1)
team_placements
candidate_placements = data.frame(index=1:length(team_placements), team_placements)
schools_to_swap = sample(1:nrow(school_df), 2)
schools_to_swap[1]
swap1 = sample(candidate_placements$index[candidate_placements$team_placements == schools_to_swap[1]], 1)
swap2 = sample(candidate_placements$index[candidate_placements$team_placements == schools_to_swap[2]], 1)
replace(team_placements, c(swap1, swap2), x[c(swap1, swap2)])
swap1
swap1[1]
swap2
replace(team_placements, c(swap1, swap2), x[c(swap2, swap1)])
replace(team_placements, c(swap1, swap2), team_placements[c(swap2, swap1)])
candidate_placements = team_placements
candidate_placements_df = data.frame(index=1:length(candidate_placements), candidate_placements)
schools_to_swap = sample(1:nrow(school_df), 2)
swap1 = sample(candidate_placements_df$index[candidate_placements_df$candidate_placements == schools_to_swap[1]], 1)
swap2 = sample(candidate_placements_df$index[candidate_placements_df$candidate_placements == schools_to_swap[2]], 1)
replace(candidate_placements, c(swap1, swap2), candidate_placements[c(swap2, swap1)])
current_temperature = function(iter, s_curve_amplitude, s_curve_center, s_curve_width) {
s_curve_amplitude * s_curve(iter, s_curve_center, s_curve_width)
}
s_curve = function(x, center, width) {
1 / (1 + exp((x - center) / width))
}
calculate_score = function(acm_df, team_placements_df) {
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all.x = TRUE)
acm_commutes <- data.frame()
for (x in acm_df_with_placements$id){
acm_row <- subset(acm_df_with_placements, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
colMeans(acm_commutes[1])
}
run_intermediate_annealing_process = function(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
n_acms = nrow(acm_df)
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
candidate_placements = team_placements
candidate_placements_df = data.frame(index=1:length(candidate_placements), candidate_placements)
schools_to_swap = sample(1:nrow(school_df), 2)
swap1 = sample(candidate_placements_df$index[candidate_placements_df$candidate_placements == schools_to_swap[1]], 1)
swap2 = sample(candidate_placements_df$index[candidate_placements_df$candidate_placements == schools_to_swap[2]], 1)
replace(candidate_placements, c(swap1, swap2), candidate_placements[c(swap2, swap1)])
candidate_score = calculate_score(acm_df, candidate_placements)
if (temp > 0) {
ratio = exp((placement_score - candidate_score) / temp)
} else {
ratio = as.numeric(candidate_score < placement_score)
}
if (runif(1) < ratio) {
team_placements = candidate_placements
placement_score = candidate_score
if (placement_score < best_score) {
best_placements = team_placements
best_score = placement_score
}
}
}
return(list(team_placements=team_placements, placement_score=placement_score, best_placements=best_placements, best_score=best_score))
}
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# For some reason there is an empty row at the end of acm_df, so it's removed here:
acm_df <- acm_df[-nrow(acm_df),]
# Add an index column for schools and acm's
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
# set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# gmapsdistance(origin = "", destination = "36+S+Wabash+Ave+Chicago+IL", mode = "transit", combinations = "all", dep_date = "2017-06-12", dep_time = "08:00:00", shape = "wide")
# Assumption: the number of ACMs in acm_df is exactly the same as the number of team slots
# first create an empty list
team_placements = list()
# use a for-loop to read each team size
for (x in 1:nrow(school_df)){
team_slots = list(
# create a list that repeats the school 'id' for the size of each team
rep(x,
subset(school_df$`Team Size`, school_df$`id` == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- unlist(team_placements)
team_placements_df <- data.frame(id = 1:length(team_placements), Team.Placement = team_placements)
calculate_score = function(acm_df, team_placements_df) {
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all.x = TRUE)
acm_commutes <- data.frame()
for (x in acm_df_with_placements$id){
acm_row <- subset(acm_df_with_placements, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
colMeans(acm_commutes[1])
}
calculate_score = function(acm_df, team_placements_df) {
team_placements_df <- data.frame(id = 1:length(team_placements), Team.Placement = team_placements)
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all.x = TRUE)
acm_commutes <- data.frame()
for (x in acm_df_with_placements$id){
acm_row <- subset(acm_df_with_placements, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
colMeans(acm_commutes[1])
}
calculate_score = function(acm_df, team_placements) {
team_placements_df <- data.frame(id = 1:length(team_placements), Team.Placement = team_placements)
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all.x = TRUE)
acm_commutes <- data.frame()
for (x in acm_df_with_placements$id){
acm_row <- subset(acm_df_with_placements, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
colMeans(acm_commutes[1])
}
calculate_score(acm_df, team_placements)
current_temperature = function(iter, s_curve_amplitude, s_curve_center, s_curve_width) {
s_curve_amplitude * s_curve(iter, s_curve_center, s_curve_width)
}
s_curve = function(x, center, width) {
1 / (1 + exp((x - center) / width))
}
run_intermediate_annealing_process = function(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
n_acms = nrow(acm_df)
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
candidate_placements = team_placements
candidate_placements_df = data.frame(index=1:length(candidate_placements), candidate_placements)
schools_to_swap = sample(1:nrow(school_df), 2)
swap1 = sample(candidate_placements_df$index[candidate_placements_df$candidate_placements == schools_to_swap[1]], 1)
swap2 = sample(candidate_placements_df$index[candidate_placements_df$candidate_placements == schools_to_swap[2]], 1)
replace(candidate_placements, c(swap1, swap2), candidate_placements[c(swap2, swap1)])
candidate_score = calculate_score(acm_df, candidate_placements)
if (temp > 0) {
ratio = exp((placement_score - candidate_score) / temp)
} else {
ratio = as.numeric(candidate_score < placement_score)
}
if (runif(1) < ratio) {
team_placements = candidate_placements
placement_score = candidate_score
if (placement_score < best_score) {
best_placements = team_placements
best_score = placement_score
}
}
}
return(list(team_placements=team_placements, placement_score=placement_score, best_placements=best_placements, best_score=best_score))
}
run_intermediate_annealing_process(acm_df, team_placements, placement_score = 1802, best_placements = team_placements, best_score = 1802, starting_iteration = 1, number_of_iterations = 200, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
calculate_score = function(acm_df, team_placements) {
team_placements_df <- data.frame(id = 1:length(team_placements), Team.Placement = team_placements)
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all.x = TRUE)
acm_commutes <- data.frame()
for (x in acm_df_with_placements$id){
acm_row <- subset(acm_df_with_placements, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
sum(acm_commutes[1])
}
calculate_score(acm_df, team_placements)
run_intermediate_annealing_process(acm_df, team_placements, starting_iteration = 1, number_of_iterations = 200, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
run_intermediate_annealing_process(acm_df, team_placements, placement_score = 445109, best_placements = team_placements, best_score = 445109, starting_iteration = 1, number_of_iterations = 200, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
