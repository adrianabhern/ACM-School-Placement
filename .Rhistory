# make swap
team_placements_df <- make_swap(team_placements_df, swap1, elig_plc_schwise_df, elig_plc_acmwise_df)
# recalc "elig" column
team_placements_df <- append_elig_col(team_placements_df, elig_plc_schwise_df, elig_plc_acmwise_df)
n_inelig <- nrow(team_placements_df[team_placements_df$elig == 0,])
}
# drop "elig" column
return(team_placements_df[, !(names(team_placements_df) %in% "elig")])
}
make_swap <- function(plcmts_df, swap1, elig_plc_schwise_df, elig_plc_acmwise_df){
plcmts_df_cols <- names(plcmts_df)
plcmts_df$acm_id_sch_id <- paste(plcmts_df$acm_id, plcmts_df$placement, sep="_")
schools_to_swap <- c(0, 0)
schools_to_swap[1] <- plcmts_df$placement[plcmts_df$acm_id==swap1]
school1_ids <- plcmts_df$acm_id[plcmts_df$placement == schools_to_swap[1]]
# Find schools at which ACM1 is eligible to serve based on school factors
school2_set_schwise <- elig_plc_schwise_df$sch_id[(elig_plc_schwise_df$acm_id == swap1)
&(elig_plc_schwise_df$sch_conf_sum==0)
&(elig_plc_schwise_df$sch_id != schools_to_swap[1])]
# Within that set of schools, find schools at which ACM1 is eligible to serve based on the other ACMs at those schools
elig_plc_acmwise_df <- merge(elig_plc_acmwise_df, plcmts_df[,c("acm_id", "placement")], by="acm_id")
school2_set <- elig_plc_acmwise_df %>%
filter(acm2_id == swap1 & placement %in% school2_set_schwise) %>%
group_by(placement) %>%
summarise(acm_conf_sum=sum(acm_conf)) %>%
filter(acm_conf_sum == 0) %>%
select(placement) %>% .[["placement"]]
if(length(school2_set)==0){
return(next)
} else if (length(unique(school2_set)) > 1){
schools_to_swap[2] <- sample(unique(school2_set), 1)
} else {
schools_to_swap[2] <- unique(school2_set)
}
school2_ids = plcmts_df$acm_id[plcmts_df$placement == schools_to_swap[2]]
# Find ACMs who are eligible to serve at school1
swap2_set_schwise <- elig_plc_schwise_df$acm_id[(elig_plc_schwise_df$sch_id == schools_to_swap[1])
&(elig_plc_schwise_df$elig==1)
&(elig_plc_schwise_df$acm_id %in% school2_ids)]
# Among those ACMs, find ACMs who are eligible to serve with the ACMs at school1
swap2_set <- elig_plc_acmwise_df %>%
filter(acm_id %in% swap2_set_schwise & acm2_id %in% school1_ids) %>%
group_by(acm_id) %>%
summarise(acm_conf_sum=sum(acm_conf)) %>%
filter(acm_conf_sum == 0) %>%
select(acm_id) %>% .[["acm_id"]]
if(length(swap2_set)==0){
return(next)
} else if(length(unique(swap2_set)) != 1){
swap2 <- sample(unique(swap2_set), 1)
} else {
swap2 <- unique(swap2_set)
}
# Sort by acm_id and reset the index
plcmts_df <- plcmts_df[order(plcmts_df$acm_id), ]
rownames(plcmts_df) <- 1:nrow(plcmts_df)
# make the swap
plcmts_df$placement <- replace(plcmts_df$placement, c(swap1, swap2), plcmts_df$placement[c(swap2, swap1)])
# return with original columns
return(plcmts_df[, plcmts_df_cols])
}
calculate_score <- function(team_placements_df, school_targets, gender_target=gender_g, commute_factor=dataset$commute_factor, age_factor=dataset$age_factor, ethnicity_factor=dataset$ethnicity_factor, Edscore_factor=dataset$Edscore_factor, Tutoring_factor=dataset$Tutoring_factor, Spanish_factor=dataset$Spanish_factor, Math_factor=dataset$Math_factor, Gender_factor=dataset$Gender_factor) {
# Merge  with school_df to pull in school characteristics
team_placements_df <- merge(team_placements_df, school_targets, by.x = "placement", by.y = "sch_id", all.x = TRUE)
# Store each score in a list
scores = list()
# COMMUTE SCORE: This score is simply the sum number of seconds each ACM travels to their assigned school
if(consider_commutes == "Yes"){
team_placements_df$id_dest <- paste(team_placements_df$Full.Name, team_placements_df$School, sep = "_")
scores$commute_score <- dt_commutes[id_dest %in% team_placements_df$id_dest, mean((Commute.Time^2), na.rm = TRUE)] * 3.5 * commute_factor
#scores$commute_score <- dt_commutes[id_dest %in% team_placements_df$id_dest, sum((Commute.Time), na.rm = TRUE)] * commute_factor
} else { scores$commute_score <- 0 }
# AGE SCORE: This score is the difference between the [overall age variance across the corps] and [overall average of each team's average age variance]
if(age_factor != 0){
age_var <-team_placements_df %>%
filter(!is.na(days_old)) %>%
group_by(placement) %>%
summarize(age_var = var(days_old)) %>%
ungroup() %>%
summarize(avg_age_var = mean(age_var))
scores$age_score <- abs(age_var$avg_age_var - var(team_placements_df$days_old)) /100 * age_factor
} else {scores$age_score <- 0}
# ETHNICITY SCORE: This score is the overall average of each team's average % representation that each teammate experiences. For example, 0.44 means that for the average team, the average teammate experiences that his/her personal ethnicity is represented in 44% of the team.
if(ethnicity_factor != 0){
ethnicity_eths <-
team_placements_df[!is.na(team_placements_df$Race.Ethnicity),] %>%
group_by(placement,
Race.Ethnicity) %>%
summarize(n_eths = n()) %>%
group_by(placement) %>%
mutate(lgst_eth_rep = max(n_eths/sum(n_eths))) %>%
distinct(lgst_eth_rep)
scores$ethnicity_score <- sum((ethnicity_eths$lgst_eth_rep*100)^1.5) * ethnicity_factor
} else {scores$ethnicity_score <- 0}
# IJ CONFLICT SCORE
if(preserve_ij_factor != 0){
ij_conflict_score <- team_placements_df %>%
filter(!is.na(IJ.Placement)) %>%
group_by(placement) %>%
count(IJ.Placement) %>%
filter(n>1)
scores$ij_conflict_score <- sum(ij_conflict_score$n) * 100 * preserve_ij_factor
} else {scores$ij_conflict_score <- 0}
# Scoring
placed <- team_placements_df %>%
group_by(placement) %>%
summarise(HS_Grads = sum(Ed_HS),
SomeCol = sum(Ed_SomeCol),
Tutoring = sum(HasTutored),
Spanish = sum(SpanishAble),
#OtherLang = sum(Lang_Other),
MathAble = sum(Math.Confidence),
Males = sum(Male)) %>%
left_join(., school_targets, by=c("placement" = "sch_id"))
scores$Edscore <- mean((abs((placed$HSGrad_tgt - placed$HS_Grads)) + abs((placed$SomeCol_tgt - placed$SomeCol)))^2.2) * 200 * Edscore_factor
scores$Tutoring <- sum((placed$TutExp - placed$Tutoring)^2) * Tutoring_factor
placed$SpanDiff <- placed$SpanishNeed - placed$Spanish
scores$Spanish <- ifelse(nrow(placed[placed$SpanDiff>0,]) > 0, 1e10, 0) * Spanish_factor
scores$Math <- sum((placed$Math_tgt - placed$MathAble)^2) * Math_factor
scores$Gender <- (sum(ifelse(placed$Males < 1, 1e10, 0)) + mean((placed$Male_tgt - placed$Males)^2) * 250) * Gender_factor
scores$aggr_score <- sum(unlist(scores))
return(scores)
}
#' Temperature Function
current_temperature = function(iter, s_curve_amplitude, s_curve_center, s_curve_width) {
s_curve_amplitude * s_curve(iter, s_curve_center, s_curve_width)
}
s_curve = function(x, center, width) {
1 / (1 + exp((x - center) / width))
}
#' Annealing and Swap Function
# TODO: If Spanish speaker randomly chosen for placement, only consider swaps with other Spanish speakers, unless the chosen ACM is already at a school with a surplus of Spanish speakers, in which case they may be placed anywhere
run_intermediate_annealing_process = function(starting_placements, school_df, best_placements=starting_placements, number_of_iterations, center_scale, width_scale) {
team_placements_df <- starting_placements
# Sort by acm_id so that each row index will equal acm_id
team_placements_df <- team_placements_df[order(team_placements_df$acm_id), ]
rownames(team_placements_df) <- 1:nrow(team_placements_df)
placement_score <- calculate_score(starting_placements, school_df)$aggr_score
best_score <- 1000000000000
trace <- data.frame(iter=c(1:(number_of_iterations+2)),
commute_score = 0,
age_score = 0,
ethnicity_score= 0,
ij_conflict_score = 0,
Edscore = 0,
Tutoring= 0,
Spanish = 0,
Math = 0,
Gender = 0,
score=0)
trace[1, 2:11] <- calculate_score(starting_placements, school_df)
for(i in 1:number_of_iterations) {
iter = 1 + i
temp = current_temperature(iter, 3000, number_of_iterations * center_scale, number_of_iterations * width_scale)
# Create a copy of team_placements_df
cand_plcmts_df <- team_placements_df
# Randomly select ACM to swap
swap1 <- sample(plcmts_df$acm_id[is.na(plcmts_df$Manual.Placement)
|plcmts_df$Manual.Placement==""
|plcmts_df$Manual.Placement==0], 1)
cand_plcmts_df <- make_swap(cand_plcmts_df, swap1, elig_plc_schwise_df, elig_plc_acmwise_df)
candidate_score <- calculate_score(cand_plcmts_df, school_df)
if (temp > 0) {
ratio <- exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio <- as.numeric(candidate_score$aggr_score < placement_score)
}
# Used for bug testing
# if (is.na(ratio)){
#   return(list(placement_score=as.data.frame(placement_score),
#               candidate_score=as.data.frame(candidate_score),
#               best_placements=best_placements,
#               trace=trace))
# }
if (runif(1) < ratio) {
team_placements_df <- cand_plcmts_df
placement_score <- candidate_score$aggr_score
trace[i+1, 2:11] <- candidate_score
if (placement_score < best_score) {
best_placements <- team_placements_df
best_score_diff <- candidate_score
best_score <- best_score_diff$aggr_score
}
}
}
# Add best scores to the last row of trace
trace[(number_of_iterations+2), 2:11] <- calculate_score(best_placements, school_df)
# Merge in School Name and all survey info
cols.x <- c("acm_id", "placement", "days_old")
cols.y <- c("School", "sch_id")
best_placements <- merge(best_placements[, cols.x], school_df[, cols.y], by.x = "placement", by.y = "sch_id", all.x = TRUE)
best_placements <- merge(best_placements, acm_df, by = "acm_id", all.x = TRUE)
# Merge in commute info
if(consider_commutes == "Yes"){
home_addresses <- dt_commutes[!duplicated(dt_commutes$Full.Name), ]
best_placements <- merge(best_placements, home_addresses[,c("Full.Name", "Home.Address")], by = "Full.Name", all.x = TRUE)
best_placements <- within(best_placements, id_dest <- paste(Full.Name, School, sep = "_"))
commutes <- dt_commutes[id_dest %in% best_placements$id_dest, ]
commutes <- commutes[,c("Full.Name", "Commute.Time", "Commute.Rank")]
best_placements <- merge(best_placements, commutes, by = "Full.Name", all.x = TRUE)
} else {
best_placements$Commute.Time <- NA
best_placements$Commute.Rank <- NA
best_placements$Home.Address <- NA
}
# Create one Tutoring Experience Grades Column
tut_exp_cols = c("Tutoring.Experience.ES",
"Tutoring.Experience.MS",
"Tutoring.Experience.HS")
best_placements[, tut_exp_cols][best_placements[, tut_exp_cols] == ""] <- NA
best_placements$Tutoring.Experience.Grades <- apply(best_placements[, tut_exp_cols], 1, function(x) toString(na.omit(x)))
# Create one Grade Level Preference Column
grd_lvl_pref_cols = c("Grade.Lvl.Pref.ES",
"Grade.Lvl.Pref.MS",
"Grade.Lvl.Pref.HS")
best_placements[, grd_lvl_pref_cols][best_placements[, grd_lvl_pref_cols] == ""] <- NA
best_placements$Grade.Lvl.Pref <- apply(best_placements[, grd_lvl_pref_cols ], 1, function(x) toString(na.omit(x)))
# Create one language column
language_cols = c("Language.Ability.Arabic"                       ,
"Language.Ability.CapeVerdeanCreole",
"Language.Ability.Chinese.Cantonese",
"Language.Ability.Chinese.Mandarin" ,
"Language.Ability.HaitianCreole"    ,
"Language.Ability.French"           ,
"Language.Ability.Nepali"           ,
"Language.Ability.Polish"           ,
"Language.Ability.Spanish"          ,
"Language.Ability.Swahili"          ,
"Language.Ability.Urdu"             ,
"Language.Ability.Vietnamese"       ,
"Language.Ability.Other")
best_placements[, language_cols][best_placements[, language_cols] == ""] <- NA
best_placements$Language <- apply(best_placements[, language_cols ], 1, function(x) toString(na.omit(x)))
best_placements$Age <- best_placements$days_old/365.25
cols <- c("acm_id",
"Full.Name",
"Pref.Name",
"placement",
"School",
"Gender",
"Race.Ethnicity",
# "Attnd.CY.School",
"Language",
"Language.Ability.Spanish",
"Tutoring.Experience.Months",
"Tutoring.Experience.Grades",
#"Grade.Lvl.Pref",
"Teaching.Credential",
"Tutoring.Preference",
"Math.Confidence",
#"Birth.Date",
"Age",
"Educational.Attainment",
# "You are presented with a project to plan. You would most likely work with your team in which of the following ways?",
# "When you are under pressure to get an assignment in on time, how do you normally react?",
# "If people were to describe you in one word, which of the following would it be?",
# "When given a new project, your first response is which of the following?",
# "Becoming a City Year corps member often comes with a number of uncertainties. Of the following, which is of biggest concern to you?",
"Roommate.Names",
"Prior.Rship.Name",
"IJ.Placement",
"Home.Address",
"Travel.Method",
"Commute.Time",
"Commute.Rank",
"Manual.Placement")
best_placements <- best_placements[, names(best_placements) %in% cols]
best_placements <- best_placements[order(best_placements$placement),]
best_placements$acm_id[best_placements$acm_id > nrow(acm_enc)] <- 800:(800 + sum(school_df$size) - nrow(acm_enc) - 1)
return(list(best_placements=best_placements,
best_score=best_score,
diff_scores=best_score_diff,
trace=trace))
}
dataset$consider_commutes[1] <- "Yes"
dataset$commute_factor = 1
dataset$consider_commutes[1] <- "Yes"
dataset$commute_factor = 1
dataset$age_factor = 0
dataset$ethnicity_factor = 0
dataset$Edscore_factor = 0
dataset$Tutoring_factor = 0
dataset$Spanish_factor = 0
dataset$Math_factor = 0
dataset$Gender_factor = 0
dataset$preserve_ij_factor = 0
library(readxl)
library(dplyr)
library(tidyr)
library(data.table)
# 'dataset' holds the input data for this script in Power BI
root_dir <- dataset$FP[1]
prevent_roommates <- dataset$prevent_roommates[1]
number_iterations <- dataset$number_iterations[1]
consider_commutes <- dataset$consider_commutes[1]
used_surveygizmo <- dataset$used_surveygizmo[1]
consider_HS_elig <- dataset$consider_HS_elig[1]
ij <- dataset$ij[1]
preserve_ij_factor <- dataset$preserve_ij_factor[1]
# Adjusted Factors
#sum_factors <- sum(c(dataset$commute_factor, dataset$age_factor, dataset$ethnicity_factor, #dataset$Edscore_factor,dataset$Tutoring_factor,dataset$Spanish_factor,dataset$Math_factor,dataset$Gender_factor))
#
#dataset$commute_factor = dataset$commute_factor/sum_factors
#dataset$age_factor = dataset$age_factor/sum_factors
#dataset$ethnicity_factor = dataset$ethnicity_factor/sum_factors
#dataset$Edscore_factor = dataset$Edscore_factor/sum_factors
#dataset$Tutoring_factor = dataset$Tutoring_factor/sum_factors
#dataset$Spanish_factor = dataset$Spanish_factor/sum_factors
#dataset$Math_factor = dataset$Math_factor/sum_factors
#dataset$Gender_factor = dataset$Gender_factor/sum_factors
acm_df <- read.csv(file = paste(root_dir, acm_df_file, sep = ""), check.names=FALSE, stringsAsFactors = FALSE)
acm_df <- acm_df[acm_df$Full.Name!="",]
acm_df$acm_id <- 1:nrow(acm_df)
if(consider_commutes == "Yes"){
acm_commutes <- read.csv(file = paste0(root_dir, "ACM Commutes.csv"), check.names=FALSE)
acm_commutes$Commute.Time <- as.numeric(as.character(acm_commutes$Commute.Time))
acm_commutes$id_dest <- paste(acm_commutes$Full.Name, acm_commutes$School, sep = "_")
dt_commutes <- data.table(acm_commutes)
}
school_df <- read_excel(path = paste0(root_dir, school_df_file))
school_df <- school_df[!is.na(school_df$School),]
school_df <- school_df[order(school_df$School),]
school_df$sch_id <- 1:nrow(school_df)
if(used_surveygizmo == "Yes"){
acm_df <- rename_headers(acm_df)
}
# Combine ethnicity columns into one
ethn_cols <- names(acm_df %>% select(.,matches("Race.Ethnicity.")))
acm_df[, ethn_cols][acm_df[, ethn_cols] == ""] <- NA
acm_df$Race.Ethnicity <- apply(acm_df[, ethn_cols], 1, function(x) toString(na.omit(x)))
acm_df <- clean_RMs_PrRels(acm_df, school_df)
acm_enc <- encode_acm_df(acm_df)
school_targets <- school_config(school_df, acm_enc)
# This seed (1) produces 3 errors to fix
set.seed(1)
team_placements_df <- initial_placement(acm_enc, school_targets)
elig_plc_schwise_df <- elig_plcmnts_schwise(team_placements_df, school_df)
elig_plc_acmwise_df <- elig_plcmnts_acmwise(team_placements_df, prevent_roommates)
#Testing
# team_placements_df <- append_elig_col(team_placements_df, elig_plc_schwise_df, elig_plc_acmwise_df)
# n_inelig <- nrow(team_placements_df[team_placements_df$elig == 0,])
# team_placements_df <- team_placements_df[, !(names(team_placements_df) %in% "elig")]
# paste(n_inelig)
team_placements_df <- initial_valid_placement(team_placements_df, school_df, elig_plc_schwise_df, elig_plc_acmwise_df)
start.time <- Sys.time()
output <- run_intermediate_annealing_process(starting_placements = team_placements_df, school_df = school_targets, best_placements = team_placements_df, number_of_iterations = 2000, center_scale=runif(1, 1e-3, 0.25), width_scale=runif(1, 1e-3, 0.25))
run_intermediate_annealing_process = function(starting_placements, school_df, best_placements=starting_placements, number_of_iterations, center_scale, width_scale) {
team_placements_df <- starting_placements
# Sort by acm_id so that each row index will equal acm_id
team_placements_df <- team_placements_df[order(team_placements_df$acm_id), ]
rownames(team_placements_df) <- 1:nrow(team_placements_df)
placement_score <- calculate_score(starting_placements, school_df)$aggr_score
best_score <- 1000000000000
trace <- data.frame(iter=c(1:(number_of_iterations+2)),
commute_score = 0,
age_score = 0,
ethnicity_score= 0,
ij_conflict_score = 0,
Edscore = 0,
Tutoring= 0,
Spanish = 0,
Math = 0,
Gender = 0,
score=0)
trace[1, 2:11] <- calculate_score(starting_placements, school_df)
for(i in 1:number_of_iterations) {
iter = 1 + i
temp = current_temperature(iter, 3000, number_of_iterations * center_scale, number_of_iterations * width_scale)
# Create a copy of team_placements_df
cand_plcmts_df <- team_placements_df
# Randomly select ACM to swap
swap1 <- sample(cand_plcmts_df$acm_id[is.na(cand_plcmts_df$Manual.Placement)
|cand_plcmts_df$Manual.Placement==""
|cand_plcmts_df$Manual.Placement==0], 1)
cand_plcmts_df <- make_swap(cand_plcmts_df, swap1, elig_plc_schwise_df, elig_plc_acmwise_df)
candidate_score <- calculate_score(cand_plcmts_df, school_df)
if (temp > 0) {
ratio <- exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio <- as.numeric(candidate_score$aggr_score < placement_score)
}
# Used for bug testing
# if (is.na(ratio)){
#   return(list(placement_score=as.data.frame(placement_score),
#               candidate_score=as.data.frame(candidate_score),
#               best_placements=best_placements,
#               trace=trace))
# }
if (runif(1) < ratio) {
team_placements_df <- cand_plcmts_df
placement_score <- candidate_score$aggr_score
trace[i+1, 2:11] <- candidate_score
if (placement_score < best_score) {
best_placements <- team_placements_df
best_score_diff <- candidate_score
best_score <- best_score_diff$aggr_score
}
}
}
# Add best scores to the last row of trace
trace[(number_of_iterations+2), 2:11] <- calculate_score(best_placements, school_df)
# Merge in School Name and all survey info
cols.x <- c("acm_id", "placement", "days_old")
cols.y <- c("School", "sch_id")
best_placements <- merge(best_placements[, cols.x], school_df[, cols.y], by.x = "placement", by.y = "sch_id", all.x = TRUE)
best_placements <- merge(best_placements, acm_df, by = "acm_id", all.x = TRUE)
# Merge in commute info
if(consider_commutes == "Yes"){
home_addresses <- dt_commutes[!duplicated(dt_commutes$Full.Name), ]
best_placements <- merge(best_placements, home_addresses[,c("Full.Name", "Home.Address")], by = "Full.Name", all.x = TRUE)
best_placements <- within(best_placements, id_dest <- paste(Full.Name, School, sep = "_"))
commutes <- dt_commutes[id_dest %in% best_placements$id_dest, ]
commutes <- commutes[,c("Full.Name", "Commute.Time", "Commute.Rank")]
best_placements <- merge(best_placements, commutes, by = "Full.Name", all.x = TRUE)
} else {
best_placements$Commute.Time <- NA
best_placements$Commute.Rank <- NA
best_placements$Home.Address <- NA
}
# Create one Tutoring Experience Grades Column
tut_exp_cols = c("Tutoring.Experience.ES",
"Tutoring.Experience.MS",
"Tutoring.Experience.HS")
best_placements[, tut_exp_cols][best_placements[, tut_exp_cols] == ""] <- NA
best_placements$Tutoring.Experience.Grades <- apply(best_placements[, tut_exp_cols], 1, function(x) toString(na.omit(x)))
# Create one Grade Level Preference Column
grd_lvl_pref_cols = c("Grade.Lvl.Pref.ES",
"Grade.Lvl.Pref.MS",
"Grade.Lvl.Pref.HS")
best_placements[, grd_lvl_pref_cols][best_placements[, grd_lvl_pref_cols] == ""] <- NA
best_placements$Grade.Lvl.Pref <- apply(best_placements[, grd_lvl_pref_cols ], 1, function(x) toString(na.omit(x)))
# Create one language column
language_cols = c("Language.Ability.Arabic"                       ,
"Language.Ability.CapeVerdeanCreole",
"Language.Ability.Chinese.Cantonese",
"Language.Ability.Chinese.Mandarin" ,
"Language.Ability.HaitianCreole"    ,
"Language.Ability.French"           ,
"Language.Ability.Nepali"           ,
"Language.Ability.Polish"           ,
"Language.Ability.Spanish"          ,
"Language.Ability.Swahili"          ,
"Language.Ability.Urdu"             ,
"Language.Ability.Vietnamese"       ,
"Language.Ability.Other")
best_placements[, language_cols][best_placements[, language_cols] == ""] <- NA
best_placements$Language <- apply(best_placements[, language_cols ], 1, function(x) toString(na.omit(x)))
best_placements$Age <- best_placements$days_old/365.25
cols <- c("acm_id",
"Full.Name",
"Pref.Name",
"placement",
"School",
"Gender",
"Race.Ethnicity",
# "Attnd.CY.School",
"Language",
"Language.Ability.Spanish",
"Tutoring.Experience.Months",
"Tutoring.Experience.Grades",
#"Grade.Lvl.Pref",
"Teaching.Credential",
"Tutoring.Preference",
"Math.Confidence",
#"Birth.Date",
"Age",
"Educational.Attainment",
# "You are presented with a project to plan. You would most likely work with your team in which of the following ways?",
# "When you are under pressure to get an assignment in on time, how do you normally react?",
# "If people were to describe you in one word, which of the following would it be?",
# "When given a new project, your first response is which of the following?",
# "Becoming a City Year corps member often comes with a number of uncertainties. Of the following, which is of biggest concern to you?",
"Roommate.Names",
"Prior.Rship.Name",
"IJ.Placement",
"Home.Address",
"Travel.Method",
"Commute.Time",
"Commute.Rank",
"Manual.Placement")
best_placements <- best_placements[, names(best_placements) %in% cols]
best_placements <- best_placements[order(best_placements$placement),]
best_placements$acm_id[best_placements$acm_id > nrow(acm_enc)] <- 800:(800 + sum(school_df$size) - nrow(acm_enc) - 1)
return(list(best_placements=best_placements,
best_score=best_score,
diff_scores=best_score_diff,
trace=trace))
}
start.time <- Sys.time()
output <- run_intermediate_annealing_process(starting_placements = team_placements_df, school_df = school_targets, best_placements = team_placements_df, number_of_iterations = 2000, center_scale=runif(1, 1e-3, 0.25), width_scale=runif(1, 1e-3, 0.25))
end.time <- Sys.time()
time.taken <- end.time - start.time
best_placements <- output$best_placements
# Hide "blown up" scores for a smoother, more interpretable graph
if(output$best_score < 1000000){
trace <- output$trace[output$trace$score < 1000000 & output$trace$score > 0,]
} else {
trace <- output$trace[output$trace$score > 0,]
}
write.table(output$best_placements, file = paste(root_dir, "Output - Team Placements (", gsub(":", ".", Sys.time()), ").csv", sep = ""), sep=",", row.names=FALSE, na = "")
write.table(trace, file = paste(root_dir, "Output - Trace (", gsub(":", ".", Sys.time()), ").csv", sep = ""), sep=",", row.names=FALSE, na = "")
View(trace)
View(best_placements[best_placements$Manual.Placement == "",])
mean(best_placements$Commute.Time[best_placements$Commute.Time != 999], na.rm = TRUE)
mean(best_placements$Commute.Rank, na.rm = TRUE)
time.taken
View(trace)
plot(trace)
plot(trace)
plot(trace[,c('iter', 'score')])
View(plot(trace[,c('iter', 'score')]))
View(plot(trace[,c('iter', 'score')]))
