}
# Prior to this step, you may need to ensure that "Address Line 1"
# does not include any apartment/suite/room info.
# Note that for public tansit, google does not count
# the time spent waiting for the bus/train. For example,
# let's say I get off work at 5pm and a bus comes at 5:15pm.
# I ride the bus 45 minutes to get home. My commute is more
# accurately described as 60 minutes, but this function would
# still return 45 minutes.
run_commutes = FALSE
if (run_commutes == TRUE){
# This line combines address data into one text string:
acm_df$"Full Address" = paste(acm_df$"Address Line 1", acm_df$"City", acm_df$"State", acm_df$"Postal Code")
# Replace spaces with "+" and remove commas (requests to google maps API cannot include spaces)
acm_df$"Full Address" = gsub(" ", "+", acm_df$"Full Address")
school_df$"Address" = gsub(" ", "+", school_df$"Address")
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# Create an empty dataframe that we will fill with commute times
acm_commutes <- data.frame(Ints=integer())
# Create a for loop that will read through each row of ACM data, feed it into the main function of our gmapsdistance package, and build a new data frame of commute info.
for (acm_id in acm_df[1:2,]$id){
# select just one row from acm_df, and assign it to a new object, acm_row
acm_row <- subset(acm_df, id == acm_id)
# feed that ACM's address and mode into the function 'gmapsdistance'. This will return a new object that is a single row of ACM commute times to each school. That row is assigned to a new object, 'commute'
commute = gmapsdistance(origin = acm_row$"Full Address", destination = school_df[1:2,]$"Address", mode = acm_row$"Method of Commute", combinations = "all", shape = "wide")
# create an 'id' column in our new 'commute' row that is the same as acm_id. We will use this to join our data frames.
commute$Time[["id"]] = acm_id
# as the for-loop runs, progressively add each single row of commute data into a new data frame called acm_commutes. As this for-loop runs, this dataframe grows to include all ACM's.
acm_commutes <- rbind(acm_commutes, commute$Time)
}
# Finally, combine our original input 'acm_df' with our new dataframe of commute times 'acm_commutes', and overwrite our original acm_df with this newly combined data frame.
acm_df <- merge(acm_df, acm_commutes, by = "id", all.x = TRUE)
}
start.time <- Sys.time()
run_intermediate_annealing_process(acm_df, team_placements, placement_score = 445109, best_placements = team_placements, best_score = 445109, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
knitr::opts_chunk$set(echo = TRUE)
# install.packages("gmapsdistance")
# install.packages("readxl")
# install.packages("googleway")
# install.packages("dplyr")
# install.packages("tidyr")
# Nick mentioned there may be a useful package that breaks down script timings
library("gmapsdistance")
library("readxl")
#library("googleway")
library("dplyr")
library("tidyr")
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# For some reason there is an empty row at the end of acm_df, so it's removed here:
acm_df <- acm_df[-nrow(acm_df),]
# Add an index column for schools and acm's
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
# Prior to this step, you may need to ensure that "Address Line 1"
# does not include any apartment/suite/room info.
# Note that for public tansit, google does not count
# the time spent waiting for the bus/train. For example,
# let's say I get off work at 5pm and a bus comes at 5:15pm.
# I ride the bus 45 minutes to get home. My commute is more
# accurately described as 60 minutes, but this function would
# still return 45 minutes.
run_commutes = FALSE
if (run_commutes == TRUE){
# This line combines address data into one text string:
acm_df$"Full Address" = paste(acm_df$"Address Line 1", acm_df$"City", acm_df$"State", acm_df$"Postal Code")
# Replace spaces with "+" and remove commas (requests to google maps API cannot include spaces)
acm_df$"Full Address" = gsub(" ", "+", acm_df$"Full Address")
school_df$"Address" = gsub(" ", "+", school_df$"Address")
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# Create an empty dataframe that we will fill with commute times
acm_commutes <- data.frame(Ints=integer())
# Create a for loop that will read through each row of ACM data, feed it into the main function of our gmapsdistance package, and build a new data frame of commute info.
for (acm_id in acm_df[1:2,]$id){
# select just one row from acm_df, and assign it to a new object, acm_row
acm_row <- subset(acm_df, id == acm_id)
# feed that ACM's address and mode into the function 'gmapsdistance'. This will return a new object that is a single row of ACM commute times to each school. That row is assigned to a new object, 'commute'
commute = gmapsdistance(origin = acm_row$"Full Address", destination = school_df[1:2,]$"Address", mode = acm_row$"Method of Commute", combinations = "all", shape = "wide")
# create an 'id' column in our new 'commute' row that is the same as acm_id. We will use this to join our data frames.
commute$Time[["id"]] = acm_id
# as the for-loop runs, progressively add each single row of commute data into a new data frame called acm_commutes. As this for-loop runs, this dataframe grows to include all ACM's.
acm_commutes <- rbind(acm_commutes, commute$Time)
}
# Finally, combine our original input 'acm_df' with our new dataframe of commute times 'acm_commutes', and overwrite our original acm_df with this newly combined data frame.
acm_df <- merge(acm_df, acm_commutes, by = "id", all.x = TRUE)
}
# Assumption: the number of ACMs in acm_df is exactly the same as the number of team slots
# first create an empty list
team_placements = list()
# use a for-loop to read each team size
for (x in 1:nrow(school_df)){
team_slots = list(
# create a list that repeats the school 'id' for the size of each team
rep(x,
subset(school_df$`Team Size`, school_df$`id` == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- unlist(team_placements)
grepv <- function(pat, x, ...) grep(pat, x, value = TRUE, ...)
PickTime <- function(myid, myplace){subset(commute_cols,
subset = id == myid,
select = myplace+1)}
calculate_score = function(acm_df, team_placements) {
# Convert the team_placement list into an dataframe with an 'id' column
team_placements_df <- data.frame(id = 1:length(team_placements), Team.Placement = team_placements)
# Merge team_placements_df with acm_df on the 'id' column we just created
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all.x = TRUE)
gender.ratio.ideal <- with(acm_df_with_placements, sum(Gender == "Male")/sum(Gender == "Female"))
acm_df_with_placements <- merge(acm_df_with_placements, school_df, by.x = "Team.Placement", by.y = "id", all.x = TRUE)
# Placement.Scores <-
#   group_by(acm_df_with_placements, Team.Placement) %>%
#   summarize(gender.ratio = sum(Gender == "Male")/sum(Gender == "Female"),
#             age.var = var(Age)) %>%
#   mutate(gender.ratio.dev = abs(gender.ratio - gender.ratio.ideal)) %>%
#   ungroup() %>%
#   summarize(gender.ratio.score = mean(gender.ratio.dev)*3,
#             avg.age.var = -mean(age.var))
# 3 is some arbitrary score weight
# Also, negative scores are better, and the "-" in front of mean age variance means that
# higher average variance of team ages gets relatively more favorable scores.
# for (x in unique(acm_df_with_placements$'School Name'){
# single_school_df = acm_df_with_placements[acm_df_with_placements == x]
# Calculate diversity components}
# Now we need to merge in commute information,
# but only for the appropriate destination address
# (the school each ACM was assigned to).
acm_commutes <- data.frame()
## USEFULL: system.time({ <<code to time>> })
# New method - 10x faster than a for-loop! It references functions defined just before 'calculate_score'
commute_cols <- acm_df_with_placements[ , c("id", grepv("Time.to.", names(acm_df_with_placements)))]
acm_commutes <- unlist(with(acm_df_with_placements, mapply(PickTime, id, Team.Placement)))
sum(acm_commutes)
# Previous method 1 (10x slower!!)
#for (x in acm_df_with_placements$id){
#   # Complicated subsetting to read each ACM
#   acm_commute_time = (subset(acm_df_with_placements, id == x)[ , grepl("Time.to.", name  # s(acm_df_with_placements))])[subset(acm_df_with_placements$Team.Placement, acm_  # df_with_placements$id == x)]
#   acm_commutes <- rbind(acm_commutes, acm_commute_time[1,1])
# }
# Previous method 2 (in a for loop)
#acm_row <- subset(acm_df_with_placements, id == x)[ , grepl("Time.to.", names(acm_row))]
#acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
#Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
#acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
current_temperature = function(iter, s_curve_amplitude, s_curve_center, s_curve_width) {
s_curve_amplitude * s_curve(iter, s_curve_center, s_curve_width)
}
s_curve = function(x, center, width) {
1 / (1 + exp((x - center) / width))
}
run_intermediate_annealing_process = function(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
n_acms = nrow(acm_df)
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
candidate_placements = team_placements
candidate_placements_df = data.frame(index=1:length(candidate_placements), candidate_placements)
schools_to_swap = sample(1:nrow(school_df), 2)
swap1 = with(candidate_placements_df, sample(index[candidate_placements == schools_to_swap[1]], 1))
swap2 = with(candidate_placements_df, sample(index[candidate_placements == schools_to_swap[2]], 1))
# Old Method
# swap1 = sample(candidate_placements_df$index[candidate_placements_df$candidate_placements == schools_to_swap[1]], 1)
# swap2 = sample(candidate_placements_df$index[candidate_placements_df$candidate_placements == schools_to_swap[2]], 1)
candidate_placements = replace(candidate_placements, c(swap1, swap2), candidate_placements[c(swap2, swap1)])
candidate_score = calculate_score(acm_df, candidate_placements)
if (temp > 0) {
ratio = exp((placement_score - candidate_score) / temp)
} else {
ratio = as.numeric(candidate_score < placement_score)
}
if (runif(1) < ratio) {
team_placements = candidate_placements
placement_score = candidate_score
if (placement_score < best_score) {
best_placements = team_placements
best_score = placement_score
}
}
}
return(list(team_placements=team_placements, placement_score=placement_score, best_placements=best_placements, best_score=best_score))
}
start.time <- Sys.time()
run_intermediate_annealing_process(acm_df, team_placements, placement_score = 445109, best_placements = team_placements, best_score = 445109, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
grepv <- function(pat, x, ...) grep(pat, x, value = TRUE, ...)
PickTime <- function(myid, myplace){subset(commute_cols,
subset = id == myid,
select = myplace+1)}
commute_cols <- acm_df[ , c("id", grepv("Time.to.", names(acm_df)))]
calculate_score = function(acm_df, team_placements) {
# Convert the team_placement list into an dataframe with an 'id' column
team_placements_df <- data.frame(id = 1:length(team_placements), Team.Placement = team_placements)
# Merge team_placements_df with acm_df on the 'id' column we just created
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all.x = TRUE)
gender.ratio.ideal <- with(acm_df_with_placements, sum(Gender == "Male")/sum(Gender == "Female"))
acm_df_with_placements <- merge(acm_df_with_placements, school_df, by.x = "Team.Placement", by.y = "id", all.x = TRUE)
# Placement.Scores <-
#   group_by(acm_df_with_placements, Team.Placement) %>%
#   summarize(gender.ratio = sum(Gender == "Male")/sum(Gender == "Female"),
#             age.var = var(Age)) %>%
#   mutate(gender.ratio.dev = abs(gender.ratio - gender.ratio.ideal)) %>%
#   ungroup() %>%
#   summarize(gender.ratio.score = mean(gender.ratio.dev)*3,
#             avg.age.var = -mean(age.var))
# 3 is some arbitrary score weight
# Also, negative scores are better, and the "-" in front of mean age variance means that
# higher average variance of team ages gets relatively more favorable scores.
# for (x in unique(acm_df_with_placements$'School Name'){
# single_school_df = acm_df_with_placements[acm_df_with_placements == x]
# Calculate diversity components}
# Now we need to merge in commute information,
# but only for the appropriate destination address
# (the school each ACM was assigned to).
acm_commutes <- data.frame()
## USEFULL: system.time({ <<code to time>> })
# New method - 10x faster than a for-loop! It references functions defined just before 'calculate_score'
acm_commutes <- unlist(with(acm_df_with_placements, mapply(PickTime, id, Team.Placement)))
sum(acm_commutes)
# Previous method 1 (10x slower!!)
#for (x in acm_df_with_placements$id){
#   # Complicated subsetting to read each ACM
#   acm_commute_time = (subset(acm_df_with_placements, id == x)[ , grepl("Time.to.", name  # s(acm_df_with_placements))])[subset(acm_df_with_placements$Team.Placement, acm_  # df_with_placements$id == x)]
#   acm_commutes <- rbind(acm_commutes, acm_commute_time[1,1])
# }
# Previous method 2 (in a for loop)
#acm_row <- subset(acm_df_with_placements, id == x)[ , grepl("Time.to.", names(acm_row))]
#acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
#Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
#acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
start.time <- Sys.time()
run_intermediate_annealing_process(acm_df, team_placements, placement_score = 445109, best_placements = team_placements, best_score = 445109, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
run_intermediate_annealing_process = function(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
# n_acms = nrow(acm_df)
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
# Create a copy of team_placements
candidate_placements = team_placements
# Create an 'index' column
candidate_placements_df = data.frame(index=1:length(candidate_placements), candidate_placements)
# Choose 2 schools at random
schools_to_swap = sample(1:nrow(school_df), 2)
# Choose 1 ACM from each of those schools
swap1 = with(candidate_placements_df, sample(index[candidate_placements == schools_to_swap[1]], 1))
swap2 = with(candidate_placements_df, sample(index[candidate_placements == schools_to_swap[2]], 1))
# Swap the team assignment of those 2 ACMs
candidate_placements = replace(candidate_placements, c(swap1, swap2), candidate_placements[c(swap2, swap1)])
# Merge in ACM data
candidate_score = calculate_score(acm_df, candidate_placements)
if (temp > 0) {
ratio = exp((placement_score - candidate_score) / temp)
} else {
ratio = as.numeric(candidate_score < placement_score)
}
if (runif(1) < ratio) {
team_placements = candidate_placements
placement_score = candidate_score
if (placement_score < best_score) {
best_placements = team_placements
best_score = placement_score
}
}
}
return(list(team_placements=team_placements, placement_score=placement_score, best_placements=best_placements, best_score=best_score))
}
start.time <- Sys.time()
run_intermediate_annealing_process(acm_df, team_placements, placement_score = 445109, best_placements = team_placements, best_score = 445109, starting_iteration = 1, number_of_iterations = 10, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
end.time <- Sys.time()
time.taken <- end.time - start.time
start.time <- Sys.time()
run_intermediate_annealing_process(acm_df, team_placements, placement_score = 445109, best_placements = team_placements, best_score = 445109, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
start.time <- Sys.time()
run_intermediate_annealing_process(acm_df, team_placements, placement_score = 445109, best_placements = team_placements, best_score = 445109, starting_iteration = 1, number_of_iterations = 10000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
team_placements
best_placements
knitr::opts_chunk$set(echo = TRUE)
library("gmapsdistance")
library("readxl")
#library("googleway")
library("dplyr")
library("tidyr")
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
acm_commutes <- read_excel(path = "Input 2 - ACM Commutes.xlsx")
school_df <- read_excel(path = "Input 3 - School Data.xls")
# For some reason there is an empty row at the end of acm_df, so it's removed here:
acm_df <- acm_df[-nrow(acm_df),]
# Add id columns
acm_df$id <- 1:nrow(acm_df)
acm_commutes$id <- 1:nrow(acm_commutes)
school_df$id <- 1:nrow(school_df)
View(acm_df)
View(acm_commutes)
View(school_df)
# Assumption: the number of ACMs in acm_df is exactly the same as the number of team slots
# first create an empty list
team_placements = list()
# use a for-loop to read each team size
for (x in 1:nrow(school_df)){
team_slots = list(
# create a list that repeats each school 'id' for the size of each team
rep(x,
subset(school_df$"Team Size", school_df$"id" == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- unlist(team_placements)
team_placements
knitr::opts_chunk$set(echo = TRUE)
# install.packages("gmapsdistance")
# install.packages("readxl")
# install.packages("googleway")
# install.packages("dplyr")
# install.packages("tidyr")
# Nick mentioned there may be a useful package that breaks down script timings
library("gmapsdistance")
library("readxl")
#library("googleway")
library("dplyr")
library("tidyr")
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
acm_commutes <- read_excel(path = "Input 2 - ACM Commutes.xlsx")
school_df <- read_excel(path = "Input 3 - School Data.xls")
# For some reason there is an empty row at the end of acm_df, so it's removed here:
acm_df <- acm_df[-nrow(acm_df),]
# Add id columns
acm_df$id <- 1:nrow(acm_df)
acm_commutes$id <- 1:nrow(acm_commutes)
school_df$id <- 1:nrow(school_df)
# Prior to this step, you may need to ensure that "Address Line 1"
# does not include any apartment/suite/room info.
# Note that for public tansit, google does not count
# the time spent waiting for the bus/train. For example,
# let's say I get off work at 5pm and a bus comes at 5:15pm.
# I ride the bus 45 minutes to get home. My commute is more
# accurately described as 60 minutes, but this function would
# still return 45 minutes.
run_commutes = FALSE
if (run_commutes == TRUE){
# This line combines address data into one text string:
acm_df$"Full Address" = paste(acm_df$"Address Line 1", acm_df$"City", acm_df$"State", acm_df$"Postal Code")
# Replace spaces with "+" and remove commas (requests to google maps API cannot include spaces)
acm_df$"Full Address" = gsub(" ", "+", acm_df$"Full Address")
school_df$"Address" = gsub(" ", "+", school_df$"Address")
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# Create an empty dataframe that we will fill with commute times
acm_commutes <- data.frame()
# Create a for loop that will read through each row of ACM data, feed it into the main function of our gmapsdistance package, and build a new data frame of commute info.
for (acm_id in acm_df[1:2,]$id){
# select just one row from acm_df, and assign it to a new object, acm_row
acm_row <- subset(acm_df, id == acm_id)
# feed that ACM's address and mode into the function 'gmapsdistance'. This will return a new object that is a single row of ACM commute times to each school. That row is assigned to a new object, 'commute'
commute = gmapsdistance(origin = acm_row$"Full Address", destination = school_df[1:2,]$"Address", mode = acm_row$"Method of Commute", combinations = "all", shape = "wide")
# create an 'id' column in our new 'commute' row that is the same as acm_id. We will use this to join our data frames.
commute$Time[["id"]] = acm_id
# as the for-loop runs, progressively add each single row of commute data into a new data frame called acm_commutes. As this for-loop runs, this dataframe grows to include all ACM's.
acm_commutes <- rbind(acm_commutes, commute$Time)
}
# Finally, combine our original input 'acm_df' with our new dataframe of commute times 'acm_commutes', and overwrite our original acm_df with this newly combined data frame.
# acm_df <- merge(acm_df, acm_commutes, by = "id", all.x = TRUE)
}
# Assumption: the number of ACMs in acm_df is exactly the same as the number of team slots
# first create an empty list
team_placements = list()
# use a for-loop to read each team size
for (x in 1:nrow(school_df)){
team_slots = list(
# create a list that repeats each school 'id' for the size of each team
rep(x,
subset(school_df$"Team Size", school_df$"id" == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- unlist(team_placements)
team_placements
# Obsolete:
# grepv <- function(pat, x, ...) grep(pat, x, value = TRUE, ...)
# commute_cols <- acm_df[ , c("id", grepv("Time.to.", names(acm_df)))]
PickTime <- function(myid, myplace){subset(acm_commutes,
subset = id == myid,
select = myplace+1)}
## We want the following characteristics to be represented evenly across teams. We calculate ratios  for the entire corps, and later calculate how well each team matches these ratios.
# gender.ratio.ideal <- with(acm_df, sum(Gender == "Male")/sum(Gender == "Female"))
# caucasian.ratio.ideal <-
# afamerican.ratio.ideal <-
# latinx.ratio.ideal <-
#
## Characteristics that we don't want to be even across all schools
# edu.attainment.hs.ideal <-
# edu.attainment.es.ideal <-
calculate_score = function(acm_df, team_placements) {
# Convert the team_placement list into a dataframe with an 'id' column
team_placements_df <- data.frame(id = 1:length(team_placements), Team.Placement = team_placements)
# Merge team_placements_df with acm_df on the 'id' column we just created
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all.x = TRUE)
# Merge acm_df_with_placements with school_df to pull in school characteristics
acm_df_with_placements <- merge(acm_df_with_placements, school_df, by.x = "Team.Placement", by.y = "id", all.x = TRUE)
#Placement.Scores <-
#  group_by(acm_df_with_placements, Team.Placement) %>%
#  summarize(gender.ratio = sum(Gender == "Male")/sum(Gender == "Female"),
#            age.var = var(Age)) %>%
#  mutate(gender.ratio.dev = abs(gender.ratio - gender.ratio.ideal)) %>%
#  ungroup() %>%
## 3 is some arbitrary score weight
#  summarize(gender.ratio.score = mean(gender.ratio.dev)*3,
#            avg.age.var = -mean(age.var))
## Also, negative scores are better, and the "-" in front of mean age variance means that
## higher average variance of team ages gets relatively more favorable scores.
## New commute calc method references functions defined just before 'calculate_score'
acm_df_with_placements$"Commute.Time" <- unlist(with(acm_df_with_placements, mapply(PickTime, id, Team.Placement)))
return(sum(acm_df_with_placements$"Commute.Time"))
# Previous commute calc method (10x slower!)
#   acm_row <- subset(acm_df_with_placements, id == x)[ , grepl("Time.to.", names(acm_row))]
#   acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
#   Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
#   acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
current_temperature = function(iter, s_curve_amplitude, s_curve_center, s_curve_width) {
s_curve_amplitude * s_curve(iter, s_curve_center, s_curve_width)
}
s_curve = function(x, center, width) {
1 / (1 + exp((x - center) / width))
}
run_intermediate_annealing_process = function(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
# Create a copy of team_placements
candidate_placements = team_placements
# Create an 'index' column
candidate_placements_df = data.frame(index=1:length(candidate_placements), candidate_placements)
# Choose 2 schools at random
schools_to_swap = sample(1:nrow(school_df), 2)
# Choose 1 ACM from each of those schools
swap1 = with(candidate_placements_df, sample(index[candidate_placements == schools_to_swap[1]], 1))
swap2 = with(candidate_placements_df, sample(index[candidate_placements == schools_to_swap[2]], 1))
# Swap the team assignment of those 2 ACMs
candidate_placements = replace(candidate_placements, c(swap1, swap2), candidate_placements[c(swap2, swap1)])
# Merge in ACM data
candidate_score = calculate_score(acm_df, candidate_placements)
if (temp > 0) {
ratio = exp((placement_score - candidate_score) / temp)
} else {
ratio = as.numeric(candidate_score < placement_score)
}
if (runif(1) < ratio) {
team_placements = candidate_placements
placement_score = candidate_score
if (placement_score < best_score) {
best_placements = team_placements
best_score = placement_score
}
}
}
return(list(team_placements=team_placements, placement_score=placement_score, best_placements=best_placements, best_score=best_score))
}
## USEFULL: system.time({ <<code to time>> })
#system.time({
output <- run_intermediate_annealing_process(acm_df, team_placements, placement_score = 445109, best_placements = team_placements, best_score = 445109, starting_iteration = 1, number_of_iterations = 100, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
#})
output
# Convert the team_placement list into a dataframe with an 'id' column
best_placements_df <- data.frame(id = 1:length(output$best_placements), Team.Placement = results$best_placements)
# Convert the team_placement list into a dataframe with an 'id' column
best_placements_df <- data.frame(id = 1:length(output$best_placements), Team.Placement = output$best_placements)
# Merge team_placements_df with acm_df on the 'id' column we just created
acm_df_output <- merge(acm_df, best_placements_df, by = "id", all.x = TRUE)
# Merge acm_df_with_placements with school_df to pull in school characteristics
acm_df_output <- merge(acm_df_output, school_df, by.x = "Team.Placement", by.y = "id", all.x = TRUE)
acm_df_output
View(acm_df_output)
team_placements_random <- sample(lenth(team_placements), 247)
team_placements_random <- sample(length(team_placements), 247)
team_placements_random
team_placements_random <- sample(length(team_placements), length(team_placements))
team_placements_random
## USEFULL: system.time({ <<code to time>> })
# system.time({
output <- run_intermediate_annealing_process(acm_df, team_placements, placement_score = 445109, best_placements = team_placements, best_score = 445109, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
#})
output
# Convert the team_placement list into a dataframe with an 'id' column
best_placements_df <- data.frame(id = 1:length(output$best_placements), Team.Placement = output$best_placements)
# Merge team_placements_df with acm_df on the 'id' column we just created
acm_df_output <- merge(acm_df, best_placements_df, by = "id", all.x = TRUE)
# Merge acm_df_with_placements with school_df to pull in school characteristics
acm_df_output <- merge(acm_df_output, school_df, by.x = "Team.Placement", by.y = "id", all.x = TRUE)
acm_df_output
