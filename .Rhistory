"Associate's Degree",
"Bachelor's Degree",
"Master's Desgree"),
num_rows,   replace=TRUE, prob=c(0.2, 0.2, 0.15, 0.4, 0.05) ),
Roomates = rep('none', num_rows)
)
}
acm_df_fake <- generate_fake_df(247)
sum((0.3, 0.03, 0.05, 0.15, 0.03, 0.03, 0.38, 0.05))
sum(0.3, 0.03, 0.05, 0.15, 0.03, 0.03, 0.38, 0.05)
sum(0.3, 0.03, 0.05, 0.13, 0.03, 0.03, 0.38, 0.05)
## Chris: I made many assumptions in ratios between the levels of each factor, but they can easily be tweaked as the survey is developed, and this data will help us test the algorithm.
generate_fake_df <- function(num_rows){
data.frame(
First.Name = rep('', num_rows),
Last.Name = rep('', num_rows),
Address.Line.1 = rep('', num_rows),
Address.Line.2 = rep('', num_rows),
City = rep('', num_rows),
State =  rep('', num_rows),
Postal.Code = rep('', num_rows),
Attnd.CY.Local.School = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Language.Ability = sample( c('Spanish',
'French',
'Arabic',
'Urdu',
'Nepali',
'Swahili',
'Chinese (Mandarin)',
'Chinese (Cantonese)',
'Polish',
'N/A',
'Other'),
num_rows, replace=TRUE,   prob=c(0.1, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02,  0.02, 0.7, 0.04) ),
Tutoring.Experience = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.7, 0.3) ),
# Tutoring.Experience.Months = sample( c(), num_rows,   replace=TRUE, prob=c(0.3, 0.2, 0.2, 0.1, 0.1, 0.1) ),
Tutoring.Experience.Grades = sample( c('Elementary School',
'Middle School',
'High School'), num_rows, replace=TRUE, prob=c(0.3, 0.3, 0.2, 0.2) ),
Teaching.Credential = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Tutoring.Preference = sample( c('ELA',
'Math',
'Either/No Preference'), num_rows, replace=TRUE, prob=c(0.4, 0.4, 0.2) ),
Grade.Level.Preference = sample( c('Elementary School',
'Middle School',
'High School',
'No Preference'), num_rows, replace=TRUE, prob=c(0.33, 0.33, 0.33) ),
Math.Attainment = sample( c('Pre-algebra or lower',
'Algebra I',
'Algebra II',
'Calculus or higher'), num_rows, replace=TRUE, prob=c(0.25, 0.25, 0.25, 0.25) ),
Method.of.Commute = sample( c('driving', 'transit'), num_rows, replace=TRUE, prob=c(0.3, 0.7) ),
Gender = sample( c('Female',
'Male',
'Transgender Male',
'Transgender Female',
'Gender Nonconforming (GNC)'), num_rows, replace=TRUE, prob=c(0.5, 0.3, 0.05, 0.05, 0.1) ),
Age = sample( c(18:24), num_rows, replace=TRUE, prob=c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1) ),
Race.Ethnicity = sample( c('African American/Black',
'American Indian/Alaskan Native',
'Asian',
'Hispanic/Latino',
'Middle Eastern',
'Native Hawaiian or Pacific Islander',
'White/Caucasian, non-Hispanic/Latino',
'Multi-ethnic (text input)'),
num_rows, replace=TRUE, prob=c(0.3, 0.03, 0.05, 0.13, 0.03, 0.03, 0.38, 0.05) ),
Educational.Attainment = sample( c('High School/GED',
'Some College',
"Associate's Degree",
"Bachelor's Degree",
"Master's Desgree"),
num_rows,   replace=TRUE, prob=c(0.2, 0.2, 0.15, 0.4, 0.05) ),
Roomates = rep('none', num_rows)
)
}
acm_df_fake <- generate_fake_df(247)
## Chris: I made many assumptions in ratios between the levels of each factor, but they can easily be tweaked as the survey is developed, and this data will help us test the algorithm.
generate_fake_df <- function(num_rows){
data.frame(
First.Name = rep('', num_rows),
Last.Name = rep('', num_rows),
Address.Line.1 = rep('', num_rows),
Address.Line.2 = rep('', num_rows),
City = rep('', num_rows),
State =  rep('', num_rows),
Postal.Code = rep('', num_rows),
Attnd.CY.Local.School = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Language.Ability = sample( c('Spanish',
'French',
'Arabic',
'Urdu',
'Nepali',
'Swahili',
'Chinese (Mandarin)',
'Chinese (Cantonese)',
'Polish',
'N/A',
'Other'),
num_rows, replace=TRUE,   prob=c(0.1, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02,  0.02, 0.7, 0.04) ),
Tutoring.Experience = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.7, 0.3) ),
# Tutoring.Experience.Months = sample( c(), num_rows,   replace=TRUE, prob=c(0.3, 0.2, 0.2, 0.1, 0.1, 0.1) ),
Tutoring.Experience.Grades = sample( c('Elementary School',
'Middle School',
'High School'), num_rows, replace=TRUE, prob=c(0.3, 0.3, 0.2, 0.2) ),
Teaching.Credential = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Tutoring.Preference = sample( c('ELA',
'Math',
'Either/No Preference'), num_rows, replace=TRUE, prob=c(0.4, 0.4, 0.2) ),
Grade.Level.Preference = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, Middle School, High School'), num_rows, replace=TRUE, prob=c(0.16, 0.16, 0.16, 0.16, 0.16, 0.2) ),
Math.Attainment = sample( c('Pre-algebra or lower',
'Algebra I',
'Algebra II',
'Calculus or higher'), num_rows, replace=TRUE, prob=c(0.25, 0.25, 0.25, 0.25) ),
Method.of.Commute = sample( c('driving', 'transit'), num_rows, replace=TRUE, prob=c(0.3, 0.7) ),
Gender = sample( c('Female',
'Male',
'Transgender Male',
'Transgender Female',
'Gender Nonconforming (GNC)'), num_rows, replace=TRUE, prob=c(0.5, 0.3, 0.05, 0.05, 0.1) ),
Age = sample( c(18:24), num_rows, replace=TRUE, prob=c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1) ),
Race.Ethnicity = sample( c('African American/Black',
'American Indian/Alaskan Native',
'Asian',
'Hispanic/Latino',
'Middle Eastern',
'Native Hawaiian or Pacific Islander',
'White/Caucasian, non-Hispanic/Latino',
'Multi-ethnic (text input)'),
num_rows, replace=TRUE, prob=c(0.3, 0.03, 0.05, 0.13, 0.03, 0.03, 0.38, 0.05) ),
Educational.Attainment = sample( c('High School/GED',
'Some College',
"Associate's Degree",
"Bachelor's Degree",
"Master's Desgree"),
num_rows,   replace=TRUE, prob=c(0.2, 0.2, 0.15, 0.4, 0.05) ),
Roomates = rep('none', num_rows)
)
}
acm_df_fake <- generate_fake_df(247)
## Chris: I made many assumptions in ratios between the levels of each factor, but they can easily be tweaked as the survey is developed, and this data will help us test the algorithm.
generate_fake_df <- function(num_rows){
data.frame(
First.Name = rep('', num_rows),
Last.Name = rep('', num_rows),
Address.Line.1 = rep('', num_rows),
Address.Line.2 = rep('', num_rows),
City = rep('', num_rows),
State =  rep('', num_rows),
Postal.Code = rep('', num_rows),
Attnd.CY.Local.School = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Language.Ability = sample( c('Spanish',
'French',
'Arabic',
'Urdu',
'Nepali',
'Swahili',
'Chinese (Mandarin)',
'Chinese (Cantonese)',
'Polish',
'N/A',
'Other'),
num_rows, replace=TRUE,   prob=c(0.1, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02,  0.02, 0.7, 0.04) ),
Tutoring.Experience = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.7, 0.3) ),
# Tutoring.Experience.Months = sample( c(), num_rows,   replace=TRUE, prob=c(0.3, 0.2, 0.2, 0.1, 0.1, 0.1) ),
Tutoring.Experience.Grades = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, Middle School, High School'), num_rows, replace=TRUE, prob=c(0.15, 0.15, 0.15, 0.15, 0.15, 0.1) ),
Teaching.Credential = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Tutoring.Preference = sample( c('ELA',
'Math',
'Either/No Preference'), num_rows, replace=TRUE, prob=c(0.4, 0.4, 0.2) ),
Grade.Level.Preference = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, Middle School, High School'), num_rows, replace=TRUE, prob=c(0.16, 0.16, 0.16, 0.16, 0.16, 0.2) ),
Math.Attainment = sample( c('Pre-algebra or lower',
'Algebra I',
'Algebra II',
'Calculus or higher'), num_rows, replace=TRUE, prob=c(0.25, 0.25, 0.25, 0.25) ),
Method.of.Commute = sample( c('driving', 'transit'), num_rows, replace=TRUE, prob=c(0.3, 0.7) ),
Gender = sample( c('Female',
'Male',
'Transgender Male',
'Transgender Female',
'Gender Nonconforming (GNC)'), num_rows, replace=TRUE, prob=c(0.5, 0.3, 0.05, 0.05, 0.1) ),
Age = sample( c(18:24), num_rows, replace=TRUE, prob=c(0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1) ),
Race.Ethnicity = sample( c('African American/Black',
'American Indian/Alaskan Native',
'Asian',
'Hispanic/Latino',
'Middle Eastern',
'Native Hawaiian or Pacific Islander',
'White/Caucasian, non-Hispanic/Latino',
'Multi-ethnic (text input)'),
num_rows, replace=TRUE, prob=c(0.3, 0.03, 0.05, 0.13, 0.03, 0.03, 0.38, 0.05) ),
Educational.Attainment = sample( c('High School/GED',
'Some College',
"Associate's Degree",
"Bachelor's Degree",
"Master's Desgree"),
num_rows,   replace=TRUE, prob=c(0.2, 0.2, 0.15, 0.4, 0.05) ),
Roomates = rep('none', num_rows)
)
}
acm_df_fake <- generate_fake_df(247)
acm_df_fake
+     rt <- st + ev }
latemail <- function(N, st="2012/01/01", et="2012/12/31") {
+     st <- as.POSIXct(as.Date(st))
+     et <- as.POSIXct(as.Date(et))
+     dt <- as.numeric(difftime(et,st,unit="sec"))
+     ev <- sort(runif(N, 0, dt))
+     rt <- st + ev }
set.seed(42); print(latemail(5))
latemail <- function(N, st="2012/01/01", et="2012/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="sec"))
ev <- sort(runif(N, 0, dt))
rt <- st + ev }
set.seed(42); print(latemail(5))
latemail <- function(N, st="1991/01/01", et="1998/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="sec"))
ev <- runif(N, 0, dt)
rt <- st + ev }
fake_dates <- latemail(5)
fake_dates
latemail <- function(N, st="1991/01/01", et="1998/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="day"))
ev <- runif(N, 0, dt)
rt <- st + ev }
fake_dates <- latemail(5)
fake_dates
latemail <- function(N, st="1991/01/01", et="1998/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="days"))
ev <- runif(N, 0, dt)
rt <- st + ev }
fake_dates <- latemail(5)
fake_dates
latemail <- function(N, st="1991/01/01", et="1998/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="secs"))
ev <- runif(N, 0, dt)
rt <- st + ev }
fake_dates <- latemail(5)
fake_dates
latemail <- function(N, st="1991/01/01", et="1998/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="secs"))
ev <- runif(N, 0, dt)
rt <- st + ev
trunc(rt, units = "days")}
fake_dates <- latemail(5)
fake_dates
## Chris: I made many assumptions in ratios between the levels of each factor, but they can easily be tweaked as the survey is developed, and this data will help us test the algorithm.
fake_dates <- function(N, st="1991/01/01", et="1998/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="secs"))
ev <- runif(N, 0, dt)
rt <- st + ev
trunc(rt, units = "days")}
generate_fake_df <- function(num_rows){
data.frame(
First.Name = rep('', num_rows),
Last.Name = rep('', num_rows),
Address.Line.1 = rep('', num_rows),
Address.Line.2 = rep('', num_rows),
City = rep('', num_rows),
State =  rep('', num_rows),
Postal.Code = rep('', num_rows),
Attnd.CY.Local.School = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Language.Ability = sample( c('Spanish',
'French',
'Arabic',
'Urdu',
'Nepali',
'Swahili',
'Chinese (Mandarin)',
'Chinese (Cantonese)',
'Polish',
'N/A',
'Other'),
num_rows, replace=TRUE,   prob=c(0.1, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02,  0.02, 0.7, 0.04) ),
Tutoring.Experience = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.7, 0.3) ),
# Tutoring.Experience.Months = sample( c(), num_rows,   replace=TRUE, prob=c(0.3, 0.2, 0.2, 0.1, 0.1, 0.1) ),
Tutoring.Experience.Grades = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, Middle School, High School'), num_rows, replace=TRUE, prob=c(0.15, 0.15, 0.15, 0.15, 0.15, 0.1) ),
Teaching.Credential = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Tutoring.Preference = sample( c('ELA',
'Math',
'Either/No Preference'), num_rows, replace=TRUE, prob=c(0.4, 0.4, 0.2) ),
Grade.Level.Preference = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, Middle School, High School'), num_rows, replace=TRUE, prob=c(0.16, 0.16, 0.16, 0.16, 0.16, 0.2) ),
Math.Attainment = sample( c('Pre-algebra or lower',
'Algebra I',
'Algebra II',
'Calculus or higher'), num_rows, replace=TRUE, prob=c(0.25, 0.25, 0.25, 0.25) ),
Method.of.Commute = sample( c('driving', 'transit'), num_rows, replace=TRUE, prob=c(0.3, 0.7) ),
Gender = sample( c('Female',
'Male',
'Transgender Male',
'Transgender Female',
'Gender Nonconforming (GNC)'), num_rows, replace=TRUE, prob=c(0.5, 0.3, 0.05, 0.05, 0.1) ),
Age = fake_dates(num_rows),
Race.Ethnicity = sample( c('African American/Black',
'American Indian/Alaskan Native',
'Asian',
'Hispanic/Latino',
'Middle Eastern',
'Native Hawaiian or Pacific Islander',
'White/Caucasian, non-Hispanic/Latino',
'Multi-ethnic (text input)'),
num_rows, replace=TRUE, prob=c(0.3, 0.03, 0.05, 0.13, 0.03, 0.03, 0.38, 0.05) ),
Educational.Attainment = sample( c('High School/GED',
'Some College',
"Associate's Degree",
"Bachelor's Degree",
"Master's Desgree"),
num_rows,   replace=TRUE, prob=c(0.2, 0.2, 0.15, 0.4, 0.05) ),
Roomates = rep('none', num_rows)
)
}
acm_df_fake <- generate_fake_df(247)
acm_df_fake
## Chris: I made many assumptions in ratios between the levels of each factor, but they can easily be tweaked as the survey is developed, and this data will help us test the algorithm.
# Used for Birthdates
fake_dates <- function(N, st="1991/01/01", et="1998/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="secs"))
ev <- runif(N, 0, dt)
rt <- st + ev
trunc(rt, units = "days")}
generate_fake_df <- function(num_rows){
data.frame(
First.Name = rep('', num_rows),
Last.Name = rep('', num_rows),
Address.Line.1 = rep('', num_rows),
Address.Line.2 = rep('', num_rows),
City = rep('', num_rows),
State =  rep('', num_rows),
Postal.Code = rep('', num_rows),
Attnd.CY.Local.School = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Language.Ability = sample( c('Spanish',
'French',
'Arabic',
'Urdu',
'Nepali',
'Swahili',
'Chinese (Mandarin)',
'Chinese (Cantonese)',
'Polish',
'N/A',
'Other'),
num_rows, replace=TRUE,   prob=c(0.1, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02,  0.02, 0.7, 0.04) ),
Tutoring.Experience = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.7, 0.3) ),
Tutoring.Experience.Months = sample(1:12, num_rows, replace = TRUE, prob = 12:1),
Tutoring.Experience.Grades = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, Middle School, High School'), num_rows, replace=TRUE, prob=c(0.15, 0.15, 0.15, 0.15, 0.15, 0.1) ),
Teaching.Credential = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Tutoring.Preference = sample( c('ELA',
'Math',
'Either/No Preference'), num_rows, replace=TRUE, prob=c(0.4, 0.4, 0.2) ),
Grade.Level.Preference = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, Middle School, High School'), num_rows, replace=TRUE, prob=c(0.16, 0.16, 0.16, 0.16, 0.16, 0.2) ),
Math.Attainment = sample( c('Pre-algebra or lower',
'Algebra I',
'Algebra II',
'Calculus or higher'), num_rows, replace=TRUE, prob=c(0.25, 0.25, 0.25, 0.25) ),
Method.of.Commute = sample( c('driving', 'transit'), num_rows, replace=TRUE, prob=c(0.3, 0.7) ),
Gender = sample( c('Female',
'Male',
'Transgender Male',
'Transgender Female',
'Gender Nonconforming (GNC)'), num_rows, replace=TRUE, prob=c(0.5, 0.3, 0.05, 0.05, 0.1) ),
Birth.Date = fake_dates(num_rows),
Race.Ethnicity = sample( c('African American/Black',
'American Indian/Alaskan Native',
'Asian',
'Hispanic/Latino',
'Middle Eastern',
'Native Hawaiian or Pacific Islander',
'White/Caucasian, non-Hispanic/Latino',
'Multi-ethnic (text input)'),
num_rows, replace=TRUE, prob=c(0.3, 0.03, 0.05, 0.13, 0.03, 0.03, 0.38, 0.05) ),
Educational.Attainment = sample( c('High School/GED',
'Some College',
"Associate's Degree",
"Bachelor's Degree",
"Master's Desgree"),
num_rows,   replace=TRUE, prob=c(0.2, 0.2, 0.15, 0.4, 0.05) ),
Roomates = rep('none', num_rows)
)
}
acm_df_fake <- generate_fake_df(247)
acm_df_fake
## Chris: I made many assumptions in ratios between the levels of each factor, but they can easily be tweaked as the survey is developed, and this data will help us test the algorithm.
# Used for Birthdates
fake_dates <- function(N, st="1991/01/01", et="1998/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="secs"))
ev <- runif(N, 0, dt)
rt <- st + ev
trunc(rt, units = "days")}
generate_fake_df <- function(num_rows){
data.frame(
First.Name = rep('', num_rows),
Last.Name = rep('', num_rows),
Address.Line.1 = rep('', num_rows),
Address.Line.2 = rep('', num_rows),
City = rep('', num_rows),
State =  rep('', num_rows),
Postal.Code = rep('', num_rows),
Attnd.CY.Local.School = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Language.Ability = sample( c('Spanish',
'French',
'Arabic',
'Urdu',
'Nepali',
'Swahili',
'Chinese (Mandarin)',
'Chinese (Cantonese)',
'Polish',
'N/A',
'Other'),
num_rows, replace=TRUE,   prob=c(0.1, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02,  0.02, 0.7, 0.04) ),
Tutoring.Experience = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.7, 0.3) ),
Tutoring.Experience.Months = sample(1:12, num_rows, replace = TRUE, prob = 12:1),
Tutoring.Experience.Grades = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, Middle School, High School'), num_rows, replace=TRUE, prob=c(0.15, 0.15, 0.15, 0.15, 0.15, 0.1) ),
Teaching.Credential = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Tutoring.Preference = sample( c('ELA',
'Math',
'Either/No Preference'), num_rows, replace=TRUE, prob=c(0.4, 0.4, 0.2) ),
Grade.Level.Preference = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, Middle School, High School'), num_rows, replace=TRUE, prob=c(0.16, 0.16, 0.16, 0.16, 0.16, 0.2) ),
Math.Attainment = sample( c('Pre-algebra or lower',
'Algebra I',
'Algebra II',
'Calculus or higher'), num_rows, replace=TRUE, prob=c(0.25, 0.25, 0.25, 0.25) ),
Method.of.Commute = sample( c('driving', 'transit'), num_rows, replace=TRUE, prob=c(0.3, 0.7) ),
Gender = sample( c('Female',
'Male',
'Transgender Male',
'Transgender Female',
'Gender Nonconforming (GNC)'), num_rows, replace=TRUE, prob=c(0.5, 0.3, 0.05, 0.05, 0.1) ),
Birth.Date = fake_dates(num_rows),
Race.Ethnicity = sample( c('African American/Black',
'American Indian/Alaskan Native',
'Asian',
'Hispanic/Latino',
'Middle Eastern',
'Native Hawaiian or Pacific Islander',
'White/Caucasian, non-Hispanic/Latino',
'Multi-ethnic (text input)'),
num_rows, replace=TRUE, prob=c(0.3, 0.03, 0.05, 0.13, 0.03, 0.03, 0.38, 0.05) ),
Educational.Attainment = sample( c('High School/GED',
'Some College',
"Associate's Degree",
"Bachelor's Degree",
"Master's Desgree"),
num_rows,   replace=TRUE, prob=c(0.2, 0.2, 0.15, 0.4, 0.05) ),
Roomates = rep('none', num_rows)
)
}
acm_df_fake <- generate_fake_df(2)
acm_df_fake
