'Gender Nonconforming (GNC)'), num_rows, replace=TRUE, prob=c(0.5, 0.3, 0.05, 0.05, 0.1) ),
Birth.Date = fake_dates(num_rows),
Race.Ethnicity.African.American.Black = sample( c('African American/Black', NA), num_rows, replace=TRUE, prob=c(0.4, 0.6) ),
Race.Ethnicity.White.Caucasian = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Asian =  sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Hispanic.Latino = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Middle.Eastern = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Native.Hawaiian.Pacific.Islander =  sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.American.Indian.Alaskan.Native = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Other =  sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Educational.Attainment = sample( c('High School/GED',
'Some College',
"Associate's Degree",
"Bachelor's Degree",
"Master's Desgree"),
num_rows,   replace=TRUE, prob=c(0.2, 0.2, 0.15, 0.4, 0.05) ),
Know.Living =  sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.5, 0.5) ),
Address.Line.1 = rep('', num_rows),
Address.Line.2 = rep('', num_rows),
City = rep('', num_rows),
State =  rep('', num_rows),
Postal.Code = rep('', num_rows),
Roomates = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.5, 0.5) ),
Roommate.Names = rep('none', num_rows),
Manual.Placement = sample( c(NA, school_df$`School Name`), num_rows, replace=TRUE, prob=c(0.9, rep(0.01, length(school_df$`School Name`))))
)
# Set at least one race per ACM
fake_df$Race.Ethnicity.White.Caucasian[is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('White/Caucasian', NA), length(fake_df$Race.Ethnicity.White.Caucasian[is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.8, 0.2) )
fake_df$Race.Ethnicity.White.Caucasian[!is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('White/Caucasian', NA), length(fake_df$Race.Ethnicity.White.Caucasian[!is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.05, 0.95) )
fake_df$Race.Ethnicity.Hispanic.Latino[!is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('Hispanic/Latino', NA), length(fake_df$Race.Ethnicity.Hispanic.Latino[!is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.1, 0.9) )
fake_df$Race.Ethnicity.Asian[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('Asian', NA), length(fake_df$Race.Ethnicity.Asian[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.3, 0.7) )
fake_df$Race.Ethnicity.Hispanic.Latino[is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian)] = sample( c('Hispanic/Latino', NA), length(fake_df$Race.Ethnicity.Hispanic.Latino[is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian)]), replace=TRUE, prob=c(0.6, 0.4) )
fake_df$Race.Ethnicity.Middle.Eastern[is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)] = sample( c('Middle Eastern', NA), length(fake_df$Race.Ethnicity.Middle.Eastern[is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)]), replace=TRUE, prob=c(0.1, 0.9) )
#fake_df$Race.Ethnicity.Native.Hawaiian.Pacific.Islander = sample( c('Native Hawaiian or Pacific Islander', NA), num_rows, replace=TRUE, prob=c(0.1, 0.9) )
fake_df$Race.Other[is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)] = sample( c('Other'), length(fake_df$Race.Ethnicity.Other[is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)]), replace=TRUE, prob=c(1) )
# Fix conditional survey items so that a "No" answer will cause dependent items to be NA
fake_df$Language.Ability[fake_df$Language.Other.English == 'No'] <- NA
fake_df$Tutoring.Experience.Months[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Tutoring.Experience.Grades[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Teaching.Credential[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Roommate.Names[fake_df$Roomates == 'No'] <- NA
return(fake_df)
}
acm_df_fake <- generate_fake_df(247, school_df, seed=42)
acm_df_fake
#write.table(acm_df_fake, file = "Input 1 - ACM Data.csv", sep=",", row.names=FALSE)
# This function used for Birthdates
fake_dates <- function(N, st="1991/01/01", et="1996/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="secs"))
ev <- runif(N, 0, dt)
rt <- st + ev
trunc(rt, units = "days")}
generate_fake_df <- function(num_rows, school_df, seed = 42){
set.seed(seed)
fake_df <- data.frame(
First.Name = rep('', num_rows),
Last.Name = rep('', num_rows),
Attnd.CY.School = sample( c('I did not attend a City Year school', school_df$`School Name`), num_rows, replace=TRUE, prob=c(0.95, rep(0.01, length(school_df$`School Name`)))),
Language.Other.English =  sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.2, 0.8) ),
Language.Ability = sample( c('Spanish',
'French',
'Arabic',
'Urdu',
'Nepali',
'Swahili',
'Chinese (Mandarin)',
'Chinese (Cantonese)',
'Polish',
'Other'),
num_rows, replace=TRUE, prob=c(0.25, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02,  0.02, 0.02) ),
Tutoring.Experience = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.7, 0.3) ),
Tutoring.Experience.Months = sample(1:12, num_rows, replace = TRUE, prob = 12:1),
Tutoring.Experience.Grades = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, High School',
'Elementary School, Middle School, High School'),
num_rows, replace=TRUE, prob=c(0.15, 0.15, 0.15, 0.15, 0.15, 0.05, 0.1) ),
Teaching.Credential = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Tutoring.Preference = sample( c('ELA',
'Math',
'Either/No Preference'), num_rows, replace=TRUE, prob=c(0.4, 0.4, 0.2) ),
Grade.Lvl.Preference = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, High School',
'Elementary School, Middle School, High School'), num_rows, replace=TRUE, prob=c(0.16, 0.16, 0.16, 0.16, 0.16, 0.01, 0.2) ),
Math.Confidence = sample( c('Pre-algebra or lower',
'Algebra I',
'Algebra II',
'Calculus or higher'), num_rows, replace=TRUE, prob=c(0.25, 0.25, 0.25, 0.25) ),
Travel.Method = sample( c('Driving',
'Public Transportation',
'Bicycling',
'Walking'), num_rows, replace=TRUE, prob=c(0.3, 0.6, 0.07, 0.03) ),
Gender = sample( c('Female',
'Male',
'Transgender Male',
'Transgender Female',
'Gender Nonconforming (GNC)'), num_rows, replace=TRUE, prob=c(0.5, 0.3, 0.05, 0.05, 0.1) ),
Birth.Date = fake_dates(num_rows),
Race.Ethnicity.African.American.Black = sample( c('African American/Black', NA), num_rows, replace=TRUE, prob=c(0.4, 0.6) ),
Race.Ethnicity.White.Caucasian = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Asian =  sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Hispanic.Latino = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Middle.Eastern = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Native.Hawaiian.Pacific.Islander =  sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.American.Indian.Alaskan.Native = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Other =  sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Educational.Attainment = sample( c('High School/GED',
'Some College',
"Associate's Degree",
"Bachelor's Degree",
"Master's Desgree"),
num_rows,   replace=TRUE, prob=c(0.2, 0.2, 0.15, 0.4, 0.05) ),
Know.Living =  sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.5, 0.5) ),
Address.Line.1 = rep('', num_rows),
Address.Line.2 = rep('', num_rows),
City = rep('', num_rows),
State =  rep('', num_rows),
Postal.Code = rep('', num_rows),
Roomates = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.5, 0.5) ),
Roommate.Names = rep('none', num_rows),
Manual.Placement = sample( c(NA, school_df$`School Name`), num_rows, replace=TRUE, prob=c(0.9, rep(0.01, length(school_df$`School Name`))))
)
# Set at least one race per ACM
fake_df$Race.Ethnicity.White.Caucasian[is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('White/Caucasian', NA), length(fake_df$Race.Ethnicity.White.Caucasian[is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.8, 0.2) )
fake_df$Race.Ethnicity.White.Caucasian[!is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('White/Caucasian', NA), length(fake_df$Race.Ethnicity.White.Caucasian[!is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.05, 0.95) )
fake_df$Race.Ethnicity.Hispanic.Latino[!is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('Hispanic/Latino', NA), length(fake_df$Race.Ethnicity.Hispanic.Latino[!is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.1, 0.9) )
fake_df$Race.Ethnicity.Asian[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('Asian', NA), length(fake_df$Race.Ethnicity.Asian[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.3, 0.7) )
fake_df$Race.Ethnicity.Hispanic.Latino[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian)] = sample( c('Hispanic/Latino', NA), length(fake_df$Race.Ethnicity.Hispanic.Latino[is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian)]), replace=TRUE, prob=c(0.6, 0.4) )
fake_df$Race.Ethnicity.Middle.Eastern[is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)] = sample( c('Middle Eastern', NA), length(fake_df$Race.Ethnicity.Middle.Eastern[is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)]), replace=TRUE, prob=c(0.1, 0.9) )
#fake_df$Race.Ethnicity.Native.Hawaiian.Pacific.Islander = sample( c('Native Hawaiian or Pacific Islander', NA), num_rows, replace=TRUE, prob=c(0.1, 0.9) )
fake_df$Race.Other[is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)] = sample( c('Other'), length(fake_df$Race.Ethnicity.Other[is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)]), replace=TRUE, prob=c(1) )
# Fix conditional survey items so that a "No" answer will cause dependent items to be NA
fake_df$Language.Ability[fake_df$Language.Other.English == 'No'] <- NA
fake_df$Tutoring.Experience.Months[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Tutoring.Experience.Grades[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Teaching.Credential[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Roommate.Names[fake_df$Roomates == 'No'] <- NA
return(fake_df)
}
acm_df_fake <- generate_fake_df(247, school_df, seed=42)
acm_df_fake
#write.table(acm_df_fake, file = "Input 1 - ACM Data.csv", sep=",", row.names=FALSE)
# This function used for Birthdates
fake_dates <- function(N, st="1991/01/01", et="1996/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="secs"))
ev <- runif(N, 0, dt)
rt <- st + ev
trunc(rt, units = "days")}
generate_fake_df <- function(num_rows, school_df, seed = 42){
set.seed(seed)
fake_df <- data.frame(
First.Name = rep('', num_rows),
Last.Name = rep('', num_rows),
Attnd.CY.School = sample( c('I did not attend a City Year school', school_df$`School Name`), num_rows, replace=TRUE, prob=c(0.95, rep(0.01, length(school_df$`School Name`)))),
Language.Other.English =  sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.2, 0.8) ),
Language.Ability = sample( c('Spanish',
'French',
'Arabic',
'Urdu',
'Nepali',
'Swahili',
'Chinese (Mandarin)',
'Chinese (Cantonese)',
'Polish',
'Other'),
num_rows, replace=TRUE, prob=c(0.25, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02,  0.02, 0.02) ),
Tutoring.Experience = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.7, 0.3) ),
Tutoring.Experience.Months = sample(1:12, num_rows, replace = TRUE, prob = 12:1),
Tutoring.Experience.Grades = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, High School',
'Elementary School, Middle School, High School'),
num_rows, replace=TRUE, prob=c(0.15, 0.15, 0.15, 0.15, 0.15, 0.05, 0.1) ),
Teaching.Credential = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Tutoring.Preference = sample( c('ELA',
'Math',
'Either/No Preference'), num_rows, replace=TRUE, prob=c(0.4, 0.4, 0.2) ),
Grade.Lvl.Preference = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, High School',
'Elementary School, Middle School, High School'), num_rows, replace=TRUE, prob=c(0.16, 0.16, 0.16, 0.16, 0.16, 0.01, 0.2) ),
Math.Confidence = sample( c('Pre-algebra or lower',
'Algebra I',
'Algebra II',
'Calculus or higher'), num_rows, replace=TRUE, prob=c(0.25, 0.25, 0.25, 0.25) ),
Travel.Method = sample( c('Driving',
'Public Transportation',
'Bicycling',
'Walking'), num_rows, replace=TRUE, prob=c(0.3, 0.6, 0.07, 0.03) ),
Gender = sample( c('Female',
'Male',
'Transgender Male',
'Transgender Female',
'Gender Nonconforming (GNC)'), num_rows, replace=TRUE, prob=c(0.5, 0.3, 0.05, 0.05, 0.1) ),
Birth.Date = fake_dates(num_rows),
Race.Ethnicity.African.American.Black = sample( c('African American/Black', NA), num_rows, replace=TRUE, prob=c(0.4, 0.6) ),
Race.Ethnicity.White.Caucasian = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Asian =  sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Hispanic.Latino = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Middle.Eastern = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Native.Hawaiian.Pacific.Islander =  sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.American.Indian.Alaskan.Native = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Other =  sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Educational.Attainment = sample( c('High School/GED',
'Some College',
"Associate's Degree",
"Bachelor's Degree",
"Master's Desgree"),
num_rows,   replace=TRUE, prob=c(0.2, 0.2, 0.15, 0.4, 0.05) ),
Know.Living =  sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.5, 0.5) ),
Address.Line.1 = rep('', num_rows),
Address.Line.2 = rep('', num_rows),
City = rep('', num_rows),
State =  rep('', num_rows),
Postal.Code = rep('', num_rows),
Roomates = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.5, 0.5) ),
Roommate.Names = rep('none', num_rows),
Manual.Placement = sample( c(NA, school_df$`School Name`), num_rows, replace=TRUE, prob=c(0.9, rep(0.01, length(school_df$`School Name`))))
)
# Set at least one race per ACM
fake_df$Race.Ethnicity.White.Caucasian[is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('White/Caucasian', NA), length(fake_df$Race.Ethnicity.White.Caucasian[is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.8, 0.2) )
fake_df$Race.Ethnicity.White.Caucasian[!is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('White/Caucasian', NA), length(fake_df$Race.Ethnicity.White.Caucasian[!is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.05, 0.95) )
fake_df$Race.Ethnicity.Hispanic.Latino[!is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('Hispanic/Latino', NA), length(fake_df$Race.Ethnicity.Hispanic.Latino[!is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.1, 0.9) )
fake_df$Race.Ethnicity.Asian[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('Asian', NA), length(fake_df$Race.Ethnicity.Asian[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.3, 0.7) )
fake_df$Race.Ethnicity.Hispanic.Latino[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian)] = sample( c('Hispanic/Latino', NA), length(fake_df$Race.Ethnicity.Hispanic.Latino[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian)]), replace=TRUE, prob=c(0.6, 0.4) )
fake_df$Race.Ethnicity.Middle.Eastern[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)] = sample( c('Middle Eastern', NA), length(fake_df$Race.Ethnicity.Middle.Eastern[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)]), replace=TRUE, prob=c(0.1, 0.9) )
#fake_df$Race.Ethnicity.Native.Hawaiian.Pacific.Islander = sample( c('Native Hawaiian or Pacific Islander', NA), num_rows, replace=TRUE, prob=c(0.1, 0.9) )
fake_df$Race.Other[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)] = sample( c('Other'), length(fake_df$Race.Ethnicity.Other[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)]), replace=TRUE, prob=c(1) )
# Fix conditional survey items so that a "No" answer will cause dependent items to be NA
fake_df$Language.Ability[fake_df$Language.Other.English == 'No'] <- NA
fake_df$Tutoring.Experience.Months[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Tutoring.Experience.Grades[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Teaching.Credential[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Roommate.Names[fake_df$Roomates == 'No'] <- NA
return(fake_df)
}
acm_df_fake <- generate_fake_df(247, school_df, seed=42)
acm_df_fake
#write.table(acm_df_fake, file = "Input 1 - ACM Data.csv", sep=",", row.names=FALSE)
# This function used for Birthdates
fake_dates <- function(N, st="1991/01/01", et="1996/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="secs"))
ev <- runif(N, 0, dt)
rt <- st + ev
trunc(rt, units = "days")}
generate_fake_df <- function(num_rows, school_df, seed = 42){
set.seed(seed)
fake_df <- data.frame(
First.Name = rep('', num_rows),
Last.Name = rep('', num_rows),
Attnd.CY.School = sample( c('I did not attend a City Year school', school_df$`School Name`), num_rows, replace=TRUE, prob=c(0.95, rep(0.01, length(school_df$`School Name`)))),
Language.Other.English =  sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.2, 0.8) ),
Language.Ability = sample( c('Spanish',
'French',
'Arabic',
'Urdu',
'Nepali',
'Swahili',
'Chinese (Mandarin)',
'Chinese (Cantonese)',
'Polish',
'Other'),
num_rows, replace=TRUE, prob=c(0.25, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02,  0.02, 0.02) ),
Tutoring.Experience = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.7, 0.3) ),
Tutoring.Experience.Months = sample(1:12, num_rows, replace = TRUE, prob = 12:1),
Tutoring.Experience.Grades = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, High School',
'Elementary School, Middle School, High School'),
num_rows, replace=TRUE, prob=c(0.15, 0.15, 0.15, 0.15, 0.15, 0.05, 0.1) ),
Teaching.Credential = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Tutoring.Preference = sample( c('ELA',
'Math',
'Either/No Preference'), num_rows, replace=TRUE, prob=c(0.4, 0.4, 0.2) ),
Grade.Lvl.Preference = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, High School',
'Elementary School, Middle School, High School'), num_rows, replace=TRUE, prob=c(0.16, 0.16, 0.16, 0.16, 0.16, 0.01, 0.2) ),
Math.Confidence = sample( c('Pre-algebra or lower',
'Algebra I',
'Algebra II',
'Calculus or higher'), num_rows, replace=TRUE, prob=c(0.25, 0.25, 0.25, 0.25) ),
Travel.Method = sample( c('Driving',
'Public Transportation',
'Bicycling',
'Walking'), num_rows, replace=TRUE, prob=c(0.3, 0.6, 0.07, 0.03) ),
Gender = sample( c('Female',
'Male',
'Transgender Male',
'Transgender Female',
'Gender Nonconforming (GNC)'), num_rows, replace=TRUE, prob=c(0.5, 0.3, 0.05, 0.05, 0.1) ),
Birth.Date = fake_dates(num_rows),
Race.Ethnicity.African.American.Black = sample( c('African American/Black', NA), num_rows, replace=TRUE, prob=c(0.4, 0.6) ),
Race.Ethnicity.White.Caucasian = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Asian =  sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Hispanic.Latino = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Middle.Eastern = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Native.Hawaiian.Pacific.Islander =  sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.American.Indian.Alaskan.Native = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Other =  sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Educational.Attainment = sample( c('High School/GED',
'Some College',
"Associate's Degree",
"Bachelor's Degree",
"Master's Desgree"),
num_rows,   replace=TRUE, prob=c(0.2, 0.2, 0.15, 0.4, 0.05) ),
Know.Living =  sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.5, 0.5) ),
Address.Line.1 = rep('', num_rows),
Address.Line.2 = rep('', num_rows),
City = rep('', num_rows),
State =  rep('', num_rows),
Postal.Code = rep('', num_rows),
Roomates = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.5, 0.5) ),
Roommate.Names = rep('none', num_rows),
Manual.Placement = sample( c(NA, school_df$`School Name`), num_rows, replace=TRUE, prob=c(0.9, rep(0.01, length(school_df$`School Name`))))
)
# Set at least one race per ACM
fake_df$Race.Ethnicity.White.Caucasian[is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('White/Caucasian', NA), length(fake_df$Race.Ethnicity.White.Caucasian[is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.8, 0.2) )
fake_df$Race.Ethnicity.White.Caucasian[!is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('White/Caucasian', NA), length(fake_df$Race.Ethnicity.White.Caucasian[!is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.05, 0.95) )
fake_df$Race.Ethnicity.Hispanic.Latino[!is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('Hispanic/Latino', NA), length(fake_df$Race.Ethnicity.Hispanic.Latino[!is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.1, 0.9) )
fake_df$Race.Ethnicity.Asian[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('Asian', NA), length(fake_df$Race.Ethnicity.Asian[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.3, 0.7) )
fake_df$Race.Ethnicity.Hispanic.Latino[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian)] = sample( c('Hispanic/Latino', NA), length(fake_df$Race.Ethnicity.Hispanic.Latino[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian)]), replace=TRUE, prob=c(0.6, 0.4) )
fake_df$Race.Ethnicity.Middle.Eastern[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)] = sample( c('Middle Eastern', NA), length(fake_df$Race.Ethnicity.Middle.Eastern[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)]), replace=TRUE, prob=c(0.1, 0.9) )
#fake_df$Race.Ethnicity.Native.Hawaiian.Pacific.Islander = sample( c('Native Hawaiian or Pacific Islander', NA), num_rows, replace=TRUE, prob=c(0.1, 0.9) )
#fake_df$Race.Ethnicity.American.Indian.Alaskan.Native = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
fake_df$Race.Other[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)] = sample( c('Other'), length(fake_df$Race.Ethnicity.Other[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)]), replace=TRUE, prob=c(1) )
# Fix conditional survey items so that a "No" answer will cause dependent items to be NA
fake_df$Language.Ability[fake_df$Language.Other.English == 'No'] <- NA
fake_df$Tutoring.Experience.Months[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Tutoring.Experience.Grades[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Teaching.Credential[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Roommate.Names[fake_df$Roomates == 'No'] <- NA
return(fake_df)
}
acm_df_fake <- generate_fake_df(247, school_df, seed=42)
acm_df_fake
#write.table(acm_df_fake, file = "Input 1 - ACM Data.csv", sep=",", row.names=FALSE)
# This function used for Birthdates
fake_dates <- function(N, st="1991/01/01", et="1996/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="secs"))
ev <- runif(N, 0, dt)
rt <- st + ev
trunc(rt, units = "days")}
generate_fake_df <- function(num_rows, school_df, seed = 42){
set.seed(seed)
fake_df <- data.frame(
First.Name = rep('', num_rows),
Last.Name = rep('', num_rows),
Attnd.CY.School = sample( c('I did not attend a City Year school', school_df$`School Name`), num_rows, replace=TRUE, prob=c(0.95, rep(0.01, length(school_df$`School Name`)))),
Language.Other.English =  sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.2, 0.8) ),
Language.Ability = sample( c('Spanish',
'French',
'Arabic',
'Urdu',
'Nepali',
'Swahili',
'Chinese (Mandarin)',
'Chinese (Cantonese)',
'Polish',
'Other'),
num_rows, replace=TRUE, prob=c(0.25, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02,  0.02, 0.02) ),
Tutoring.Experience = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.7, 0.3) ),
Tutoring.Experience.Months = sample(1:12, num_rows, replace = TRUE, prob = 12:1),
Tutoring.Experience.Grades = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, High School',
'Elementary School, Middle School, High School'),
num_rows, replace=TRUE, prob=c(0.15, 0.15, 0.15, 0.15, 0.15, 0.05, 0.1) ),
Teaching.Credential = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Tutoring.Preference = sample( c('ELA',
'Math',
'Either/No Preference'), num_rows, replace=TRUE, prob=c(0.4, 0.4, 0.2) ),
Grade.Lvl.Preference = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, High School',
'Elementary School, Middle School, High School'), num_rows, replace=TRUE, prob=c(0.16, 0.16, 0.16, 0.16, 0.16, 0.01, 0.2) ),
Math.Confidence = sample( c('Pre-algebra or lower',
'Algebra I',
'Algebra II',
'Calculus or higher'), num_rows, replace=TRUE, prob=c(0.25, 0.25, 0.25, 0.25) ),
Travel.Method = sample( c('Driving',
'Public Transportation',
'Bicycling',
'Walking'), num_rows, replace=TRUE, prob=c(0.3, 0.6, 0.07, 0.03) ),
Gender = sample( c('Female',
'Male',
'Transgender Male',
'Transgender Female',
'Gender Nonconforming (GNC)'), num_rows, replace=TRUE, prob=c(0.5, 0.3, 0.05, 0.05, 0.1) ),
Birth.Date = fake_dates(num_rows),
Race.Ethnicity.African.American.Black = sample( c('African American/Black', NA), num_rows, replace=TRUE, prob=c(0.4, 0.6) ),
Race.Ethnicity.White.Caucasian = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Asian =  sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Hispanic.Latino = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Middle.Eastern = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
#Race.Ethnicity.Native.Hawaiian.Pacific.Islander =  sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
#Race.Ethnicity.American.Indian.Alaskan.Native = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Race.Ethnicity.Other =  sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
Educational.Attainment = sample( c('High School/GED',
'Some College',
"Associate's Degree",
"Bachelor's Degree",
"Master's Desgree"),
num_rows,   replace=TRUE, prob=c(0.2, 0.2, 0.15, 0.4, 0.05) ),
Know.Living =  sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.5, 0.5) ),
Address.Line.1 = rep('', num_rows),
Address.Line.2 = rep('', num_rows),
City = rep('', num_rows),
State =  rep('', num_rows),
Postal.Code = rep('', num_rows),
Roomates = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.5, 0.5) ),
Roommate.Names = rep('none', num_rows),
Manual.Placement = sample( c(NA, school_df$`School Name`), num_rows, replace=TRUE, prob=c(0.9, rep(0.01, length(school_df$`School Name`))))
)
# Set at least one race per ACM
fake_df$Race.Ethnicity.White.Caucasian[is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('White/Caucasian', NA), length(fake_df$Race.Ethnicity.White.Caucasian[is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.8, 0.2) )
fake_df$Race.Ethnicity.White.Caucasian[!is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('White/Caucasian', NA), length(fake_df$Race.Ethnicity.White.Caucasian[!is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.05, 0.95) )
fake_df$Race.Ethnicity.Hispanic.Latino[!is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('Hispanic/Latino', NA), length(fake_df$Race.Ethnicity.Hispanic.Latino[!is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.1, 0.9) )
fake_df$Race.Ethnicity.Asian[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black)] = sample( c('Asian', NA), length(fake_df$Race.Ethnicity.Asian[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black)]), replace=TRUE, prob=c(0.3, 0.7) )
fake_df$Race.Ethnicity.Hispanic.Latino[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian)] = sample( c('Hispanic/Latino', NA), length(fake_df$Race.Ethnicity.Hispanic.Latino[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian)]), replace=TRUE, prob=c(0.6, 0.4) )
fake_df$Race.Ethnicity.Middle.Eastern[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)] = sample( c('Middle Eastern', NA), length(fake_df$Race.Ethnicity.Middle.Eastern[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)]), replace=TRUE, prob=c(0.1, 0.9) )
#fake_df$Race.Ethnicity.Native.Hawaiian.Pacific.Islander = sample( c('Native Hawaiian or Pacific Islander', NA), num_rows, replace=TRUE, prob=c(0.1, 0.9) )
#fake_df$Race.Ethnicity.American.Indian.Alaskan.Native = sample( c(NA), num_rows, replace=TRUE, prob=c(1) ),
fake_df$Race.Other[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)] = sample( c('Other'), length(fake_df$Race.Ethnicity.Other[is.na(fake_df$Race.Ethnicity.White.Caucasian) & is.na(fake_df$Race.Ethnicity.African.American.Black) & is.na(fake_df$Race.Ethnicity.Asian) & is.na(fake_df$Race.Ethnicity.Hispanic.Latino)]), replace=TRUE, prob=c(1) )
# Fix conditional survey items so that a "No" answer will cause dependent items to be NA
fake_df$Language.Ability[fake_df$Language.Other.English == 'No'] <- NA
fake_df$Tutoring.Experience.Months[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Tutoring.Experience.Grades[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Teaching.Credential[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Roommate.Names[fake_df$Roomates == 'No'] <- NA
return(fake_df)
}
acm_df_fake <- generate_fake_df(247, school_df, seed=42)
write.table(acm_df_fake, file = "Input 1 - ACM Data.csv", sep=",", row.names=FALSE)
acm_df <- read.csv(file = "Input 1 - ACM Data.csv")
acm_commutes <- read_excel(path = "Input 2 - ACM Commutes.xlsx")
school_df <- read_excel(path = "Input 3 - School Data.xls")
# Add id columns
acm_df$acm_id <- 1:nrow(acm_df)
acm_commutes$acm_id <- 1:nrow(acm_commutes)
school_df$sch_id <- 1:nrow(school_df)
# Commute times in long format will be easier to index and subset. This can be accomplished in the output of "gmapsdistance" function later.
acm_commutes_long <-
select(acm_commutes, -or) %>%
gather(dest, dist, -acm_id) %>%
mutate(id_dest = paste(acm_id, dest, sep = "_"))
library(gmapsdistance)
library(readxl)
#library("googleway")
library(dplyr)
library(tidyr)
library(data.table)
library(dummies)
acm_df <- read.csv(file = "Input 1 - ACM Data.csv")
acm_commutes <- read_excel(path = "Input 2 - ACM Commutes.xlsx")
school_df <- read_excel(path = "Input 3 - School Data.xls")
# Add id columns
acm_df$acm_id <- 1:nrow(acm_df)
acm_commutes$acm_id <- 1:nrow(acm_commutes)
school_df$sch_id <- 1:nrow(school_df)
# Commute times in long format will be easier to index and subset. This can be accomplished in the output of "gmapsdistance" function later.
acm_commutes_long <-
select(acm_commutes, -or) %>%
gather(dest, dist, -acm_id) %>%
mutate(id_dest = paste(acm_id, dest, sep = "_"))
var(c(100))
var(c(100, 2))
var(c(98, 2))
var(c(50, 50, 50, 50))
var(c(15, 15, 15, 15, 20, 20))
var(c(4/9, 4/9, 4/9, 4/9, 4/9, 4/9, 4/9, 4/9, 1/9))
var(c(4/10, 4/10, 4/10, 4/10, 5/10, 5/10, 5/10, 5/10, 5/10, 1/10))
var(c(4/9, 4/9, 4/9, 4/9, 4/9, 4/9, 4/9, 4/9, 1/9))
var(c(4/10, 4/10, 4/10, 4/10, 5/10, 5/10, 5/10, 5/10, 5/10, 1/10))
var(c(4/9, 4/9, 4/9, 4/9, 4/9, 4/9, 4/9, 4/9, 1/9))
var(c(4/10, 4/10, 4/10, 4/10, 5/10, 5/10, 5/10, 5/10, 5/10, 1/10))
var(c(8/18, 8/18, 8/18, 8/18, 9/18, 9/18, 9/18, 9/18, 9/18, 1/18))
((4/10) * 4 + (5/10) * 5 + 1/10)/10
(8/9 * 8 + 1/9) / 9
