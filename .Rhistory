Gender = sum(Male) + sum(Other.Gender)) %>%
left_join(., school_targets, by=c("placement" = "sch_id"))
scores$Edscore <- hs_loss(placed$HSGrad_tgt, placed$HS_Grads) + sum((placed$SomeCol_tgt - placed$SomeCol)^2)
scores$Tutoring <- sum((placed$TutExp - placed$Tutoring)^2)
scores$Spanish <- (reqd_spanish_loss(placed$SpanishNeed, placed$Spanish, min_reqd = 1) + sum((placed$OtherLang_tgt - placed$OtherLang)^2))
scores$Math <- sum((placed$Math_tgt - placed$MathAble)^2)
scores$Gender <- sum((placed$Male_tgt - placed$Gender)^2)
#################
# OVERALL SCORE #
#################
scores$aggr_score <- sum(unlist(scores))
return(scores)
}
calculate_score(team_placements_df, school_targets)
placed <- team_placements_df %>%
filter(is.na(team_placements_df$Manual.Placement)) %>%
group_by(placement) %>%
summarise(HS_Grads = sum(Ed_HS),
SomeCol = sum(Ed_SomeCol),
Tutoring = sum(HasTutored),
Spanish = sum(SpanishAble),
OtherLang = sum(Lang_Other),
MathAble = sum(Math.Confidence),
Gender = sum(Male) + sum(Other.Gender)) %>%
left_join(., school_targets, by=c("placement" = "sch_id"))
scores$Gender <- sum((placed$Male_tgt - placed$Gender)^2)
scores <- list()
scores$Gender <- sum((placed$Male_tgt - placed$Gender)^2)
scores$Gender <- sum((placed$Male_tgt - placed$Gender))^2
(placed$Male_tgt - placed$Gender)
(placed$Male_tgt - placed$Gender)^2
calculate_score = function(team_placements_df, school_targets, gender_target=gender_g) {
# Merge  with school_df to pull in school characteristics
team_placements_df <- team_placements_df %>%
left_join(., school_targets, by=c("placement" = "sch_id")) %>%
filter(acm_id < 9000)
# Store each score in a list
scores = list()
#################
# COMMUTE SCORE #
#################
# This score is simply the sum number of seconds each ACM travels to their assigned school
commutes = team_placements_df %>%
mutate(acm_dest_id = paste(acm_id, "-", placement)) %>%
left_join(., acm_commutes, by="acm_dest_id") %>%
replace_na(replace = list("dist" = 0))
# Take the sqrt to scale the value closer to the other features
scores$commute_score <- mean(commutes$dist)^2
#############
# AGE SCORE #
#############
# This score is the difference between the [overall age variance across the corps] and [overall average of each team's average age variance]
age_var <- team_placements_df %>%
group_by(placement) %>%
summarize(age_var = var(days_old)) %>%
filter(!is.na(age_var)) %>%
ungroup() %>%
summarize(avg_age_var = mean(age_var))
scores$age_score <- abs(age_var$avg_age_var - var(team_placements_df$days_old))
###################
# ETHNICITY SCORE #
###################
# This score is the overall average of each team's average % representation that each teammate experiences. For example, 0.44 means that for the average team, the average teammate experiences that his/her personal ethnicity is represented in 44% of the team.
ethnicity_eths <-
team_placements_df %>%
group_by(placement,
Race.Ethnicity.Black,
Race.Ethnicity.White,
Race.Ethnicity.Asian,
Race.Ethnicity.Hispanic) %>%
dplyr::summarize(n_eths = n()) %>%
group_by(placement) %>%
dplyr::mutate(pct_eths = n_eths/sum(n_eths) * n_eths / sum(n_eths)) %>%
dplyr::mutate(avg_eths_rep = sum(pct_eths)) %>%
summarize(avg_eths_rep = mean(avg_eths_rep)) %>%
summarize(avg_eths_rep = mean(avg_eths_rep))
scores$ethnicity_score <- (ethnicity_eths$avg_eths_rep*100)
#################
#    Scoring    #
#################
placed <- team_placements_df %>%
filter(is.na(team_placements_df$Manual.Placement)) %>%
group_by(placement) %>%
summarise(HS_Grads = sum(Ed_HS),
SomeCol = sum(Ed_SomeCol),
Tutoring = sum(HasTutored),
Spanish = sum(SpanishAble),
OtherLang = sum(Lang_Other),
MathAble = sum(Math.Confidence),
Gender = sum(Male) + sum(Other.Gender)) %>%
left_join(., school_targets, by=c("placement" = "sch_id"))
scores$Edscore <- hs_loss(placed$HSGrad_tgt, placed$HS_Grads) + sum((placed$SomeCol_tgt - placed$SomeCol)^2)
scores$Tutoring <- sum((placed$TutExp - placed$Tutoring)^2)
scores$Spanish <- (reqd_spanish_loss(placed$SpanishNeed, placed$Spanish, min_reqd = 1) + sum((placed$OtherLang_tgt - placed$OtherLang)^2))
scores$Math <- sum((placed$Math_tgt - placed$MathAble)^2)
scores$Gender <- sum((placed$Male_tgt - placed$Gender)^2)
#################
# OVERALL SCORE #
#################
scores$aggr_score <- sum(unlist(scores))
return(scores)
}
calculate_score(team_placements_df, school_targets)
calculate_score = function(team_placements_df, school_targets, gender_target=gender_g) {
# Merge  with school_df to pull in school characteristics
team_placements_df <- team_placements_df %>%
left_join(., school_targets, by=c("placement" = "sch_id")) %>%
filter(acm_id < 9000)
# Store each score in a list
scores = list()
#################
# COMMUTE SCORE #
#################
# This score is simply the sum number of seconds each ACM travels to their assigned school
commutes = team_placements_df %>%
mutate(acm_dest_id = paste(acm_id, "-", placement)) %>%
left_join(., acm_commutes, by="acm_dest_id") %>%
replace_na(replace = list("dist" = 0))
# Take the sqrt to scale the value closer to the other features
scores$commute_score <- mean(commutes$dist)
#############
# AGE SCORE #
#############
# This score is the difference between the [overall age variance across the corps] and [overall average of each team's average age variance]
age_var <- team_placements_df %>%
group_by(placement) %>%
summarize(age_var = var(days_old)) %>%
filter(!is.na(age_var)) %>%
ungroup() %>%
summarize(avg_age_var = mean(age_var))
scores$age_score <- sqrt(abs(age_var$avg_age_var - var(team_placements_df$days_old)))
###################
# ETHNICITY SCORE #
###################
# This score is the overall average of each team's average % representation that each teammate experiences. For example, 0.44 means that for the average team, the average teammate experiences that his/her personal ethnicity is represented in 44% of the team.
ethnicity_eths <-
team_placements_df %>%
group_by(placement,
Race.Ethnicity.Black,
Race.Ethnicity.White,
Race.Ethnicity.Asian,
Race.Ethnicity.Hispanic) %>%
dplyr::summarize(n_eths = n()) %>%
group_by(placement) %>%
dplyr::mutate(pct_eths = n_eths/sum(n_eths) * n_eths / sum(n_eths)) %>%
dplyr::mutate(avg_eths_rep = sum(pct_eths)) %>%
summarize(avg_eths_rep = mean(avg_eths_rep)) %>%
summarize(avg_eths_rep = mean(avg_eths_rep))
scores$ethnicity_score <- (ethnicity_eths$avg_eths_rep*100)
#################
#    Scoring    #
#################
placed <- team_placements_df %>%
filter(is.na(team_placements_df$Manual.Placement)) %>%
group_by(placement) %>%
summarise(HS_Grads = sum(Ed_HS),
SomeCol = sum(Ed_SomeCol),
Tutoring = sum(HasTutored),
Spanish = sum(SpanishAble),
OtherLang = sum(Lang_Other),
MathAble = sum(Math.Confidence),
Gender = sum(Male) + sum(Other.Gender)) %>%
left_join(., school_targets, by=c("placement" = "sch_id"))
scores$Edscore <- hs_loss(placed$HSGrad_tgt, placed$HS_Grads) + sum((placed$SomeCol_tgt - placed$SomeCol)^2)
scores$Tutoring <- sum((placed$TutExp - placed$Tutoring)^2)
scores$Spanish <- (reqd_spanish_loss(placed$SpanishNeed, placed$Spanish, min_reqd = 1) + sum((placed$OtherLang_tgt - placed$OtherLang)^2))
scores$Math <- sum((placed$Math_tgt - placed$MathAble)^2)
scores$Gender <- sum((placed$Male_tgt - placed$Gender)^2)
#################
# OVERALL SCORE #
#################
scores$aggr_score <- sum(unlist(scores))
return(scores)
}
calculate_score(team_placements_df, school_targets)
calculate_score = function(team_placements_df, school_targets, gender_target=gender_g) {
# Merge  with school_df to pull in school characteristics
team_placements_df <- team_placements_df %>%
left_join(., school_targets, by=c("placement" = "sch_id")) %>%
filter(acm_id < 9000)
# Store each score in a list
scores = list()
#################
# COMMUTE SCORE #
#################
# This score is simply the sum number of seconds each ACM travels to their assigned school
commutes = team_placements_df %>%
mutate(acm_dest_id = paste(acm_id, "-", placement)) %>%
left_join(., acm_commutes, by="acm_dest_id") %>%
replace_na(replace = list("dist" = 0))
# Take the sqrt to scale the value closer to the other features
scores$commute_score <- mean(commutes$dist)
#############
# AGE SCORE #
#############
# This score is the difference between the [overall age variance across the corps] and [overall average of each team's average age variance]
age_var <- team_placements_df %>%
group_by(placement) %>%
summarize(age_var = var(days_old)) %>%
filter(!is.na(age_var)) %>%
ungroup() %>%
summarize(avg_age_var = mean(age_var))
scores$age_score <- sqrt(abs(age_var$avg_age_var - var(team_placements_df$days_old)))
###################
# ETHNICITY SCORE #
###################
# This score is the overall average of each team's average % representation that each teammate experiences. For example, 0.44 means that for the average team, the average teammate experiences that his/her personal ethnicity is represented in 44% of the team.
ethnicity_eths <-
team_placements_df %>%
group_by(placement,
Race.Ethnicity.Black,
Race.Ethnicity.White,
Race.Ethnicity.Asian,
Race.Ethnicity.Hispanic) %>%
dplyr::summarize(n_eths = n()) %>%
group_by(placement) %>%
dplyr::mutate(pct_eths = n_eths/sum(n_eths) * n_eths / sum(n_eths)) %>%
dplyr::mutate(avg_eths_rep = sum(pct_eths)) %>%
summarize(avg_eths_rep = mean(avg_eths_rep)) %>%
summarize(avg_eths_rep = mean(avg_eths_rep))
scores$ethnicity_score <- (ethnicity_eths$avg_eths_rep*1000)
#################
#    Scoring    #
#################
placed <- team_placements_df %>%
filter(is.na(team_placements_df$Manual.Placement)) %>%
group_by(placement) %>%
summarise(HS_Grads = sum(Ed_HS),
SomeCol = sum(Ed_SomeCol),
Tutoring = sum(HasTutored),
Spanish = sum(SpanishAble),
OtherLang = sum(Lang_Other),
MathAble = sum(Math.Confidence),
Gender = sum(Male) + sum(Other.Gender)) %>%
left_join(., school_targets, by=c("placement" = "sch_id"))
scores$Edscore <- hs_loss(placed$HSGrad_tgt, placed$HS_Grads) + sum((placed$SomeCol_tgt - placed$SomeCol)^2)
scores$Tutoring <- sum((placed$TutExp - placed$Tutoring)^2)
scores$Spanish <- (reqd_spanish_loss(placed$SpanishNeed, placed$Spanish, min_reqd = 1) + sum((placed$OtherLang_tgt - placed$OtherLang)^2))
scores$Math <- sum((placed$Math_tgt - placed$MathAble)^2)
scores$Gender <- sum((placed$Male_tgt - placed$Gender)^2)
#################
# OVERALL SCORE #
#################
scores$aggr_score <- sum(unlist(scores))
return(scores)
}
calculate_score(team_placements_df, school_targets)
library(doSNOW)
library(foreach)
library(gridExtra)
cl <- makeCluster(4)
registerDoSNOW(cl)
Runs <- foreach(i=1:16) %dopar% {
library(dplyr)
library(tidyr)
#print(system.time(placement(acm_enc, school_targets, 25000)))
placement(acm_enc, school_targets, 2000, center_scale=runif(1, 1e-3, 0.25), width_scale=runif(1, 1e-3, 0.25))
}
stopCluster(cl)
for (i in 1:8){
ax <- traceplot(Runs[[i]]$trace)
bx <- tempplot(Runs[[i]]$trace)
plot(grid.arrange(ax, bx, ncol=2))
print(Runs[[i]]$best_score)
}
#View(Runs[[1]]$best_placements)
library(doSNOW)
library(foreach)
library(gridExtra)
cl <- makeCluster(4)
registerDoSNOW(cl)
Runs <- foreach(i=1:16) %dopar% {
library(dplyr)
library(tidyr)
#print(system.time(placement(acm_enc, school_targets, 25000)))
placement(acm_enc, school_targets, 25000, center_scale=runif(1, 1e-3, 0.25), width_scale=runif(1, 1e-3, 0.25))
}
stopCluster(cl)
for (i in 1:8){
ax <- traceplot(Runs[[i]]$trace)
bx <- tempplot(Runs[[i]]$trace)
plot(grid.arrange(ax, bx, ncol=2))
print(Runs[[i]]$best_score)
}
#View(Runs[[1]]$best_placements)
traceplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = score)) +
geom_point() +
coord_cartesian(ylim = c(0, 1e5))
}
tempplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter)) +
geom_point(aes(y=ratio)) +
geom_line(aes(y=temp)) +
coord_cartesian(ylim = c(0, 1e5))
}
traceplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = score)) +
geom_point() +
coord_cartesian(ylim = c(0, 1e5))
}
for (i in 1:16){
ax <- traceplot(Runs[[i]]$trace)
bx <- tempplot(Runs[[i]]$trace)
plot(grid.arrange(ax, bx, ncol=2))
print(Runs[[i]]$best_score)
}
traceplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = score)) +
geom_point() +
coord_cartesian(ylim = c(0, 1e4))
}
tempplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter)) +
geom_point(aes(y=ratio)) +
geom_line(aes(y=temp)) +
coord_cartesian(ylim = c(0, 1e4))
}
for (i in 1:16){
ax <- traceplot(Runs[[i]]$trace)
bx <- tempplot(Runs[[i]]$trace)
plot(grid.arrange(ax, bx, ncol=2))
print(Runs[[i]]$best_score)
}
traceplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = score)) +
geom_point() +
coord_cartesian(ylim = c(0, 2800))
}
tempplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter)) +
geom_point(aes(y=ratio)) +
geom_line(aes(y=temp)) +
coord_cartesian(ylim = c(0, 2800))
}
for (i in 1:16){
ax <- traceplot(Runs[[i]]$trace)
bx <- tempplot(Runs[[i]]$trace)
plot(grid.arrange(ax, bx, ncol=2))
print(Runs[[i]]$best_score)
}
bestPlacement <- Runs[[1]]$best_placements
View(bestPlacement)
bestPlacement <- Runs[[1]]
bestPlacement$diff_scores
validate_placement <- bestPlacement$best_placements %>%
group_by(placement) %>%
summarise(HS_Grads = sum(Ed_HS),
SomeCol = sum(Ed_SomeCol),
Tutoring = sum(HasTutored),
Spanish = sum(SpanishAble),
OtherLang = sum(Lang_Other),
MathAble = sum(Math.Confidence),
Gender = sum(Male) + sum(Other.Gender)
Hispanic/Latino = sum(Race.Ethnicity.Hispanic),
validate_placement <- bestPlacement$best_placements %>%
group_by(placement) %>%
summarise(HS_Grads = sum(Ed_HS),
SomeCol = sum(Ed_SomeCol),
Tutoring = sum(HasTutored),
Spanish = sum(SpanishAble),
OtherLang = sum(Lang_Other),
MathAble = sum(Math.Confidence),
Gender = sum(Male) + sum(Other.Gender),
Hispanic/Latino = sum(Race.Ethnicity.Hispanic),
validate_placement <- bestPlacement$best_placements %>%
group_by(School) %>%
summarise(HS_Grads = sum(Ed_HS),
SomeCol = sum(Ed_SomeCol),
Tutoring = sum(HasTutored),
Spanish = sum(SpanishAble),
OtherLang = sum(Lang_Other),
MathAble = sum(Math.Confidence),
Gender = sum(Male) + sum(Other.Gender),
Hispanic/Latino = sum(Race.Ethnicity.Hispanic),
validate_placement <- bestPlacement$best_placements %>%
group_by(School) %>%
summarise(HS_Grads = sum(Ed_HS),
SomeCol = sum(Ed_SomeCol),
Tutoring = sum(HasTutored),
Spanish = sum(SpanishAble),
OtherLang = sum(Lang_Other),
MathAble = sum(Math.Confidence),
Gender = sum(Male) + sum(Other.Gender),
Hispanic = sum(Race.Ethnicity.Hispanic),
Asian = sum(Race.Ethnicity.Asian),
White = sum(Race.Ethnicity.White),
Black = sum(Race.Ethnicity.Black))
View(validate_placement)
validate_placement <- bestPlacement$best_placements %>%
group_by(School) %>%
summarise(HS_Grads = sum(Ed_HS),
SomeCol = sum(Ed_SomeCol),
Tutoring = sum(HasTutored),
Spanish = sum(SpanishAble),
OtherLang = sum(Lang_Other),
MathAble = sum(Math.Confidence),
Males = sum(Male),
Gender.Other = sum(Other.Gender),
Hispanic.Latino = sum(Race.Ethnicity.Hispanic),
Asian.PI = sum(Race.Ethnicity.Asian),
White = sum(Race.Ethnicity.White),
Black = sum(Race.Ethnicity.Black))
View(team_placements_df)
bestPlacement$diff_scores
sum(bestPlacement$best_placements$Males)
sum(bestPlacement$best_placements$Male)
write.table(validate_placement, file = 'bestPlacement')
write.table(validate_placement, file = 'bestPlacement.csv')
write.table(validate_placement, file = 'bestPlacement.csv', sep = ",")
write.csv(bestPlacement$best_placements, file = "acm_Placements.csv")
reqd_males <- function(targets, actuals, min_reqd = 1){
loss <- ifelse(actuals < min_reqd, 1e10, (targets - actuals)^2)
sum(loss)
}
calculate_score = function(team_placements_df, school_targets, gender_target=gender_g) {
# Merge  with school_df to pull in school characteristics
team_placements_df <- team_placements_df %>%
left_join(., school_targets, by=c("placement" = "sch_id")) %>%
filter(acm_id < 9000)
# Store each score in a list
scores = list()
#################
# COMMUTE SCORE #
#################
# This score is simply the sum number of seconds each ACM travels to their assigned school
commutes = team_placements_df %>%
mutate(acm_dest_id = paste(acm_id, "-", placement)) %>%
left_join(., acm_commutes, by="acm_dest_id") %>%
replace_na(replace = list("dist" = 0))
# Take the sqrt to scale the value closer to the other features
scores$commute_score <- mean(commutes$dist)
#############
# AGE SCORE #
#############
# This score is the difference between the [overall age variance across the corps] and [overall average of each team's average age variance]
age_var <- team_placements_df %>%
group_by(placement) %>%
summarize(age_var = var(days_old)) %>%
filter(!is.na(age_var)) %>%
ungroup() %>%
summarize(avg_age_var = mean(age_var))
scores$age_score <- sqrt(abs(age_var$avg_age_var - var(team_placements_df$days_old)))
###################
# ETHNICITY SCORE #
###################
# This score is the overall average of each team's average % representation that each teammate experiences. For example, 0.44 means that for the average team, the average teammate experiences that his/her personal ethnicity is represented in 44% of the team.
ethnicity_eths <-
team_placements_df %>%
group_by(placement,
Race.Ethnicity.Black,
Race.Ethnicity.White,
Race.Ethnicity.Asian,
Race.Ethnicity.Hispanic) %>%
dplyr::summarize(n_eths = n()) %>%
group_by(placement) %>%
dplyr::mutate(pct_eths = n_eths/sum(n_eths) * n_eths / sum(n_eths)) %>%
dplyr::mutate(avg_eths_rep = sum(pct_eths)) %>%
summarize(avg_eths_rep = mean(avg_eths_rep)) %>%
summarize(avg_eths_rep = mean(avg_eths_rep))
scores$ethnicity_score <- (ethnicity_eths$avg_eths_rep*1000)
#################
#    Scoring    #
#################
placed <- team_placements_df %>%
filter(is.na(team_placements_df$Manual.Placement)) %>%
group_by(placement) %>%
summarise(HS_Grads = sum(Ed_HS),
SomeCol = sum(Ed_SomeCol),
Tutoring = sum(HasTutored),
Spanish = sum(SpanishAble),
OtherLang = sum(Lang_Other),
MathAble = sum(Math.Confidence),
Males = sum(Male)) %>%
left_join(., school_targets, by=c("placement" = "sch_id"))
scores$Edscore <- hs_loss(placed$HSGrad_tgt, placed$HS_Grads) + sum((placed$SomeCol_tgt - placed$SomeCol)^2)
scores$Tutoring <- sum((placed$TutExp - placed$Tutoring)^2)
scores$Spanish <- (reqd_spanish_loss(placed$SpanishNeed, placed$Spanish, min_reqd = 1) + sum((placed$OtherLang_tgt - placed$OtherLang)^2))
scores$Math <- sum((placed$Math_tgt - placed$MathAble)^2)
scores$Gender <- reqd_males(placed$Male_tgt, placed$Males, 1)
#################
# OVERALL SCORE #
#################
scores$aggr_score <- sum(unlist(scores))
return(scores)
}
calculate_score(team_placements_df, school_targets)
library(doSNOW)
library(foreach)
library(gridExtra)
cl <- makeCluster(4)
registerDoSNOW(cl)
Runs <- foreach(i=1:8) %dopar% {
library(dplyr)
library(tidyr)
#print(system.time(placement(acm_enc, school_targets, 25000)))
placement(acm_enc, school_targets, 2000, center_scale=runif(1, 1e-3, 0.15), width_scale=runif(1, 1e-3, 0.2))
}
stopCluster(cl)
for (i in 1:16){
ax <- traceplot(Runs[[i]]$trace)
bx <- tempplot(Runs[[i]]$trace)
plot(grid.arrange(ax, bx, ncol=2))
print(Runs[[i]]$best_score)
}
