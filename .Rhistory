# Finally, combine our original input 'acm_df' with our new data frame of commute times 'acm_commutes', and overwrite our original acm_df with this newly combined data frame.
acm_df <- merge(acm_df, acm_commutes, by = "id", all = TRUE)
acm_commutes
acm_commutes_df
acm_commutes_df <- acm_df[ , grepl( "Time.to." , names( acm_df ) ) ]
acm_commutes_df
acm_commutes_df[1]
acm_df <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes_df <- acm_df[ , grepl( "Time.to." , names( acm_df ) ) ]
acm_commutes <- data.frame()
for (acm_id in acm_df){
acm_row <- subset(acm_df, id == acm_id)
Actual.Commute.Time <- acm_commutes_df[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time)
}
acm_commutes
acm_df <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes_df <- acm_df[ , grepl( "Time.to." , names( acm_df ) ) ]
acm_commutes <- data.frame()
for (acm_id in acm_df$id){
acm_row <- subset(acm_df, id == acm_id)
Actual.Commute.Time <- acm_commutes_df[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time)
}
acm_row
acm_commutes_df[acm_row$Team.Placement]
acm_row <- subset(acm_df, id == 1)
acm_commutes_df[acm_row$Team.Placement]
acm_row$Team.Placement
acm_commutes_df[1]
acm_row$Team.Placement
acm_df <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame()
for (x in acm_df$id){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time)
}
acm_commutes
acm_commute
Actual.Commute.Time
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# Add an index column for schools
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
acm_df <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# Add an index column for schools
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
acm_df <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame()
for (x in acm_df$id){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time)
}
acm_row <- subset(acm_df, id == 1)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time)
acm_commutes
acm_row
acm_commute
acm_commute[acm_row$Team.Placement]
Actual.Commute.Time
Actual.Commute.Time[1,1]
acm_commutes <- data.frame()
acm_row <- subset(acm_df, id == 1)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
acm_commutes
acm_df <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame()
for (x in acm_df$id){
acm_row <- subset(acm_df, id == 1)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
acm_commutes
acm_df <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame()
for (x in acm_df$id){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
acm_df <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame()
for (x in 1:50){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
acm_commutes
acm_df <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame(Ints=integer())
for (x in 1:50){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
acm_commutes
acm_df <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame(Ints=integer())
for (x in acm_df$id){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
acm_commutes
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
acm_df <- acm_df[-nrow(acm_df),]
school_df <- read_excel(path = "Input 2 - School Data.xls")
# Add an index column for schools
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
View(school_df)
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# For some reason there is an empty row at the end of acm_df, so it's removed here:
acm_df <- acm_df[-nrow(acm_df),]
# Add an index column for schools and acm's
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
acm_df <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame(Ints=integer())
for (x in acm_df$id){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
acm_df <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame(Ints=integer())
for (x in acm_df$id){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
acm_commutes
Actual.Commute.Time
acm_df <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame(Ints=integer())
for (x in acm_df$id){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# For some reason there is an empty row at the end of acm_df, so it's removed here:
acm_df <- acm_df[-nrow(acm_df),]
# Add an index column for schools and acm's
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
acm_df <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame(Ints=integer())
for (x in acm_df$id){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
for (x in acm_df$id){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
for (x in acm_df$id){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
acm_commute
acm_row$Team.Placement
acm_row
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# For some reason there is an empty row at the end of acm_df, so it's removed here:
acm_df <- acm_df[-nrow(acm_df),]
# Add an index column for schools and acm's
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
# Assumption: the number of ACM's in acm_data is exactly the same as the number of team slots
# first create an empty list
team_placements = list()
# use a for-loop to read each team size
for (x in 1:nrow(school_df)){
team_slots = list(
# create a list that repeats the school 'id' for each team member slot
rep(x,
subset(school_df$`Team Size`, school_df$`id` == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- unlist(team_placements)
team_placements_df <- data.frame(id = 1:length(team_placements), Team.Placement = team_placements)
acm_df <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame(Ints=integer())
for (x in acm_df$id){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
acm_commutes
sum(acm_commutes[1])
calculate_score = function(acm_df) {
acm_commutes <- data.frame(Ints=integer())
for (x in acm_df$id){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
sum(acm_commutes[1])
}
calculate_score
calculate_score(acm_df)
run_intermediate_annealing_process = function(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
n_acms = nrow(acm_df$id)
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
candidate_placements = team_placements
swap = sample(n_acms, 2)
candidate_placements[swap[1]:swap[2]] = rev(candidate_placements[swap[1]:swap[2]])
candidate_score = calculate_score(candidate_placements)
if (temp > 0) {
ratio = exp((placement_score - candidate_score) / temp)
} else {
ratio = as.numeric(candidate_score < placement_score)
}
if (runif(1) < ratio) {
team_placements = candidate_placements
placement_score = candidate_score
if (placement_score < best_score) {
best_placements = team_placements
best_score = placement_score
}
}
}
return(list(team_placements=team_placements, placement_score=placement_score, best_placements=best_placements, best_score=best_score))
}
calculate_score = function(acm_df, team_placements) {
team_placements_df <- data.frame(id = 1:length(team_placements), Team.Placement = team_placements)
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame(Ints=integer())
for (x in acm_df_with_placements$id){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
sum(acm_commutes[1])
}
calculate_score(acm_df, team_placements)
run_intermediate_annealing_process = function(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
n_acms = nrow(acm_df$id)
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
candidate_placements = team_placements
swap = sample(n_acms, 2)
candidate_placements[swap[1]:swap[2]] = rev(candidate_placements[swap[1]:swap[2]])
candidate_score = calculate_score(candidate_placements)
if (temp > 0) {
ratio = exp((placement_score - candidate_score) / temp)
} else {
ratio = as.numeric(candidate_score < placement_score)
}
if (runif(1) < ratio) {
team_placements = candidate_placements
placement_score = candidate_score
if (placement_score < best_score) {
best_placements = team_placements
best_score = placement_score
}
}
}
return(list(team_placements=team_placements, placement_score=placement_score, best_placements=best_placements, best_score=best_score))
}
current_temperature = function(iter, s_curve_amplitude, s_curve_center, s_curve_width) {
s_curve_amplitude * s_curve(iter, s_curve_center, s_curve_width)
}
s_curve = function(x, center, width) {
1 / (1 + exp((x - center) / width))
}
run_intermediate_annealing_process = function(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration, number_of_iterations = 50, s_curve_amplitude, s_curve_center, s_curve_width)
run_intermediate_annealing_process = function(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
n_acms = nrow(acm_df$id)
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
candidate_placements = team_placements
swap = sample(n_acms, 2)
candidate_placements[swap[1]:swap[2]] = rev(candidate_placements[swap[1]:swap[2]])
candidate_score = calculate_score(candidate_placements)
if (temp > 0) {
ratio = exp((placement_score - candidate_score) / temp)
} else {
ratio = as.numeric(candidate_score < placement_score)
}
if (runif(1) < ratio) {
team_placements = candidate_placements
placement_score = candidate_score
if (placement_score < best_score) {
best_placements = team_placements
best_score = placement_score
}
}
}
return(list(team_placements=team_placements, placement_score=placement_score, best_placements=best_placements, best_score=best_score))
}
run_intermediate_annealing_process(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration, number_of_iterations = 50, s_curve_amplitude, s_curve_center, s_curve_width)
run_intermediate_annealing_process(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration, number_of_iterations = 50, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
run_intermediate_annealing_process(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration = 1, number_of_iterations = 50, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
# Assumption: the number of ACM's in acm_data is exactly the same as the number of team slots
# first create an empty list
team_placements = list()
# use a for-loop to read each team size
for (x in 1:nrow(school_df)){
team_slots = list(
# create a list that repeats the school 'id' for each team member slot
rep(x,
subset(school_df$`Team Size`, school_df$`id` == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- unlist(team_placements)
team_placements[12]
calculate_score = function(acm_df, team_placements) {
team_placements_df <- data.frame(id = 1:length(team_placements), Team.Placement = team_placements)
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all = TRUE)
acm_commutes <- data.frame(Ints=integer())
for (x in acm_df_with_placements$id){
acm_row <- subset(acm_df, id == x)
acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
sum(acm_commutes[1])
}
candidate_placements = team_placements
swap = sample(n_acms, 2)
candidate_placements[swap[1]:swap[2]] = rev(candidate_placements[swap[1]:swap[2]])
candidate_placements = team_placements
swap = sample(n_acms, 2)
n_acms = nrow(acm_df$id)
candidate_placements = team_placements
swap = sample(n_acms, 2)
n_acms = nrow(acm_df$id)
candidate_placements = team_placements
swap = sample(n_acms, 2)
n_acms
nrow(acm_df$id)
nrows(acm_df$id)
nrow(acm_df)
n_acms = nrow(acm_df)
candidate_placements = team_placements
swap = sample(n_acms, 2)
candidate_placements[swap[1]:swap[2]] = rev(candidate_placements[swap[1]:swap[2]])
candidate_placements
n_acms = nrow(acm_df)
candidate_placements = team_placements
swap = sample(n_acms, 2)
candidate_placements[swap[1]:swap[2]] = rev(candidate_placements[swap[1]:swap[2]])
candidate_placements
run_intermediate_annealing_process = function(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
n_acms = nrow(acm_df)
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
candidate_placements = team_placements
swap = sample(n_acms, 2)
candidate_placements[swap[1]:swap[2]] = rev(candidate_placements[swap[1]:swap[2]])
candidate_score = calculate_score(candidate_placements)
if (temp > 0) {
ratio = exp((placement_score - candidate_score) / temp)
} else {
ratio = as.numeric(candidate_score < placement_score)
}
if (runif(1) < ratio) {
team_placements = candidate_placements
placement_score = candidate_score
if (placement_score < best_score) {
best_placements = team_placements
best_score = placement_score
}
}
}
return(list(team_placements=team_placements, placement_score=placement_score, best_placements=best_placements, best_score=best_score))
}
run_intermediate_annealing_process(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration = 1, number_of_iterations = 50, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
# Assumption: the number of ACM's in acm_data is exactly the same as the number of team slots
# first create an empty list
team_placements = list()
# use a for-loop to read each team size
for (x in 1:nrow(school_df)){
team_slots = list(
# create a list that repeats the school 'id' for each team member slot
rep(x,
subset(school_df$`Team Size`, school_df$`id` == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- unlist(team_placements)
run_intermediate_annealing_process(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration = 1, number_of_iterations = 50, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
run_intermediate_annealing_process = function(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
n_acms = nrow(acm_df)
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
candidate_placements = team_placements
swap = sample(n_acms, 2)
candidate_placements[swap[1]:swap[2]] = rev(candidate_placements[swap[1]:swap[2]])
candidate_score = calculate_score(acm_df, candidate_placements)
if (temp > 0) {
ratio = exp((placement_score - candidate_score) / temp)
} else {
ratio = as.numeric(candidate_score < placement_score)
}
if (runif(1) < ratio) {
team_placements = candidate_placements
placement_score = candidate_score
if (placement_score < best_score) {
best_placements = team_placements
best_score = placement_score
}
}
}
return(list(team_placements=team_placements, placement_score=placement_score, best_placements=best_placements, best_score=best_score))
}
run_intermediate_annealing_process(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration = 1, number_of_iterations = 50, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
calculate_score(acm_df, team_placements)
run_intermediate_annealing_process = function(acm_df, team_placements, placement_score = 445109, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
n_acms = nrow(acm_df)
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
candidate_placements = team_placements
swap = sample(n_acms, 2)
candidate_placements[swap[1]:swap[2]] = rev(candidate_placements[swap[1]:swap[2]])
candidate_score = calculate_score(acm_df, candidate_placements)
if (temp > 0) {
ratio = exp((placement_score - candidate_score) / temp)
} else {
ratio = as.numeric(candidate_score < placement_score)
}
if (runif(1) < ratio) {
team_placements = candidate_placements
placement_score = candidate_score
if (placement_score < best_score) {
best_placements = team_placements
best_score = placement_score
}
}
}
return(list(team_placements=team_placements, placement_score=placement_score, best_placements=best_placements, best_score=best_score))
}
run_intermediate_annealing_process(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration = 1, number_of_iterations = 50, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
run_intermediate_annealing_process = function(acm_df, team_placements, placement_score, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
n_acms = nrow(acm_df)
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
candidate_placements = team_placements
swap = sample(n_acms, 2)
candidate_placements[swap[1]:swap[2]] = rev(candidate_placements[swap[1]:swap[2]])
candidate_score = calculate_score(acm_df, candidate_placements)
if (temp > 0) {
ratio = exp((placement_score - candidate_score) / temp)
} else {
ratio = as.numeric(candidate_score < placement_score)
}
if (runif(1) < ratio) {
team_placements = candidate_placements
placement_score = candidate_score
if (placement_score < best_score) {
best_placements = team_placements
best_score = placement_score
}
}
}
return(list(team_placements=team_placements, placement_score=placement_score, best_placements=best_placements, best_score=best_score))
}
run_intermediate_annealing_process(acm_df, team_placements, placement_score = 445109, best_placements, best_score, starting_iteration = 1, number_of_iterations = 50, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
run_intermediate_annealing_process(acm_df, team_placements, placement_score = 445109, best_placements, starting_iteration = 1, number_of_iterations = 50, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
run_intermediate_annealing_process(acm_df, team_placements, placement_score = 445109, best_placements, best_score = 445109, starting_iteration = 1, number_of_iterations = 50, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
run_intermediate_annealing_process(acm_df, team_placements, placement_score = 445109, best_placements = team_placements, best_score = 445109, starting_iteration = 1, number_of_iterations = 50, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
team_placements
best_score
run_intermediate_annealing_process(acm_df, team_placements, placement_score = 445109, best_placements = team_placements, best_score = 445109, starting_iteration = 1, number_of_iterations = 50, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
