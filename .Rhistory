team_placements_df$dest = colnames(acm_commutes)[team_placements_df$placement + 1]
team_placements_df <- within(team_placements_df, id_dest <- paste(acm_id, dest, sep = "_"))
dt_commutes <- data.table(acm_commutes_long)
commute_score <- dt_commutes[id_dest %in% team_placements_df$id_dest,  sum(dist)]
################
# GENDER SCORE #
################
# This score measures the average of differences between each gender's percent occurance across the corps and its occurance on each team
# Create data.frame with each potential combination of gender and school, based on the survey responses provided
gender_frame <-
expand.grid(placement = 1:26, Gender = levels(acm_df$Gender))
# Note--need to replace sch_id with the appropriate school id values based off of the data
# Create tibbl containing percentage representation of each gender category across the entire corps
gender_g <- group_by(acm_df, Gender) %>% summarize(pct_g = n()/nrow(acm_df))
# Merge previous two frames by "gender"
gender_frame_g <-
merge(x = gender_frame,
y = gender_g,
by = "Gender",
all.x = TRUE)
# Represent percentage of each gender category within each team
gender_gs <-
team_placements_df %>%
group_by(placement, Gender) %>%
dplyr::summarize(n_gs = n()) %>%
group_by(placement) %>%
dplyr::mutate(pct_gs = n_gs/sum(n_gs))
# Calculate absolute value of difference between gender percentages at each team and across the corps
gender_frame_gs <-
merge(x = gender_frame_g,
y = gender_gs,
by = c("placement", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
}) %>%
summarise(mean_gend_diff = mean(abs_diff_gs))
gender_score <- gender_frame_gs$mean_gend_diff * 100000
#############
# AGE SCORE #
#############
# This score is the difference between the [overall age variance across the corps] and [overall average of each team's average age variance]
team_placements_df$days_old <- as.integer(Sys.Date() - as.Date(as.character(team_placements_df$Birth.Date), format="%Y-%m-%d"))
age_var <-
group_by(team_placements_df, placement) %>%
summarize(age_var = var(days_old)) %>%
ungroup() %>%
summarize(avg_age_var = mean(age_var))
age_score <- abs(age_var$avg_age_var - var(team_placements_df$days_old)) * 100
#################
# OVERALL SCORE #
#################
aggr_score <- commute_score + gender_score + age_score
return(list(aggr_score=aggr_score, commute_score=commute_score, gender_score=gender_score, age_score=age_score))
}
calculate_score = function(team_placements_df) {
#################
# COMMUTE SCORE #
#################
# This score is simply the sum number of seconds each ACM travels to their assigned school
team_placements_df$dest = colnames(acm_commutes)[team_placements_df$placement + 1]
team_placements_df <- within(team_placements_df, id_dest <- paste(acm_id, dest, sep = "_"))
dt_commutes <- data.table(acm_commutes_long)
commute_score <- dt_commutes[id_dest %in% team_placements_df$id_dest,  sum(dist)]
################
# GENDER SCORE #
################
# This score measures the average of differences between each gender's percent occurance across the corps and its occurance on each team
# Create data.frame with each potential combination of gender and school, based on the survey responses provided
gender_frame <-
expand.grid(placement = 1:26, Gender = levels(acm_df$Gender))
# Note--need to replace sch_id with the appropriate school id values based off of the data
# Create tibbl containing percentage representation of each gender category across the entire corps
gender_g <- group_by(acm_df, Gender) %>% summarize(pct_g = n()/nrow(acm_df))
# Merge previous two frames by "gender"
gender_frame_g <-
merge(x = gender_frame,
y = gender_g,
by = "Gender",
all.x = TRUE)
# Represent percentage of each gender category within each team
gender_gs <-
team_placements_df %>%
group_by(placement, Gender) %>%
dplyr::summarize(n_gs = n()) %>%
group_by(placement) %>%
dplyr::mutate(pct_gs = n_gs/sum(n_gs))
# Calculate absolute value of difference between gender percentages at each team and across the corps
gender_frame_gs <-
merge(x = gender_frame_g,
y = gender_gs,
by = c("placement", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
}) %>%
summarise(mean_gend_diff = mean(abs_diff_gs))
gender_score <- gender_frame_gs$mean_gend_diff * 1000000
#############
# AGE SCORE #
#############
# This score is the difference between the [overall age variance across the corps] and [overall average of each team's average age variance]
team_placements_df$days_old <- as.integer(Sys.Date() - as.Date(as.character(team_placements_df$Birth.Date), format="%Y-%m-%d"))
age_var <-
group_by(team_placements_df, placement) %>%
summarize(age_var = var(days_old)) %>%
ungroup() %>%
summarize(avg_age_var = mean(age_var))
age_score <- abs(age_var$avg_age_var - var(team_placements_df$days_old)) * 100
#################
# OVERALL SCORE #
#################
aggr_score <- commute_score + gender_score + age_score
return(list(aggr_score=aggr_score, commute_score=commute_score, gender_score=gender_score, age_score=age_score))
}
## Useful: system.time({ <<code to time>> })
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = 445109, starting_iteration = 1, number_of_iterations = 100, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
calculate_score = function(team_placements_df) {
#################
# COMMUTE SCORE #
#################
# This score is simply the sum number of seconds each ACM travels to their assigned school
team_placements_df$dest = colnames(acm_commutes)[team_placements_df$placement + 1]
team_placements_df <- within(team_placements_df, id_dest <- paste(acm_id, dest, sep = "_"))
dt_commutes <- data.table(acm_commutes_long)
commute_score <- dt_commutes[id_dest %in% team_placements_df$id_dest,  sum(dist)]
################
# GENDER SCORE #
################
# This score measures the average of differences between each gender's percent occurance across the corps and its occurance on each team
# Create data.frame with each potential combination of gender and school, based on the survey responses provided
gender_frame <-
expand.grid(placement = 1:26, Gender = levels(acm_df$Gender))
# Note--need to replace sch_id with the appropriate school id values based off of the data
# Create tibbl containing percentage representation of each gender category across the entire corps
gender_g <- group_by(acm_df, Gender) %>% summarize(pct_g = n()/nrow(acm_df))
# Merge previous two frames by "gender"
gender_frame_g <-
merge(x = gender_frame,
y = gender_g,
by = "Gender",
all.x = TRUE)
# Represent percentage of each gender category within each team
gender_gs <-
team_placements_df %>%
group_by(placement, Gender) %>%
dplyr::summarize(n_gs = n()) %>%
group_by(placement) %>%
dplyr::mutate(pct_gs = n_gs/sum(n_gs))
# Calculate absolute value of difference between gender percentages at each team and across the corps
gender_frame_gs <-
merge(x = gender_frame_g,
y = gender_gs,
by = c("placement", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
}) %>%
summarise(mean_gend_diff = mean(abs_diff_gs))
gender_score <- gender_frame_gs$mean_gend_diff * 10000000 / 2
#############
# AGE SCORE #
#############
# This score is the difference between the [overall age variance across the corps] and [overall average of each team's average age variance]
team_placements_df$days_old <- as.integer(Sys.Date() - as.Date(as.character(team_placements_df$Birth.Date), format="%Y-%m-%d"))
age_var <-
group_by(team_placements_df, placement) %>%
summarize(age_var = var(days_old)) %>%
ungroup() %>%
summarize(avg_age_var = mean(age_var))
age_score <- abs(age_var$avg_age_var - var(team_placements_df$days_old)) * 100
#################
# OVERALL SCORE #
#################
aggr_score <- commute_score + gender_score + age_score
return(list(aggr_score=aggr_score, commute_score=commute_score, gender_score=gender_score, age_score=age_score))
}
## Useful: system.time({ <<code to time>> })
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = 445109, starting_iteration = 1, number_of_iterations = 100, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
## Useful: system.time({ <<code to time>> })
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = calculate_score(team_placements_df), starting_iteration = 1, number_of_iterations = 100, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
calculate_score(team_placements_df)
calculate_score(team_placements_df)$aggr_score
## Useful: system.time({ <<code to time>> })
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = calculate_score(team_placements_df)$aggr_score, starting_iteration = 1, number_of_iterations = 100, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
calculate_score(team_placements_df)$aggr_score
output
## Useful: system.time({ <<code to time>> })
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = calculate_score(team_placements_df)$aggr_score, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
calculate_score(team_placements_df)$aggr_score
## Useful: system.time({ <<code to time>> })
calculate_score(team_placements_df)$aggr_score
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = 1420788, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
initial_score = calculate_score(team_placements_df)$aggr_score
## Useful: system.time({ <<code to time>> })
initial_score = calculate_score(team_placements_df)$aggr_score
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = 2420788, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
initial_score
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 1420788, best_placements = team_placements_df, best_score, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 1420788, best_placements = team_placements_df, best_score = 1420788, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
run_intermediate_annealing_process = function(team_placements_df, best_placements, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
placement_score = calculate_score(team_placements_df)$aggr_score
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
# Create a copy of team_placements
candidate_placements_df = team_placements_df
# Choose 2 schools at random
schools_to_swap = sample(1:nrow(school_df), 2)
# Choose 1 ACM from each of those schools
swap1 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[1]], 1))
swap2 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[2]], 1))
# Swap the team assignment of those 2 ACMs
candidate_placements_df$placement = replace(candidate_placements_df$placement, c(swap1, swap2), candidate_placements_df$placement[c(swap2, swap1)])
# Place firm restrictions here
#IsValid(candidate_placements_df)
candidate_score = calculate_score(candidate_placements_df)
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
if (runif(1) < ratio) {
team_placements_df = candidate_placements_df
placement_score = candidate_score$aggr_score
if (placement_score < best_score) {
best_placements = team_placements_df
best_score = placement_score
}
}
}
best_placements <- best_placements[order(best_placements$placement),]
return(list(commute_score=candidate_score$commute_score,
avg_commute_mins=(candidate_score$commute_score / nrow(team_placements_df) / 60),
gender_score=candidate_score$gender_score,
age_score=candidate_score$age_score,
best_placements=best_placements,
best_score=best_score))
}
## Useful: system.time({ <<code to time>> })
initial_score = calculate_score(team_placements_df)$aggr_score
output <- run_intermediate_annealing_process(team_placements_df, best_placements = team_placements_df, best_score = 1420788, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
run_intermediate_annealing_process = function(team_placements_df, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
placement_score = calculate_score(team_placements_df)$aggr_score
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
# Create a copy of team_placements
candidate_placements_df = team_placements_df
# Choose 2 schools at random
schools_to_swap = sample(1:nrow(school_df), 2)
# Choose 1 ACM from each of those schools
swap1 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[1]], 1))
swap2 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[2]], 1))
# Swap the team assignment of those 2 ACMs
candidate_placements_df$placement = replace(candidate_placements_df$placement, c(swap1, swap2), candidate_placements_df$placement[c(swap2, swap1)])
# Place firm restrictions here
#IsValid(candidate_placements_df)
candidate_score = calculate_score(candidate_placements_df)
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
if (runif(1) < ratio) {
team_placements_df = candidate_placements_df
placement_score = candidate_score$aggr_score
if (placement_score < best_score) {
best_placements = team_placements_df
best_score = placement_score
}
}
}
best_placements <- best_placements[order(best_placements$placement),]
return(list(commute_score=candidate_score$commute_score,
avg_commute_mins=(candidate_score$commute_score / nrow(team_placements_df) / 60),
gender_score=candidate_score$gender_score,
age_score=candidate_score$age_score,
best_placements=best_placements,
best_score=best_score))
}
## Useful: system.time({ <<code to time>> })
initial_score = calculate_score(team_placements_df)$aggr_score
output <- run_intermediate_annealing_process(team_placements_df, best_placements = team_placements_df, best_score = 1420788, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
run_intermediate_annealing_process = function(starting_placements, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
team_placements_df <- starting_placements
placement_score = calculate_score(team_placements_df)$aggr_score
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
# Create a copy of team_placements
candidate_placements_df = team_placements_df
# Choose 2 schools at random
schools_to_swap = sample(1:nrow(school_df), 2)
# Choose 1 ACM from each of those schools
swap1 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[1]], 1))
swap2 = with(candidate_placements_df, sample(acm_id[candidate_placements_df$acm_id == schools_to_swap[2]], 1))
# Swap the team assignment of those 2 ACMs
candidate_placements_df$placement = replace(candidate_placements_df$placement, c(swap1, swap2), candidate_placements_df$placement[c(swap2, swap1)])
# Place firm restrictions here
#IsValid(candidate_placements_df)
candidate_score = calculate_score(candidate_placements_df)
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
if (runif(1) < ratio) {
team_placements_df = candidate_placements_df
placement_score = candidate_score$aggr_score
if (placement_score < best_score) {
best_placements = team_placements_df
best_score = placement_score
}
}
}
best_placements <- best_placements[order(best_placements$placement),]
return(list(commute_score=candidate_score$commute_score,
avg_commute_mins=(candidate_score$commute_score / nrow(team_placements_df) / 60),
gender_score=candidate_score$gender_score,
age_score=candidate_score$age_score,
best_placements=best_placements,
best_score=best_score))
}
## Useful: system.time({ <<code to time>> })
# initial score
calculate_score(team_placements_df)$aggr_score
output <- run_intermediate_annealing_process(starting_placements = team_placements_df, best_placements = team_placements_df, best_score = 1420788, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
output
knitr::opts_chunk$set(echo = TRUE)
library(gmapsdistance)
library(readxl)
#library("googleway")
library(dplyr)
library(tidyr)
library(data.table)
library(dummies)
# This function used for Birthdates
fake_dates <- function(N, st="1991/01/01", et="1996/12/31") {
st <- as.POSIXct(as.Date(st))
et <- as.POSIXct(as.Date(et))
dt <- as.numeric(difftime(et,st,unit="secs"))
ev <- runif(N, 0, dt)
rt <- st + ev
trunc(rt, units = "days")}
generate_fake_df <- function(num_rows, school_df, seed = 42){
set.seed(seed)
fake_df <- data.frame(
First.Name = rep('', num_rows),
Last.Name = rep('', num_rows),
Attnd.CY.School = sample( c('I did not attend a City Year school', school_df$`School Name`), num_rows, replace=TRUE, prob=c(0.95, rep(0.01, length(school_df$`School Name`)))),
Language.Other.English =  sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.2, 0.8) ),
Language.Ability = sample( c('Spanish',
'French',
'Arabic',
'Urdu',
'Nepali',
'Swahili',
'Chinese (Mandarin)',
'Chinese (Cantonese)',
'Polish',
'Other'),
num_rows, replace=TRUE, prob=c(0.15, 0.05, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02,  0.02, 0.02) ),
Tutoring.Experience = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.7, 0.3) ),
Tutoring.Experience.Months = sample(1:12, num_rows, replace = TRUE, prob = 12:1),
Tutoring.Experience.Grades = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, High School',
'Elementary School, Middle School, High School'),
num_rows, replace=TRUE, prob=c(0.15, 0.15, 0.15, 0.15, 0.15, 0.05, 0.1) ),
Teaching.Credential = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.1, 0.9) ),
Tutoring.Preference = sample( c('ELA',
'Math',
'Either/No Preference'), num_rows, replace=TRUE, prob=c(0.4, 0.4, 0.2) ),
Grade.Lvl.Preference = sample( c('Elementary School',
'Elementary School, Middle School',
'Middle School',
'Middle School, High School',
'High School',
'Elementary School, High School',
'Elementary School, Middle School, High School'), num_rows, replace=TRUE, prob=c(0.16, 0.16, 0.16, 0.16, 0.16, 0.01, 0.2) ),
Math.Confidence = sample( c('Pre-algebra or lower',
'Algebra I',
'Algebra II',
'Calculus or higher'), num_rows, replace=TRUE, prob=c(0.25, 0.25, 0.25, 0.25) ),
Travel.Method = sample( c('Driving',
'Public Transportation',
'Bicycling',
'Walking'), num_rows, replace=TRUE, prob=c(0.3, 0.6, 0.07, 0.03) ),
Gender = sample( c('Female',
'Male',
'Transgender Male',
'Transgender Female',
'Gender Nonconforming (GNC)'), num_rows, replace=TRUE, prob=c(0.5, 0.3, 0.05, 0.05, 0.1) ),
Birth.Date = fake_dates(num_rows),
Race.Ethnicity = sample( c('African American/Black',
'American Indian/Alaskan Native',
'Asian',
'Hispanic/Latino',
'Middle Eastern',
'Native Hawaiian or Pacific Islander',
'White/Caucasian',
'African American/Black, Hispanic/Latino',
'Hispanic/Latino, White/Caucasian',
'Middle Eastern, White/Caucasian',
'African American/Black, White/Caucasian'),
num_rows, replace=TRUE, prob=c(0.3, 0.03, 0.05, 0.13, 0.03, 0.03, 0.38, 0.05, 0.01, 0.01, 0.01) ),
Educational.Attainment = sample( c('High School/GED',
'Some College',
"Associate's Degree",
"Bachelor's Degree",
"Master's Desgree"),
num_rows,   replace=TRUE, prob=c(0.2, 0.2, 0.15, 0.4, 0.05) ),
Know.Living =  sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.5, 0.5) ),
Address.Line.1 = rep('', num_rows),
Address.Line.2 = rep('', num_rows),
City = rep('', num_rows),
State =  rep('', num_rows),
Postal.Code = rep('', num_rows),
Roomates = sample( c('Yes', 'No'), num_rows, replace=TRUE, prob=c(0.5, 0.5) ),
Roommate.Names = rep('none', num_rows)
)
# Fix conditional survey items so that a "No" answer will cause dependent items to be NA
fake_df$Language.Ability[fake_df$Language.Other.English == 'No'] <- NA
fake_df$Tutoring.Experience.Months[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Tutoring.Experience.Grades[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Teaching.Credential[fake_df$Tutoring.Experience == 'No'] <- NA
fake_df$Roommate.Names[fake_df$Roomates == 'No'] <- NA
acm_df <- read.csv(file = "Input 1 - ACM Data.csv")
acm_commutes <- read_excel(path = "Input 2 - ACM Commutes.xlsx")
school_df <- read_excel(path = "Input 3 - School Data.xls")
# Add id columns
acm_df$acm_id <- 1:nrow(acm_df)
acm_commutes$acm_id <- 1:nrow(acm_commutes)
school_df$sch_id <- 1:nrow(school_df)
# Commute times in long format will be easier to index and subset. This can be accomplished in the output of "gmapsdistance" function later.
acm_commutes_long <-
select(acm_commutes, -or) %>%
gather(dest, dist, -acm_id) %>%
mutate(id_dest = paste(acm_id, dest, sep = "_"))
knitr::opts_chunk$set(echo = TRUE)
library(gmapsdistance)
library(readxl)
#library("googleway")
library(dplyr)
library(tidyr)
library(data.table)
library(dummies)
acm_df$Manual.Placement
acm_df
acm_df <- read.csv(file = "Input 1 - ACM Data.csv")
acm_commutes <- read_excel(path = "Input 2 - ACM Commutes.xlsx")
school_df <- read_excel(path = "Input 3 - School Data.xls")
# Add id columns
acm_df$acm_id <- 1:nrow(acm_df)
acm_commutes$acm_id <- 1:nrow(acm_commutes)
school_df$sch_id <- 1:nrow(school_df)
# Commute times in long format will be easier to index and subset. This can be accomplished in the output of "gmapsdistance" function later.
acm_commutes_long <-
select(acm_commutes, -or) %>%
gather(dest, dist, -acm_id) %>%
mutate(id_dest = paste(acm_id, dest, sep = "_"))
acm_df
acm_df$Manual.Placement
school_df
for (x in acm_df$Manual.Placement){
return(x)
#acm_df$Manual.Placement_id = acm_df$Manual.Placement
}
for (x in acm_df$Manual.Placement){
x
#acm_df$Manual.Placement_id = acm_df$Manual.Placement
}
# acm_df$Manual.Placement_id = acm_df$Manual.Placement
# school_df[school_df$`School Name` == ]
for (x in acm_df$Manual.Placement){
return(x)
#acm_df$Manual.Placement_id = acm_df$Manual.Placement
}
for (x in acm_df$Manual.Placement){
paste(x)
#acm_df$Manual.Placement_id = acm_df$Manual.Placement
}
# acm_df$Manual.Placement_id = acm_df$Manual.Placement
# school_df[school_df$`School Name` == ]
for (x in acm_df$Manual.Placement){
acm_df$Manual.Placement_id = x
}
# acm_df$Manual.Placement_id = acm_df$Manual.Placement
# school_df[school_df$`School Name` == ]
for (x in acm_df$Manual.Placement){
acm_df$Manual.Placement_id = x
}
acm_df$Manual.Placement_id
# acm_df$Manual.Placement_id = acm_df$Manual.Placement
# school_df[school_df$`School Name` == ]
acm_df$Manual.Placement
