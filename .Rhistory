school1_frame <- candidate_placements_df[candidate_placements_df$placement == schools_to_swap[1], ]
school2_frame <- acms_no_Manual.Placement[acms_no_Manual.Placement$placement == schools_to_swap[2], ]
swap2 <- sample(school2_frame$acm_id[is.na(school2_frame$Roommate.Names)
| school2_frame$Roommate.Names %not in% school1_frame$Roommate.Names], 1)
} else if (prevent_roommates == "Yes"){
# leave schools_to_swap[1] and schools_to_swap[2] as-is, but still ensure acm chosen from schools_to_swap[2] does not have roommates on schools_to_swap[1]
school1_frame <- candidate_placements_df[candidate_placements_df$placement == schools_to_swap[1], ]
school2_frame <- acms_no_Manual.Placement[acms_no_Manual.Placement$placement == schools_to_swap[2], ]
swap2 <- sample(school2_frame$acm_id[is.na(school2_frame$Roommate.Names)
| school2_frame$Roommate.Names %not in% school1_frame$Roommate.Names], 1)
}
# Swap the team assignment of those 2 ACMs - NOTE this is done by index, and we use acm_id as index
candidate_placements_df$placement = replace(candidate_placements_df$placement, c(swap1, swap2), candidate_placements_df$placement[c(swap2, swap1)])
# Place firm restrictions here?
#IsValid(candidate_placements_df)
candidate_score = calculate_score(candidate_placements_df, school_df)
trace[i+1, 2] <- candidate_score$aggr_score
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
if (runif(1) < ratio) {
team_placements_df = candidate_placements_df
placement_score = candidate_score$aggr_score
all_scores = candidate_score
if (placement_score < best_score) {
best_placements = team_placements_df
best_score = placement_score
best_score_diff = all_scores
}
}
}
# Merge in School characteristics
best_placements <- merge(best_placements, school_df, by.x = "placement", by.y = "sch_id", all.x = TRUE)
best_placements <- best_placements[order(best_placements$placement),]
return(list(best_placements=best_placements,
best_score=best_score,
diff_scores=best_score_diff,
trace=trace))
}
# Visualize Error Over Time
traceplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = score)) +
geom_point() +
coord_cartesian(ylim = c(1e3, 1e4))
}
# Full Application
acm_enc <- encode_acm_df(acm_df)
number_of_iterations = 10
prevent_roommates = "Yes"
#root_dir = "C:\\Users\\perus\\OneDrive\\Documents\\GitHub\\ACM-School-Placement\\"
root_dir = "C:\\Users\\CLuedtke\\ACM-School-Placement\\"
library(readxl)
library(dplyr)
library(tidyr)
library(data.table)
library(dummies)
library(doSNOW)
acm_df <- dataset
acm_commutes <- read_excel(path = paste(root_dir, "Input 2 - ACM Commutes.xlsx", sep = ""))
school_df <- read_excel(path = paste(root_dir, "Input 3 - School Data.xls", sep = ""))
# Add id columns
acm_commutes$acm_id <- 1:nrow(acm_commutes)
school_df$sch_id <- 1:nrow(school_df)
# Commute times in long format will be easier to index and subset. This can be accomplished in the output of "gmapsdistance" function later.
acm_commutes_long <-
select(acm_commutes, -or) %>%
gather(dest, dist, -acm_id) %>%
mutate(id_dest = paste(acm_id, dest, sep = "_"))
# useful function we use later. could probably replace with some usage of any()
`%not in%` <- function (x, table) is.na(match(x, table, nomatch=NA_integer_))
#  Encode Variables & Clean Up Input Dataframes
#Before being able to calculate a score, we'll need to encode all of our variables numerically.  For categorical ## variables, we can create a dummy variable for all except one of the categories (this is because the last category can be inferred).
# This function takes the input acm_df and encodes the variables in a way that makes the mathematically tractable.
encode_acm_df <- function(df){
acm_enc <- select(acm_df, acm_id, Math.Confidence)
# Ed Attainment
acm_enc$Ed_HS <- as.numeric(grepl("High School/GED", df$Educational.Attainment))
acm_enc$Ed_SomeCol <- grepl("Some College", df$Educational.Attainment) + grepl("Associate's Degree", df$Educational.Attainment)
acm_enc$Ed_Col <- grepl("Bachelor's Degree", df$Educational.Attainment) + grepl("Master's Degree", df$Educational.Attainment)
# Tutoring Experience
acm_enc$HasTutored <- as.numeric(grepl("Yes", df$Tutoring.Experience))
browser()
# Language Ability
acm_enc$SpanishAble <- as.numeric(grepl("Spanish", df$Language.Ability))
acm_enc$Lang_Other <- ifelse(grepl("Spanish", df$Language.Ability) == F & grepl("Yes", df$Language.Ability), 1, 0)
# Gender
acm_enc$Male <- as.numeric(grepl("Male", df$Gender))
acm_enc$Other.Gender <- as.numeric(grepl("Other", df$Gender))
# Ethnicity
acm_enc$Race.Ethnicity.Hispanic <- as.numeric(grepl("Hispanic/Latino", df$Race.Ethnicity))
acm_enc$Race.Ethnicity.Asian <- as.numeric(grepl("Asian/Asian-American", df$Race.Ethnicity))
acm_enc$Race.Ethnicity.White <- as.numeric(grepl("Caucasian/White", df$Race.Ethnicity))
acm_enc$Race.Ethnicity.Black <- as.numeric(grepl("African-American/Black", df$Race.Ethnicity))
# Add in other features
acm_enc <- acm_enc %>%
left_join(., select(df,
acm_id,
Gender,
Manual.Placement,
Birth.Date,
Race.Ethnicity.African.American.Black:Race.Ethnicity.Other,
Roommate.Names),
by=c("acm_id" = "acm_id")) %>%
replace_na(list(Pref_HS = 0, Pref_MS = 0, Pref_ES = 0,
Lang_Other = 0)) %>%
mutate(days_old = as.integer(Sys.Date() - as.Date(as.character(df$Birth.Date), format="%m/%d/%Y"))) %>%
replace_na(list(Lang_Other = 0, days_old = 0))
# Return
acm_enc
}
# This function calculates some import counts which I'm going to use a lot when trying to figure out the expected number of ACMs per team per metric.  This function will just be used internally by the school_config function.
corps_demographic_targets <- function(school_df, acm_enc){
# Calculate some totals used later in the function
N <- nrow(acm_enc)
S <- nrow(school_df)
# Counts of schools by level
school_counts <- group_by(school_df, GradeLevel) %>% summarise(count=n())
# Approximation of densly spanish speaking schools
dense_hispanic <- nrow(school_df[school_df$`% Hispanic` > 10, ])
# We'll store our results in a list so we can return multiple tables
distros <- list()
# Produce ratio of folks who have completed at least an associates, and those who haven't
distros$education <- data.frame(level = c("HS", "SomeCol"), ratio = c(nrow(acm_enc[acm_enc$Ed_HS == 1,]) / N, nrow(acm_enc[acm_enc$Ed_SomeCol == 1,]) / N))
# Identify rates of Tutoring Experience
distros$tut_exp <- group_by(acm_enc, HasTutored) %>%
summarise(count=n()) %>%
mutate(ratio = count/N)
# Spanish and other spoken language distribution
distros$lang <- data.frame(ability = c("spanish","other"), ratio = c(nrow(acm_enc[acm_enc$SpanishAble == 1, ]) / N, nrow(acm_enc[acm_enc$Lang_Other == 1, ]) / N))
# Math Ability
distros$math <- nrow(acm_enc[acm_enc$Math.Confidence == 1,]) / N
# Gender
distros$gender <- nrow(acm_enc[(acm_enc$Male == 1) | (acm_enc$Other.Gender == 1), ]) / N
distros
}
# I derived this function mildly arbitrarily. The logic is that we probably want at least one spanish speaker at a school, but there are then diminishing returns.  It scales so that for a school that 100% hispanic, we would aim to have 2.6 spanish speakers on the team.  A team thats 80% hispanic will aim to have 4. The main problem with this approach is that we may create too many spots for spanish speakers, or have not have enough spanish speakers for the intended spots.
# Shifted down by 75% for LA, since everyone has over 80% Hispanic
spanishNeed <- function(x) {
1.5772*log(x) - 2.1205
}
# Directly calculates the expected number of ACMs per team for each of the markers.
# My methodology is to aim for a uniform distribution when it makes sense.
school_config <- function(school_df, acm_enc){
# Precalculate some helpful counts
corps_demos <- corps_demographic_targets(school_df, acm_enc)
# Unravel list into some variables.  Mostly so that the code is a little cleaner later.
education <- corps_demos$education
lang <- corps_demos$lang
tut_exp <- corps_demos$tut_exp
math <- corps_demos$math
gender <- corps_demos$gender
school.data <- select(school_df, `sch_id`, `School`, `Team Size`, `GradeLevel`, `% Hispanic`) %>%
rename(size = `Team Size`,
span = `GradeLevel`) %>%
mutate(HSGrad_tgt = ifelse(span=="High", 0, education[education$level %in% 'HS',]$ratio * as.numeric(size)),
SomeCol_tgt = education[education$level %in% 'SomeCol',]$ratio * as.numeric(size),
TutExp = as.numeric(size) * tut_exp[tut_exp$HasTutored == 1,]$ratio,
SpanishNeed = pmax(spanishNeed(`% Hispanic`), 1),# This sets a minimum of 1 spanish speaker per team.  This might make sense in LA, but not other places.
OtherLang_tgt = lang[lang$ability %in% 'other',]$ratio * as.numeric(size),
Math_tgt = ifelse(span=="Elementary", as.numeric(size)*.5*math, ifelse(span=="Middle", .75*as.numeric(size)*math, as.numeric(size)*math)),
Male_tgt = as.numeric(size)*gender)
}
# Initial Team Placements
# Assumption: the number of ACMs in acm_df is exactly the same as the number of team slots
initial_placement <- function(acm_enc, school_targets, prevent_roommates){
# First place acm's at schools designated by Manual.Placement column
# NOTE: Removed seed parameter.  Seed is used for reproducability, but we want randomness in the start.
# first create an empty list
team_placements = list()
## use a for-loop to read each team size
#for (x in 1:nrow(school_targets)){
#  team_slots = list(
#    # create a list that repeats each school 'id' for the size of each team
#    rep(x,
#        subset(school_targets$size, school_targets$sch_id == x)
#        )
#    )
#  team_placements <- c(team_placements, team_slots)
#}
#
#team_placements <- data.frame(placement=unlist(team_placements))
#######
#######
#######
acms_with_Manual.Placement <- acm_enc %>%
left_join(., select(school_targets, sch_id:School),
by=c("Manual.Placement" = "School")) %>%
filter(!is.na(sch_id))
filled_slot_counts <- acms_with_Manual.Placement %>%
group_by(sch_id) %>%
summarise(filled = n())
team_size_targets <- select(school_targets, sch_id:size) %>%
left_join(., filled_slot_counts, by=("sch_id")) %>%
replace_na(list(filled = 0)) %>%
mutate(unfilled_slots = as.numeric(size) - as.numeric(filled))
# use a for-loop to assign each survey respondent (who was not already manually placed) to a team
for (x in team_size_targets$sch_id){
team_slots = list(
# create a list that repeats each school 'id' for the size of each team
rep(x,
subset(team_size_targets$unfilled_slots, team_size_targets$sch_id == x)
)
)
team_placements <- c(team_placements, team_slots)
}
# non-random placements of CMs who were not manually placed
team_placements <- data.frame(placement=unlist(team_placements))
# Number of survey respondents who were just placed
slots <- nrow(team_placements)
# List of ACM ids of survey respondents who were not manually placed, plus dummy id's for team slots that were not filled by any survey respondent
if (slots + nrow(acms_with_Manual.Placement) == sum(team_size_targets$size)){
filled_acm_roster <- acm_enc[is.na(acm_enc$Manual.Placement), ]$acm_id
} else {
filled_acm_roster <- c(acm_enc[is.na(acm_enc$Manual.Placement), ]$acm_id,
9000:(9000 + slots - nrow(acm_enc[is.na(acm_enc$Manual.Placement), ]) - 1))
}
# Randomize Starting Place
team_placements_df <- data.frame(sch_id=team_placements[sample(nrow(team_placements), replace=F), ],
acm_id= filled_acm_roster) %>%
union(., select(acms_with_Manual.Placement, sch_id, acm_id)) %>%
rename(placement = sch_id)
#######
#######
#######
#team_placements_df <- data.frame(placement=team_placements[sample(nrow(team_placements), replace=F), ],
#                                 acm_id= 1:nrow(team_placements))
# Merge team_placements_df with acm_df on the 'id' column
team_placements_df <- left_join(team_placements_df, acm_enc, by = "acm_id") %>%
replace_na(replace = list(Math.Confidence = 0, Ed_HS = 0, Ed_SomeCol = 0, Ed_Col = 0,
HasTutored = 0, SpanishAble = 0, Lang_Other = 0, Male = 0,
Other.Gender =0, Race.Ethnicity.Hispanic = 0,
Race.Ethnicity.Asian = 0, Race.Ethnicity.White = 0,
Race.Ethnicity.Black = 0, days_old = 0))
# Honor Manual Placements
sch_id_names <- school_df[, c("sch_id", "School")]
colnames(sch_id_names) <- c("Manual.Placement_id", "School.Name")
team_placements_df <- merge(team_placements_df, sch_id_names, by.x = "Manual.Placement", by.y = "School.Name", all.x = TRUE)
# Re-sort by acm_id and reset the index
team_placements_df <- team_placements_df[order(team_placements_df$acm_id), ]
rownames(team_placements_df) <- 1:nrow(team_placements_df)
acm_ids_with_Manual.Placement <- team_placements_df$acm_id[!is.na(team_placements_df$Manual.Placement)]
for (x in acm_ids_with_Manual.Placement){
acms_no_Manual.Placement <- team_placements_df[is.na(team_placements_df$Manual.Placement), ]
swap1 <- x
x_placement <- team_placements_df$Manual.Placement_id[team_placements_df$acm_id == x]
# Choose 1 acm_id to swap with at the school we want to ensure manual placement is honored
# What if already assigned to that school?
eligible_acm_ids_for_swap <- acms_no_Manual.Placement$acm_id[acms_no_Manual.Placement$placement == x_placement]
acm_id_to_swap <- sample( eligible_acm_ids_for_swap, 1 )
swap2 <- acm_id_to_swap
# Swap the team placement of those 2 ACMs
team_placements_df$placement <- replace(team_placements_df$placement, c(swap1, swap2), team_placements_df$placement[c(swap2, swap1)])
}
# Prevent Roommates from being on the same team
if (prevent_roommates == "Yes"){
# Check each team for roommates
for (y in 1:nrow(school_targets)){
school_frame = team_placements_df[team_placements_df$placement == y, ]
# get list of duplicated roommate sets
dup_roommates <- unique(school_frame$Roommate.Names[!is.na(school_frame$Roommate.Names) & duplicated(school_frame$Roommate.Names)])
if (length(dup_roommates) > 0){
for (z in  dup_roommates){
roommate_set <- school_frame[which(school_frame$Roommate.Names == z), ]
roommate_set_no_manual <- roommate_set[is.na(roommate_set$Manual.Placement_id), ]
# manual placements will override preventing roommates
# if all roommates were NOT manually placed, choose 1 of the roommates to keep on the team
if (all(is.na(roommate_set$Manual.Placement_id))){
acm_to_keep <- sample(roommate_set$acm_id, 1)
} else {
acm_to_keep <- 0
}
# swap out all roommates who were not manually placed or who were 'acm_to_keep'
for (k in roommate_set_no_manual$acm_id[roommate_set_no_manual$acm_id != acm_to_keep]){
acms_no_Manual.Placement <- team_placements_df[is.na(team_placements_df$Manual.Placement), ]
swap1 <- k
# choose other school where no roommate conflict exists
schools_no_roommate <- unique(team_placements_df$placement[which(team_placements_df$Roommate.Names != z)])
school_to_swap <- sample(schools_no_roommate, 1)
acms_to_swap_frame <- acms_no_Manual.Placement[acms_no_Manual.Placement$placement == school_to_swap, ]
# choose 1 ACM who has no Manual.Placement, and whose roommates are not on the team we swap them to
#POWERBI
swap2 <- sample(acms_to_swap_frame$acm_id[(is.na(acms_to_swap_frame$Roommate.Names))
| (acms_to_swap_frame$Roommate.Names %not in% school_frame$Roommate.Names)], 1)
# Swap the team placement of those 2 ACMs
team_placements_df$placement <- replace(team_placements_df$placement, c(swap1, swap2), team_placements_df$placement[c(swap2, swap1)])
}
}
}
}
}
# We would like to ensure that high school students get placed in ES or MS
acms_for_swaps <- merge(team_placements_df[is.na(team_placements_df$Manual.Placement_id), ], school_targets, by.x = "placement", by.y = "sch_id", all.x = TRUE)
#print(acms_for_swaps)
hs_acms_to_swap <- acms_for_swaps[(acms_for_swaps$Ed_HS == 1) & (acms_for_swaps$span == "High"),]
acms_to_swap_with <- acms_for_swaps[(acms_for_swaps$Ed_HS == 0) & (acms_for_swaps$span != "High"),]
acms_to_swap_with <- acms_to_swap_with[sample(nrow(acms_to_swap_with), nrow(hs_acms_to_swap), replace=F), ]
team_placements_df[team_placements_df$acm_id %in% hs_acms_to_swap$acm_id, ]$placement <- acms_to_swap_with$placement
team_placements_df[team_placements_df$acm_id %in% acms_to_swap_with$acm_id, ]$placement <- hs_acms_to_swap$placement
return(team_placements_df)
}
# Calculate score
hs_loss <- function(targets, actuals){
loss <- ifelse(targets == 0, (targets - actuals) * -1e10, (targets - actuals)^2)
sum(loss)
}
calculate_score = function(team_placements_df, school_targets, gender_target=gender_g) {
# Merge  with school_df to pull in school characteristics
team_placements_df <- merge(team_placements_df, school_targets, by.x = "placement", by.y = "sch_id", all.x = TRUE)
# Store each score in a list
scores = list()
#################
# COMMUTE SCORE #
#################
# This score is simply the sum number of seconds each ACM travels to their assigned school
team_placements_df$dest = colnames(acm_commutes)[team_placements_df$placement + 1]
team_placements_df <- within(team_placements_df, id_dest <- paste(acm_id, dest, sep = "_"))
dt_commutes <- data.table(acm_commutes_long)
# Take the sqrt to scale the value closer to the other features
scores$commute_score <- sqrt(dt_commutes[id_dest %in% team_placements_df$id_dest,  sum(dist)])
################
# GENDER SCORE #
################
# This score measures the average of differences between each gender's percent occurrence across the corps and its percent occurrence on each team
# Create data.frame with each potential combination of gender and school, based on the survey responses provided
gender_frame <-
expand.grid(placement = 1:nrow(school_targets), Gender = levels(team_placements_df$Gender))
# Precalculate tibbl containing percentage representation of each gender category across the entire corps
# Can we move this to school targets?  Try to calculate static things once.
gender_g <- group_by(team_placements_df, Gender) %>% summarize(pct_g = n()/nrow(team_placements_df))
# Merge previous two frames by "gender"
gender_frame_g <-
merge(x = gender_frame,
y = gender_g,
by = "Gender",
all.x = TRUE)
# Represent percentage of each gender category within each team
gender_gs <-
team_placements_df %>%
group_by(placement, Gender) %>%
dplyr::summarize(n_gs = n()) %>%
group_by(placement) %>%
dplyr::mutate(pct_gs = n_gs/sum(n_gs))
# Calculate absolute value of difference between gender percentages at each team and across the corps
gender_frame_gs <-
merge(x = gender_frame_g,
y = gender_gs,
by = c("placement", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
}) %>%
summarise(mean_gend_diff = mean(abs_diff_gs))
scores$gender_score <- gender_frame_gs$mean_gend_diff * 5000
#############
# AGE SCORE #
#############
# This score is the difference between the [overall age variance across the corps] and [overall average of each team's average age variance]
# Moved computation of age for each acm to acm_enc so that we only do it once.
#team_placements_df$days_old <- as.integer(Sys.Date() - as.Date(as.character(team_placements_df$Birth.Date), format="%Y-%m-%d"))
age_var <-
group_by(team_placements_df, placement) %>%
summarize(age_var = var(days_old)) %>%
ungroup() %>%
summarize(avg_age_var = mean(age_var))
scores$age_score <- abs(age_var$avg_age_var - var(team_placements_df$days_old)) /10
###################
# ETHNICITY SCORE #
###################
# This score is the overall average of each team's average % representation that each teammate experiences. For example, 0.44 means that for the average team, the average teammate experiences that his/her personal ethnicity is represented in 44% of the team.
ethnicity_eths <-
team_placements_df %>%
group_by(placement,
Race.Ethnicity.African.American.Black,
Race.Ethnicity.White.Caucasian,
Race.Ethnicity.Asian,
Race.Ethnicity.Hispanic.Latino,
Race.Ethnicity.Middle.Eastern,
Race.Ethnicity.Native.Hawaiian.Pacific.Islander,
Race.Ethnicity.American.Indian.Alaskan.Native,
Race.Ethnicity.Other) %>%
dplyr::summarize(n_eths = n()) %>%
group_by(placement) %>%
dplyr::mutate(pct_eths = n_eths/sum(n_eths) * n_eths / sum(n_eths)) %>%
dplyr::mutate(avg_eths_rep = sum(pct_eths)) %>%
summarize(avg_eths_rep = mean(avg_eths_rep)) %>%
summarize(avg_eths_rep = mean(avg_eths_rep))
scores$ethnicity_score <- ethnicity_eths$avg_eths_rep * 1000
#################
#    Scoring    #
#################
placed <- team_placements_df %>%
group_by(placement) %>%
summarise(HS_Grads = sum(Ed_HS),
SomeCol = sum(Ed_SomeCol),
Tutoring = sum(HasTutored),
Spanish = sum(SpanishAble),
OtherLang = sum(Lang_Other),
MathAble = sum(Math.Confidence),
Males = sum(Male)) %>%
left_join(., school_targets, by=c("placement" = "sch_id"))
scores$Edscore <- hs_loss(placed$HSGrad_tgt, placed$HS_Grads) + sum((placed$SomeCol_tgt - placed$SomeCol)^2)
scores$Tutoring <- sum((placed$TutExp - placed$Tutoring)^2)
scores$Spanish <- (reqd_spanish_loss(placed$SpanishNeed, placed$Spanish, min_reqd = 1) + sum((placed$OtherLang_tgt - placed$OtherLang)^2))
scores$Math <- sum((placed$Math_tgt - placed$MathAble)^2)
scores$Gender <- reqd_males(placed$Male_tgt, placed$Males, 1)
#################
# OVERALL SCORE #
#################
scores$aggr_score <- sum(unlist(scores))
return(scores)
}
# Temperature Function
current_temperature = function(iter, s_curve_amplitude, s_curve_center, s_curve_width) {
s_curve_amplitude * s_curve(iter, s_curve_center, s_curve_width)
}
s_curve = function(x, center, width) {
1 / (1 + exp((x - center) / width))
}
# Annealing and Swap Function
run_intermediate_annealing_process = function(starting_placements, school_df, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
# starting_placements = team_placements_df
# school_df = school_targets
# best_placements = team_placements_df
# best_score = 142078800000
# starting_iteration = 1
# number_of_iterations = 10000
# s_curve_amplitude = 4000
# s_curve_center = 0
# s_curve_width = 3000
#
team_placements_df <- starting_placements
# Sort by acm_id so that each row index will equal acm_id
team_placements_df <- team_placements_df[order(team_placements_df$acm_id), ]
rownames(team_placements_df) <- 1:nrow(team_placements_df)
placement_score <- calculate_score(starting_placements, school_df)$aggr_score
trace <- data.frame(iter=c(1:number_of_iterations), score=0)
trace[1, 2] <- placement_score
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
# Create a copy of team_placements_df
candidate_placements_df <- team_placements_df
acms_no_Manual.Placement <- subset(candidate_placements_df, (is.na(candidate_placements_df$Manual.Placement)))
# Choose 2 schools at random
school_ids <- 1:nrow(school_df)
schools_to_swap <- sample(school_ids, 2)
# Choose 1 ACM from each of those schools. Select only ACMs who have no Manual.Placement
swap1 <- sample(acms_no_Manual.Placement$acm_id[ acms_no_Manual.Placement$placement == schools_to_swap[1] ], 1)
swap2 <- sample(acms_no_Manual.Placement$acm_id[ acms_no_Manual.Placement$placement == schools_to_swap[2] ], 1)
if (prevent_roommates == "Yes" & !is.na(candidate_placements_df$Roommate.Names[candidate_placements_df$acm_id == swap1])){
# find schools that do not contain swap1's roommates
swap1_roommates <- candidate_placements_df$Roommate.Names[candidate_placements_df$acm_id == swap1]
ineligible_schools <- unique(candidate_placements_df$placement[which(candidate_placements_df$Roommate.Names == swap1_roommates)])
schools_to_swap[2] <- sample(school_ids[school_ids  != ineligible_schools], 1)
# find acm in schools_to_swap[2] who does not have roommates on schools_to_swap[1]
school1_frame <- candidate_placements_df[candidate_placements_df$placement == schools_to_swap[1], ]
school2_frame <- acms_no_Manual.Placement[acms_no_Manual.Placement$placement == schools_to_swap[2], ]
swap2 <- sample(school2_frame$acm_id[is.na(school2_frame$Roommate.Names)
| school2_frame$Roommate.Names %not in% school1_frame$Roommate.Names], 1)
} else if (prevent_roommates == "Yes"){
# leave schools_to_swap[1] and schools_to_swap[2] as-is, but still ensure acm chosen from schools_to_swap[2] does not have roommates on schools_to_swap[1]
school1_frame <- candidate_placements_df[candidate_placements_df$placement == schools_to_swap[1], ]
school2_frame <- acms_no_Manual.Placement[acms_no_Manual.Placement$placement == schools_to_swap[2], ]
swap2 <- sample(school2_frame$acm_id[is.na(school2_frame$Roommate.Names)
| school2_frame$Roommate.Names %not in% school1_frame$Roommate.Names], 1)
}
# Swap the team assignment of those 2 ACMs - NOTE this is done by index, and we use acm_id as index
candidate_placements_df$placement = replace(candidate_placements_df$placement, c(swap1, swap2), candidate_placements_df$placement[c(swap2, swap1)])
# Place firm restrictions here?
#IsValid(candidate_placements_df)
candidate_score = calculate_score(candidate_placements_df, school_df)
trace[i+1, 2] <- candidate_score$aggr_score
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
if (runif(1) < ratio) {
team_placements_df = candidate_placements_df
placement_score = candidate_score$aggr_score
all_scores = candidate_score
if (placement_score < best_score) {
best_placements = team_placements_df
best_score = placement_score
best_score_diff = all_scores
}
}
}
# Merge in School characteristics
best_placements <- merge(best_placements, school_df, by.x = "placement", by.y = "sch_id", all.x = TRUE)
best_placements <- best_placements[order(best_placements$placement),]
return(list(best_placements=best_placements,
best_score=best_score,
diff_scores=best_score_diff,
trace=trace))
}
# Visualize Error Over Time
traceplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = score)) +
geom_point() +
coord_cartesian(ylim = c(1e3, 1e4))
}
# Full Application
acm_enc <- encode_acm_df(acm_df)
acm_enc$SpanishAble <- as.numeric(grepl("Spanish", df$Language.Ability))
View(df)
df$Language.Ability
