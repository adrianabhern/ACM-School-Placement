# NOTE: Removed seed parameter.  Seed is used for reproducability, but we want randomness in the start.
# first create an empty list
team_placements = list()
# use a for-loop to read each team size
for (x in 1:nrow(school_targets)){
team_slots = list(
# create a list that repeats each school 'id' for the size of each team
rep(x,
subset(school_targets$size, school_targets$sch_id == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- data.frame(placement=unlist(team_placements))
# Randomize Starting Place
#set.seed(seed)
team_placements_df <- data.frame(placement=team_placements[sample(nrow(team_placements), replace=F), ],
acm_id= 1:nrow(team_placements))
# Merge team_placements_df with acm_df on the 'id' column
team_placements_df <- merge(acm_enc, team_placements_df, by = "acm_id", all.x = TRUE)
# Honor Manual Placements
sch_id_names <- school_df[, c("sch_id", "School Name")]
colnames(sch_id_names) <- c("Manual.Placement_id", "School.Name")
team_placements_df <- merge(team_placements_df, sch_id_names, by.x = "Manual.Placement", by.y = "School.Name", all.x = TRUE)
acms_with_Manual.Placement <- subset(team_placements_df, (!is.na(team_placements_df$Manual.Placement)))
acms_no_Manual.Placement <- subset(team_placements_df, (is.na(team_placements_df$Manual.Placement)))
for (x in acms_with_Manual.Placement$acm_id){
team_placements_df <- team_placements_df[order(team_placements_df$acm_id), ]
rownames(team_placements_df) <- 1:nrow(team_placements_df)
acm_row <- subset(acms_with_Manual.Placement, acms_with_Manual.Placement$acm_id == x)
# Choose 1 acm_id currently assigned to the school at which we want to ensure manual placement is honored
acm_id_to_swap <- sample( subset( acms_no_Manual.Placement$acm_id, acms_no_Manual.Placement$placement == acm_row$Manual.Placement_id ), 1 )
# Swap the team assignment of those 2 ACMs
swap1 <- acm_row$acm_id
swap2 <- acm_id_to_swap
team_placements_df$placement <- replace(team_placements_df$placement, c(swap1, swap2), team_placements_df$placement[c(swap2, swap1)])
}
# We would like to ensure that high school students get placed in ES or MS
acms_for_swaps <- merge(team_placements_df[is.na(team_placements_df$Manual.Placement_id), ], school_targets, by.x = "placement", by.y = "sch_id", all.x = TRUE)
#print(acms_for_swaps)
hs_acms_to_swap <- acms_for_swaps[(acms_for_swaps$Ed_HS == 1) & (acms_for_swaps$span == "HS"),]
acms_to_swap_with <- acms_for_swaps[(acms_for_swaps$Ed_HS == 0) & (acms_for_swaps$span != "HS"),]
acms_to_swap_with <- acms_to_swap_with[sample(nrow(acms_to_swap_with), nrow(hs_acms_to_swap), replace=F), ]
team_placements_df[team_placements_df$acm_id %in% hs_acms_to_swap$acm_id, ]$placement = acms_to_swap_with$placement
team_placements_df[team_placements_df$acm_id %in% acms_to_swap_with$acm_id, ]$placement = hs_acms_to_swap$placement
return(team_placements_df)
}
# Calculate score
hs_loss <- function(targets, actuals){
loss <- ifelse(targets == 0, (targets - actuals) * -1e10, (targets - actuals)^2)
sum(loss)
}
calculate_score = function(team_placements_df, school_targets, gender_target=gender_g) {
# Merge  with school_df to pull in school characteristics
team_placements_df <- merge(team_placements_df, school_targets, by.x = "placement", by.y = "sch_id", all.x = TRUE)
# Store each score in a list
scores = list()
#################
# COMMUTE SCORE #
#################
# This score is simply the sum number of seconds each ACM travels to their assigned school
team_placements_df$dest = colnames(acm_commutes)[team_placements_df$placement + 1]
team_placements_df <- within(team_placements_df, id_dest <- paste(acm_id, dest, sep = "_"))
dt_commutes <- data.table(acm_commutes_long)
# Take the sqrt to scale the value closer to the other features
scores$commute_score <- sqrt(dt_commutes[id_dest %in% team_placements_df$id_dest,  sum(dist)])
################
# GENDER SCORE #
################
# This score measures the average of differences between each gender's percent occurrence across the corps and its percent occurrence on each team
# Create data.frame with each potential combination of gender and school, based on the survey responses provided
gender_frame <-
expand.grid(placement = 1:nrow(school_targets), Gender = levels(team_placements_df$Gender))
# Precalculate tibbl containing percentage representation of each gender category across the entire corps
# Can we move this to school targets?  Try to calculate static things once.
gender_g <- group_by(team_placements_df, Gender) %>% summarize(pct_g = n()/nrow(team_placements_df))
# Merge previous two frames by "gender"
gender_frame_g <-
merge(x = gender_frame,
y = gender_g,
by = "Gender",
all.x = TRUE)
# Represent percentage of each gender category within each team
gender_gs <-
team_placements_df %>%
group_by(placement, Gender) %>%
dplyr::summarize(n_gs = n()) %>%
group_by(placement) %>%
dplyr::mutate(pct_gs = n_gs/sum(n_gs))
# Calculate absolute value of difference between gender percentages at each team and across the corps
gender_frame_gs <-
merge(x = gender_frame_g,
y = gender_gs,
by = c("placement", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
}) %>%
summarise(mean_gend_diff = mean(abs_diff_gs))
scores$gender_score <- gender_frame_gs$mean_gend_diff * 5000
#############
# AGE SCORE #
#############
# This score is the difference between the [overall age variance across the corps] and [overall average of each team's average age variance]
# Moved computation of age for each acm to acm_enc so that we only do it once.
#team_placements_df$days_old <- as.integer(Sys.Date() - as.Date(as.character(team_placements_df$Birth.Date), format="%Y-%m-%d"))
age_var <-
group_by(team_placements_df, placement) %>%
summarize(age_var = var(days_old)) %>%
ungroup() %>%
summarize(avg_age_var = mean(age_var))
scores$age_score <- abs(age_var$avg_age_var - var(team_placements_df$days_old)) /10
###################
# ETHNICITY SCORE #
###################
# This score is the overall average of each team's average % representation that each teammate experiences. For example, 0.44 means that for the average team, the average teammate experiences that his/her personal ethnicity is represented in 44% of the team.
ethnicity_eths <-
team_placements_df %>%
group_by(placement,
Race.Ethnicity.African.American.Black,
Race.Ethnicity.White.Caucasian,
Race.Ethnicity.Asian,
Race.Ethnicity.Hispanic.Latino,
Race.Ethnicity.Middle.Eastern,
Race.Ethnicity.Native.Hawaiian.Pacific.Islander,
Race.Ethnicity.American.Indian.Alaskan.Native,
Race.Ethnicity.Other) %>%
dplyr::summarize(n_eths = n()) %>%
group_by(placement) %>%
dplyr::mutate(pct_eths = n_eths/sum(n_eths) * n_eths / sum(n_eths)) %>%
dplyr::mutate(avg_eths_rep = sum(pct_eths)) %>%
summarize(avg_eths_rep = mean(avg_eths_rep)) %>%
summarize(avg_eths_rep = mean(avg_eths_rep))
scores$ethnicity_score <- ethnicity_eths$avg_eths_rep * 1000
#################
#    Scoring    #
#################
placed <- team_placements_df %>%
filter(is.na(team_placements_df$Manual.Placement)) %>%
group_by(placement) %>%
summarise(HS_Grads = sum(Ed_HS),
SomeCol = sum(Ed_SomeCol),
Tutoring = sum(HasTutored),
Spanish = sum(SpanishAble),
OtherLang = sum(Lang_Other),
Pref_HS = sum(Pref_HS),
Pref_MS = sum(Pref_MS),
Pref_ES = sum(Pref_ES),
MathAble = sum(Math_Confidence)) %>%
left_join(., school_targets, by=c("placement" = "sch_id"))
scores$HS_score <- hs_loss(placed$HSGrad_tgt, placed$HS_Grads) * 10
scores$SomeCol <- sum(abs(placed$SomeCol_tgt - placed$SomeCol)) * 10
scores$Tutoring <- sum(abs(placed$TutExp - placed$Tutoring)) * 10
scores$Spanish <- sum(abs(placed$SpanishNeed - placed$Spanish)) * 10
scores$OtherLang <- sum(abs(placed$OtherLang_tgt - placed$OtherLang)) * 10
scores$Grade_Pref <- sum(abs(placed$SpanPref_ES - placed$Pref_ES) + abs(placed$SpanPref_MS - placed$Pref_MS) + abs(placed$SpanPref_HS - placed$Pref_HS))
scores$Math <- sum(abs(placed$Math_tgt - placed$MathAble)) * 10
#################
# OVERALL SCORE #
#################
scores$aggr_score <- sum(unlist(scores))
return(scores)
}
# Temperature Function
current_temperature = function(iter, s_curve_amplitude, s_curve_center, s_curve_width) {
s_curve_amplitude * s_curve(iter, s_curve_center, s_curve_width)
}
s_curve = function(x, center, width) {
1 / (1 + exp((x - center) / width))
}
# Annealing and Swap Function
run_intermediate_annealing_process = function(starting_placements, school_df, best_placements, best_score, starting_iteration, number_of_iterations, s_curve_amplitude, s_curve_center, s_curve_width) {
# starting_placements = team_placements_df
# school_df = school_targets
# best_placements = team_placements_df
# best_score = 142078800000
# starting_iteration = 1
# number_of_iterations = 10000
# s_curve_amplitude = 4000
# s_curve_center = 0
# s_curve_width = 3000
#
team_placements_df <- starting_placements
placement_score <- calculate_score(starting_placements, school_df)$aggr_score
trace <- data.frame(iter=c(1:number_of_iterations + 1), score=0)
trace[1, 2] <- placement_score
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, s_curve_amplitude, s_curve_center, s_curve_width)
# Nick Question: Necessary to reset acm_id sort and index?
# Create a copy of team_placements_df, which is Sorted by acm_id so that each row index will equal acm_id
candidate_placements_df <- team_placements_df[order(team_placements_df$acm_id), ]
rownames(candidate_placements_df) <- 1:nrow(candidate_placements_df)
acms_no_Manual.Placement <- subset(candidate_placements_df, (is.na(candidate_placements_df$Manual.Placement)))
# Choose 2 schools at random
schools_to_swap = sample(1:nrow(school_df), 2)
# Choose 1 ACM from each of those schools. Select only ACMs who have no Manual.Placement
swap1 = sample(acms_no_Manual.Placement$acm_id[ acms_no_Manual.Placement$placement == schools_to_swap[1] ], 1)
swap2 = sample(acms_no_Manual.Placement$acm_id[ acms_no_Manual.Placement$placement == schools_to_swap[2] ], 1)
# Swap the team assignment of those 2 ACMs - NOTE this is done by index, but we use acm_id as index
candidate_placements_df$placement = replace(candidate_placements_df$placement, c(swap1, swap2), candidate_placements_df$placement[c(swap2, swap1)])
# Place firm restrictions here?
#IsValid(candidate_placements_df)
candidate_score = calculate_score(candidate_placements_df, school_df)
trace[i+1, 2] <- candidate_score$aggr_score
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
if (runif(1) < ratio) {
team_placements_df = candidate_placements_df
placement_score = candidate_score$aggr_score
all_scores = candidate_score
if (placement_score < best_score) {
best_placements = team_placements_df
best_score = placement_score
best_score_diff = all_scores
}
}
}
# Merge in School characteristics
best_placements <- merge(best_placements, school_df, by.x = "placement", by.y = "sch_id", all.x = TRUE)
best_placements <- best_placements[order(best_placements$placement),]
return(list(best_placements=best_placements,
best_score=best_score,
diff_scores=best_score_diff,
trace=trace))
}
# Visualize Error Over Time
traceplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = score)) +
geom_point() +
coord_cartesian(ylim = c(1e3, 1e4))
}
# Full Application
# Precalculate school targets
school_targets <- school_config(school_df, acm_enc)
team_placements_df <- initial_placement(acm_enc, school_targets)
output <- run_intermediate_annealing_process(starting_placements = team_placements_df, school_df = school_targets, best_placements = team_placements_df, best_score = 142078800000, starting_iteration = 1, number_of_iterations = number_of_iterations, s_curve_amplitude = 3000, s_curve_center = 0, s_curve_width = 250)
best_placements <- output$best_placements
# Playing around with methods to get more info in the output. It's probably better to just re-calculate these in visualizations...
best_placements$best_score <- output$best_score
best_placements$ethnicity_score <- output$diff_scores$ethnicity_score
best_placements$commute_score <- output$diff_scores$commute_score
diff_scores <- output$diff_scores
trace <- output$trace
trace
root_dir = "C:\\Users\\perus\\OneDrive\\Documents\\GitHub\\ACM-School-Placement\\"
acm_df <- read.csv(file = paste(root_dir, "Input 1 - ACM Data.csv", sep = ""))
acm_df <- read.csv(file = paste(root_dir, "Input 1 - LA ACM Data.csv", sep = ""))
library(readxl)
acm_df <- read_excel(file = paste(root_dir, "Input 1 - LA ACM Data.csv", sep = ""))
?read_excel
acm_df <- read_excel(path = paste(root_dir, "Input 1 - LA ACM Data.csv", sep = ""))
paste(root_dir, "Input 1 - LA ACM Data.csv", sep = "")
acm_df <- read_excel(path = paste(root_dir, "Input 1 - LA ACM Data.xlsx", sep = ""))
View(acm_df)
acm_df <- read_excel(path = paste(root_dir, "Input 1 - LA ACM Data.xlsx", sep = ""), col_types = c("text", "text", "text", "text","text","text","date", "numeric", "text","text","numeric", "text","text","text"))
View(acm_df)
acm_df$Birth.Date <- format(as.Date(acm_df$Birth.Date), "%m/%d/%Y")
library(dplyr)
library(tidyr)
acm_df <- read_excel(path = paste(root_dir, "Input 1 - LA ACM Data.xlsx", sep = ""), col_types = c("text", "text", "text", "text","text","text","date", "numeric", "text","text","numeric", "text","text","text"))
acm_df$Birth.Date <- format(as.Date(acm_df$Birth.Date), "%m/%d/%Y")
dataset <- acm_df
acm_enc <- select(acm_df, acm_id)
acm_enc$Ed_HS <- as.numeric(grepl("High School", df$Educational.Attainment))
df <- acm_df
acm_enc <- select(acm_df, acm_id)
acm_enc$Ed_HS <- as.numeric(grepl("High School", df$Educational.Attainment))
View(df)
acm_enc <- select(acm_df, acm_id)
acm_df <- dataset
View(dataset)
library(readxl)
# This portion looks different in Power BI
root_dir = "C:\\Users\\perus\\OneDrive\\Documents\\GitHub\\ACM-School-Placement\\"
# In Power BI the source is "survey_export.csv" because that's a more accurate representation of a real survey implementation with messy headers and all. "Input 1 - ACM Data.csv" holds the same data, but with clean headers.
acm_df <- read_excel(path = paste(root_dir, "Input 1 - LA ACM Data.xlsx", sep = ""), col_types = c("text", "text", "text", "text","text","text","date", "numeric", "text","text","numeric", "text","text","text"))
# This part not necessary in PowerBI, since dates are read in as %m/%d/%Y already
acm_df$Birth.Date <- format(as.Date(acm_df$Birth.Date), "%m/%d/%Y")
# This line mimics Power BI's behavior
dataset <- acm_df
# How this portion appears in Power BI:
# 'dataset' holds the input data for this script
#
# acm_df <- dataset
#
# vars_df <- data.frame(
#   PowerBI.Survey.Items = c(
#     "Date Submitted",
#     "City",
#     "State/Region",
#     "Full name:",
#     "If applicable, preferred name(s):Â ",
#     "What is your date of birth?",
#     "City Year Site:What site will you serve with, and did you attend a City Year school at that site? (choose from # the list of schools)",
#     "School:What site will you serve with, and did you attend a City Year school at that site? (choose from the list # of schools)",
#     "What gender do you identify with?",
#     "African American/Black:What is your race/ethnicity (choose all that apply)",
#     "American Indian/Alaskan Native:What is your race/ethnicity (choose all that apply)",
#     "Asian:What is your race/ethnicity (choose all that apply)",
#     "Hispanic/Latino:What is your race/ethnicity (choose all that apply)",
#     "Middle Eastern:What is your race/ethnicity (choose all that apply)",
#     "Native Hawaiian or Pacific Islander:What is your race/ethnicity (choose all that apply)",
#     "White/Caucasian:What is your race/ethnicity (choose all that apply)",
#     "Other - Write In:What is your race/ethnicity (choose all that apply)",
#     "What is the highest level of education you have achieved?",
#     "Other - Write In:What is the highest level of education you have achieved?",
#     "Are you able to tutor and mentor students while speaking a language other than English?",
#     "Arabic:Other language",
#     "Cape Verdean Creole :Other language",
#     "Chinese (Cantonese):Other language",
#     "Chinese (Mandarin):Other language",
#     "Haitian Creole:Other language",
#     "French:Other language",
#     "Nepali:Other language",
#     "Polish:Other language",
#     "Spanish:Other language",
#     "Swahili:Other language",
#     "Urdu:Other language",
#     "Vietnamese:Other language",
#     "Other - Write In (Required):Other language",
#     "Do you have teaching or tutoring experience?",
#     "Months Teaching",
#     "Elementary school (K-5):What grade level(s) have you worked with in the past? Please select all that apply.",
#     "Middle school (6-8):What grade level(s) have you worked with in the past? Please select all that apply.",
#     "High school (9-12):What grade level(s) have you worked with in the past? Please select all that apply.",
#     "Do you have a teaching credential?",
#     "Elementary school:Which grade levels would you prefer to work with?",
#     "Middle school:Which grade levels would you prefer to work with?",
#     "High school:Which grade levels would you prefer to work with?",
#     "Would you prefer to support with ELA/literacy or math?",
#     "Please indicate the highest level of math in which you are confident in your skills.",
#     "Do you know where you will be living during the 2017-2018 school year?",
#     "Street address Line 1:SYAddress",
#     "Street address line 2:SYAddress",
#     "City:SYAddress",
#     "State:SYAddress",
#     "Zip:SYAddress",
#     "Will you be living with other City Year AmeriCorps members during the school year?:SYAddress",
#     "If so, please list their first and last names here::SYAddress",
#     "How will you travel to your school site?"
#   ),
#   Variable.Name = c(
#     "Date.Submitted",
#     "City",
#     "State.Region",
#     "Full.Name",
#     "Pref.Name",
#     "Birth.Date",
#     "Site.Name",
#     "Attnd.CY.School",
#     "Gender",
#     "Race.Ethnicity.African.American.Black",
#     "Race.Ethnicity.American.Indian.Alaskan.Native",
#     "Race.Ethnicity.Asian",
#     "Race.Ethnicity.Hispanic.Latino",
#     "Race.Ethnicity.Middle.Eastern",
#     "Race.Ethnicity.Native.Hawaiian.Pacific.Islander",
#     "Race.Ethnicity.White.Caucasian",
#     "Race.Ethnicity.Other",
#     "Educational.Attainment",
#     "Educational.Attainment.WriteIn",
#     "Language.Other.English",
#     "Language.Ability.Arabic",
#     "Language.Ability.CapeVerdeanCreole",
#     "Language.Ability.Chinese.Cantonese",
#     "Language.Ability.Chinese.Mandarin",
#     "Language.Ability.HaitianCreole",
#     "Language.Ability.French",
#     "Language.Ability.Nepali",
#     "Language.Ability.Polish",
#     "Language.Ability.Spanish",
#     "Language.Ability.Swahili",
#     "Language.Ability.Urdu",
#     "Language.Ability.Vietnamese",
#     "Language.Ability.Other",
#     "Tutoring.Experience",
#     "Tutoring.Experience.Months",
#     "Tutoring.Experience.ES",
#     "Tutoring.Experience.MS",
#     "Tutoring.Experience.HS",
#     "Teaching.Credential",
#     "Grade.Lvl.Pref.ES",
#     "Grade.Lvl.Pref.MS",
#     "Grade.Lvl.Pref.HS",
#     "Tutoring.Preference",
#     "Math.Confidence",
#     "Know.Living",
#     "Res.Address.Line.1",
#     "Res.Address.Line.2",
#     "Res.City",
#     "Res.State",
#     "Res.Postal.Code",
#     "Roomates",
#     "Roommate.Names",
#     "Travel.Method"
#   ),
#   stringsAsFactors=FALSE
#   )
#
# for (x in names(acm_df)){
#   try(names(acm_df)[names(acm_df) == x] <- vars_df$`Variable.Name`[vars_df$`PowerBI.Survey.Items` == x])
# }
library(dplyr)
library(tidyr)
acm_df <- dataset
df <- acm_df
acm_enc <- select(acm_df, acm_id)
df <- acm_df
acm_enc <- select(acm_df, acm_id)
df <- acm_df
acm_enc <- select(acm_df, acm_id)
acm_df <- dataset
library(dplyr)
acm_df <- dataset
library(dplyr)
library(tidyr)
acm_df <- dataset
df <- acm_df
acm_enc <- select(acm_df, acm_id)
acm_enc$Ed_HS <- as.numeric(grepl("High School", df$Educational.Attainment))
View(acm_enc)
acm_enc$Ed_SomeCol <- grepl("Some College", df$Educational.Attainment) + grepl("Associate's Degree", df$Educational.Attainment)
unique(dataset$Educational.Attainment)
acm_enc$Ed_SomeCol <- grepl("Some College", df$Educational.Attainment) + grepl("Associates Degree", df$Educational.Attainment)
acm_enc$Ed_Col <- grepl("Bachelors Degree", df$Educational.Attainment) + grepl("Master's Degree", df$Educational.Attainment)
acm_enc$HasTutored <- as.numeric(grepl("Yes", df$Tutoring.Experience))
acm_enc <- select(acm_df, acm_id, Math.Confidence)
acm_enc$Ed_HS <- as.numeric(grepl("High School", df$Educational.Attainment))
acm_enc$Ed_SomeCol <- grepl("Some College", df$Educational.Attainment) + grepl("Associates Degree", df$Educational.Attainment)
acm_enc$HasTutored <- as.numeric(grepl("Yes", df$Tutoring.Experience))
acm_enc$SpanishAble <- as.numeric(grepl("Spanish", df$Language.Ability))
grepl("Spanish", df$Language.Ability)
grepl("Spanish", df$Language.Ability) == F
grepl("Yes", df$Language.Ability)
grepl("Spanish", df$Language.Ability) == F & grepl("Yes", df$Language.Ability)
ifelse(grepl("Spanish", df$Language.Ability) == F & grepl("Yes", df$Language.Ability), 1, 0)
acm_enc$Lang_Other <- ifelse(grepl("Spanish", df$Language.Ability) == F & grepl("Yes", df$Language.Ability), 1, 0)
acm_enc %>%
left_join(., select(df,
acm_id,
Gender,
Manual.Placement,
Birth.Date,
Race.Ethnicity.African.American.Black:Race.Ethnicity.Other),
by=c("acm_id" = "acm_id"))
acm_enc$Female <- as.numeric(grepl("Female", df$Gender))
acm_enc$Other.Gender <- as.numeric(grepl("Other", df$Gender))
unique(dataset$Race.Ethnicity)
acm_enc$Race.Ethnicity.Hispanic <- as.numeric(grepl("Hispanic/Latino", df$Race.Ethnicity))
acm_enc$Race.Ethnicity.Asian <- as.numeric(grepl("Asian/Asian-American", df$Race.Ethnicity))
acm_enc$Race.Ethnicity.White <- as.numeric(grepl("Caucasian/White", df$Race.Ethnicity))
acm_enc$Race.Ethnicity.Black <- as.numeric(grepl("African-American/Black", df$Race.Ethnicity))
acm_enc %>%
left_join(., select(df,
Manual.Placement,
Birth.Date),
by=c("acm_id" = "acm_id"))
acm_enc %>%
left_join(., select(df,
acm_id,
Manual.Placement,
Birth.Date),
by=c("acm_id" = "acm_id"))
acm_enc <- acm_enc %>%
left_join(., select(df,
acm_id,
Manual.Placement,
Birth.Date),
by=c("acm_id" = "acm_id")) %>%
mutate(days_old = as.integer(Sys.Date() - as.Date(as.character(df$Birth.Date), format="%m/%d/%Y"))) %>%
replace_na(list(Pref_HS = 0, Pref_MS = 0, Pref_ES = 0,
Lang_Other = 0, days_old = 0))
acm_enc <- acm_enc %>%
left_join(., select(df,
acm_id,
Manual.Placement,
Birth.Date),
by=c("acm_id" = "acm_id")) %>%
mutate(days_old = as.integer(Sys.Date() - as.Date(as.character(df$Birth.Date), format="%m/%d/%Y"))) %>%
replace_na(list(Lang_Other = 0, days_old = 0))
acm_commutes <- read_excel(path = paste(root_dir, "Input 2 - ACM Commutes.xlsx", sep = ""))
acm_commutes <- read_excel(path = paste(root_dir, "Input 2 - LA ACM Commutes.xlsx", sep = ""))
acm_commutes <- read_excel(path = paste(root_dir, "Input 2 - LA ACM Commutes.xlsm", sep = ""))
View(acm_commutes)
?read_excel
acm_commutes[1:8]
acm_commutes <- read_excel(path = paste(root_dir, "Input 2 - LA ACM Commutes.xlsm", sep = ""))[1:8]
View(acm_commutes)
acm_commutes <- read_excel(path = paste(root_dir, "Input 2 - LA ACM Commutes.xlsm", sep = ""),
col_types = c("numeric", "text", "numeric", "text", "text", "numeric", "numeric", "numeric", "blank"))[1:8]
acm_commutes <- read_excel(path = paste(root_dir, "Input 2 - LA ACM Commutes.xlsm", sep = ""),
col_types = c("numeric", "text", "text", "text", "text", "numeric", "numeric", "numeric", "blank"))[1:8]
View(acm_commutes)
acm_commutes <- read_excel(path = paste(root_dir, "Input 2 - LA ACM Commutes.xlsm", sep = ""),
col_names = c("acm_id", "ACM", "From", "dest", "To", "dist", "time", "min", "blank"),
col_types = c("numeric", "text", "text", "text", "text", "numeric", "numeric", "numeric", "blank"))[1:8]
acm_commutes <- read_excel(path = paste(root_dir, "Input 2 - LA ACM Commutes.xlsm", sep = ""),
col_names = c("acm_id", "ACM", "From", "dest", "To", "dist", "time", "min", "blank"),
col_types = c("numeric", "text", "text", "text", "text", "numeric", "numeric", "numeric", "blank"))[1:8]
View(acm_commutes)
acm_commutes <- read_excel(path = paste(root_dir, "Input 2 - LA ACM Commutes.xlsm", sep = ""),
col_names = c("acm_id", "ACM", "From", "dest", "To", "dist", "time", "min", "blank"),
col_types = c("numeric", "text", "text", "text", "text", "numeric", "numeric", "numeric", "blank"), skip=1)[1:8]
school_df <- read_excel(path = paste(root_dir, "Input 3 - LA School Data.xls", sep = ""))
school_df <- read_excel(path = paste(root_dir, "Input 3 - LA School Data.xlsx", sep = ""))
View(school_df)
