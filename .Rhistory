# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
ACM_commutes <- rbind(ACM_commutes, commute$Time)
}
# There will likely be a warning prompt because some corps members are roommates. The warning is because there are duplicate origin addresses.
# results = gmapsdistance(origin = acm_df[1:2,]$"Full Address", destination = school_df[1:2,]$"Address", mode = "driving", combinations = "all", shape = "wide")
#cbind combines two tables
# acm_data = cbind(acm_data, results)
ACM_commutes
acm_df <- cbind(acm_df, ACM_commutes)
n <- max(length(acm_df), length(ACM_commutes))
length(acm_df) <- n
length(ACM_commutes) <- n
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# Add an index column for schools
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
ACM_commutes <- rbind(ACM_commutes, commute$Time)
}
n <- max(length(acm_df), length(ACM_commutes))
length(acm_df) <- n
length(ACM_commutes) <- n
acm_df <- cbind(acm_df, ACM_commutes)
ACM_commutes
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# Add an index column for schools
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
commute$id = ACM_id
ACM_commutes <- rbind(ACM_commutes, commute$Time)
}
acm_df2 <- merge(acm_df, ACM_commutes,by="id")
commute
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
commute[["id"]] = ACM_id
ACM_commutes <- rbind(ACM_commutes, commute$Time)
}
# commute
acm_df2 <- merge(acm_df, ACM_commutes,by="id")
commute
knitr::opts_chunk$set(echo = TRUE)
library("gmapsdistance")
library(readxl)
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# Add an index column for schools
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
commute[["id"]] = ACM_id
ACM_commutes <- rbind(ACM_commutes, commute$Time)
}
commute
acm_df2 <- merge(acm_df, ACM_commutes,by="id")
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
commute[["id"]] = ACM_id
ACM_commutes <- rbind(ACM_commutes, commute$Time)
}
commute
acm_df2 <- merge(acm_df, ACM_commutes)
#
#n <- max(length(acm_df), length(ACM_commutes))
#length(acm_df) <- n
#length(ACM_commutes) <- n
#ACM_commutes
#
#acm_df <- cbind(acm_df, ACM_commutes)
# There will likely be a warning prompt because some corps members are roommates. The warning is because there are duplicate origin addresses.
# results = gmapsdistance(origin = acm_df[1:2,]$"Full Address", destination = school_df[1:2,]$"Address", mode = "driving", combinations = "all", shape = "wide")
#cbind combines two tables
# acm_data = cbind(acm_data, results)
acm_df2
ACM_commutes
school_df
acm_df
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
commute[["id"]] = ACM_id
ACM_commutes <- rbind(ACM_commutes, commute$Time)
}
#commute
acm_df2 <- merge(acm_df, ACM_commutes, by = "id")
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
commute[["id"]] = ACM_id
ACM_commutes <- rbind(ACM_commutes, commute$Time)
}
#commute
acm_df3 <- merge(acm_df, ACM_commutes, by = "id")
ACM_commutes
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
ACM_commutes <- rbind(ACM_commutes, commute$Time)
ACM_commutes[["id"]] = ACM_id
}
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# Add an index column for schools
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
ACM_commutes <- rbind(ACM_commutes, commute$Time)
ACM_commutes[["id"]] = ACM_id
}
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
ACM_commutes <- rbind(ACM_commutes, commute$Time)
#ACM_commutes[["id"]] = ACM_id
}
acm_df3 <- merge(acm_df, ACM_commutes, by = "id")
ACM_commutes
ACM_id
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
ACM_commutes <- rbind(ACM_commutes, commute$Time)
ACM_commutes[["id"]] = ACM_id
}
ACM_row
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
commute$Time[["id"]] = ACM_id
ACM_commutes <- rbind(ACM_commutes, commute$Time)
}
acm_df3 <- merge(acm_df, ACM_commutes, by = "id")
#acm_df2
#ACM_commutes
#acm_df
#
#n <- max(length(acm_df), length(ACM_commutes))
#length(acm_df) <- n
#length(ACM_commutes) <- n
#ACM_commutes
#
#acm_df <- cbind(acm_df, ACM_commutes)
# There will likely be a warning prompt because some corps members are roommates. The warning is because there are duplicate origin addresses.
# results = gmapsdistance(origin = acm_df[1:2,]$"Full Address", destination = school_df[1:2,]$"Address", mode = "driving", combinations = "all", shape = "wide")
#cbind combines two tables
# acm_data = cbind(acm_data, results)
acm_df3
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
commute$Time[["id"]] = ACM_id
ACM_commutes <- rbind(ACM_commutes, commute$Time)
}
acm_df3 <- merge(acm_df, ACM_commutes, by = "id", all = TRUE)
#acm_df2
#ACM_commutes
#acm_df
acm_df3
#
#n <- max(length(acm_df), length(ACM_commutes))
#length(acm_df) <- n
#length(ACM_commutes) <- n
#ACM_commutes
#
#acm_df <- cbind(acm_df, ACM_commutes)
# There will likely be a warning prompt because some corps members are roommates. The warning is because there are duplicate origin addresses.
# results = gmapsdistance(origin = acm_df[1:2,]$"Full Address", destination = school_df[1:2,]$"Address", mode = "driving", combinations = "all", shape = "wide")
#cbind combines two tables
# acm_data = cbind(acm_data, results)
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
commute$Time[["id"]] = ACM_id
ACM_commutes <- rbind(ACM_commutes, commute$Time)
}
acm_df <- merge(acm_df, ACM_commutes, by = "id", all = TRUE)
#acm_df2
#ACM_commutes
#acm_df
acm_df
#
#n <- max(length(acm_df), length(ACM_commutes))
#length(acm_df) <- n
#length(ACM_commutes) <- n
#ACM_commutes
#
#acm_df <- cbind(acm_df, ACM_commutes)
# There will likely be a warning prompt because some corps members are roommates. The warning is because there are duplicate origin addresses.
# results = gmapsdistance(origin = acm_df[1:2,]$"Full Address", destination = school_df[1:2,]$"Address", mode = "driving", combinations = "all", shape = "wide")
#cbind combines two tables
# acm_data = cbind(acm_data, results)
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# Create an empty data frame that we will fill with commute times
acm_commutes <- data.frame(Ints=integer())
for (acm_id in acm_df[1:2,]$id){
# select just one row from acm_df, and assign it to a new object, acm_row
acm_row <- subset(acm_df, id == acm_id)
# feed that ACM's address and mode into the function 'gmapsdistance'. This will return a new object that is a single row of ACM's commute times to each of the schools. That row is held in a new object, 'commute'
commute = gmapsdistance(origin = acm_row$"Full Address", destination = school_df[1:2,]$"Address", mode = acm_row$"Method of Commute", combinations = "all", shape = "wide")
# create an 'id' column in our new 'commute' row that is the same as acm_id
commute$Time[["id"]] = acm_id
# add all single rows of commute data into a new data frame called acm_commutes. As this for-loop runs, this data frame grows to include all ACM's
acm_commutes <- rbind(acm_commutes, commute$Time)
}
acm_df <- merge(acm_df, acm_commutes, by = "id", all = TRUE)
acm_df
library("gmapsdistance")
library("readxl"")
library("gmapsdistance")
library("readxl")
for (for letter in "Caroline"){
for (letter in "Caroline"){
paste(letter, "oodle")
}
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# Add an index column for schools
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (requests to google maps API cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# Create an empty data frame that we will fill with commute times
acm_commutes <- data.frame(Ints=integer())
# Create a for loop that will read through each row of ACM data, feed it into the main function of our gmapsdistance package, and build a new data frame of commute info.
for (acm_id in acm_df[1:2,]$id){
# select just one row from acm_df, and assign it to a new object, acm_row
acm_row <- subset(acm_df, id == acm_id)
# feed that ACM's address and mode into the function 'gmapsdistance'. This will return a new object that is a single row of ACM commute times to each school. That row is assigned to a new object, 'commute'
commute = gmapsdistance(origin = acm_row$"Full Address", destination = school_df[1:2,]$"Address", mode = acm_row$"Method of Commute", combinations = "all", shape = "wide")
# create an 'id' column in our new 'commute' row that is the same as acm_id. We will use this to join our data frames.
commute$Time[["id"]] = acm_id
# as the for-loop runs, progressively add each single row of commute data into a new data frame called acm_commutes. As this for-loop runs, this data frame grows to include all ACM's.
acm_commutes <- rbind(acm_commutes, commute$Time)
}
# Finally, combine our original input 'acm_df' with our new data frame of commute times 'acm_commutes', and overwrite our original acm_df with this newly combined data frame.
acm_df <- merge(acm_df, acm_commutes, by = "id", all = TRUE)
