Runs[[1]]
Runs[[1]]$trace
tempplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = ratio)) +
geom_point()
}
tempplot(Run[[1]]$trace)
tempplot(Runs[[1]]$trace)
tempplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = ratio)) +
geom_point() +
coord_cartesian(ylim = c(0, 1e3))
}
tempplot(Runs[[1]]$trace)
tempplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = ratio)) +
geom_point() +
coord_cartesian(ylim = c(0, 1e1))
}
tempplot(Runs[[1]]$trace)
run_intermediate_annealing_process = function(starting_placements, school_df, best_placements=starting_placements, best_score=1e12, starting_iteration=1, number_of_iterations) {
#starting_placements = team_placements_df
#school_df = school_targets
#best_placements = team_placements_df
#best_score = 142078800000
#starting_iteration = 1
#number_of_iterations = 10000
#s_curve_amplitude = 4000
#s_curve_center = 0
#s_curve_width = 3000
team_placements_df <- starting_placements
placement_score <- calculate_score(team_placements_df, school_df)$aggr_score
trace <- data.frame(iter=c(1:number_of_iterations), score=0, temp=0, ratio=0)
trace[1, 2] <- placement_score
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, 3000, number_of_iterations * .1, number_of_iterations * .1)
candidate_placements_df <- team_placements_df
acms_no_Manual.Placement <- subset(candidate_placements_df, (is.na(candidate_placements_df$Manual.Placement)))
# Choose 2 schools at random
schools_to_swap = sample(school_df$sch_id, 2)
# Choose 1 ACM from each of those schools. Select only ACMs who have no Manual.Placement
swap1 = sample(acms_no_Manual.Placement$acm_id[ acms_no_Manual.Placement$placement == schools_to_swap[1] ], 1)
swap2 = sample(acms_no_Manual.Placement$acm_id[ acms_no_Manual.Placement$placement == schools_to_swap[2] ], 1)
swap_school_1 = acms_no_Manual.Placement$placement[acms_no_Manual.Placement$acm_id == swap1]
swap_school_2 = acms_no_Manual.Placement$placement[acms_no_Manual.Placement$acm_id == swap2]
# Swap the team assignment of those 2 ACMs - NOTE this is done by index, but we use acm_id as index
candidate_placements_df$placement[candidate_placements_df$acm_id == swap1] <- swap_school_2
candidate_placements_df$placement[candidate_placements_df$acm_id == swap2] <- swap_school_1
candidate_score = calculate_score(candidate_placements_df, school_df)
trace[i+1, 2] <- candidate_score$aggr_score
# Current implamentation of temperature never hits zero.
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
trace[i+1, 3] <- temp
trace[i+1, 4] <- ratio
if (runif(1) < ratio) {
team_placements_df = candidate_placements_df
placement_score = candidate_score$aggr_score
all_scores = candidate_score
if (placement_score < best_score) {
best_placements = team_placements_df
best_score = placement_score
best_score_diff = all_scores
}
}
}
# Merge in School characteristics
best_placements <- merge(best_placements, school_df, by.x = "placement", by.y = "sch_id", all.x = TRUE)
best_placements <- best_placements[order(best_placements$placement),]
return(list(best_placements=best_placements,
best_score=best_score,
diff_scores=best_score_diff,
trace=trace))
}
Current_Best_Runs <- Runs
library(doSNOW)
library(foreach)
cl <- makeCluster(8)
registerDoSNOW(cl)
Runs <- foreach(i=1:1) %dopar% {
library(dplyr)
library(tidyr)
print(system.time(placement(acm_enc, school_targets, 10000)))
placement(acm_enc, school_targets, 10000)
}
stopCluster(cl)
for (i in 1:10){
print(traceplot(Runs[[i]]$trace))
print(Runs[[i]]$best_score)
}
Runs[[1]]$trace
tempplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter)) +
geom_point(aes(y=ratio)) +
geom_point(aes(y=temp))
coord_cartesian(ylim = c(0, 1e1))
}
tempplot(Runs[[1]]$trace)
tempplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter)) +
geom_point(aes(y=ratio)) +
geom_point(aes(y=temp)) +
coord_cartesian(ylim = c(0, 1e1))
}
tempplot(Runs[[1]]$trace)
tempplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter)) +
#geom_point(aes(y=ratio)) +
geom_point(aes(y=temp)) +
coord_cartesian(ylim = c(0, 1e1))
}
tempplot(Runs[[1]]$trace)
exp(1/1)
exp(1/2)
exp(1/3)
exp(1/100)
exp(1/10000)
exp(2/10000)
exp(3/10000)
exp(-3/10000)
exp(-30/10000)
exp(-30/100)
exp(-30/10)
exp(-30/1)
exp(-30/10)
run_intermediate_annealing_process = function(starting_placements, school_df, best_placements=starting_placements, best_score=1e12, starting_iteration=1, number_of_iterations) {
#starting_placements = team_placements_df
#school_df = school_targets
#best_placements = team_placements_df
#best_score = 142078800000
#starting_iteration = 1
#number_of_iterations = 10000
#s_curve_amplitude = 4000
#s_curve_center = 0
#s_curve_width = 3000
team_placements_df <- starting_placements
placement_score <- calculate_score(team_placements_df, school_df)$aggr_score
trace <- data.frame(iter=c(1:number_of_iterations), score=0, temp=0, ratio=0)
trace[1, 2] <- placement_score
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, 3000, number_of_iterations * .1, number_of_iterations * .05)
candidate_placements_df <- team_placements_df
acms_no_Manual.Placement <- subset(candidate_placements_df, (is.na(candidate_placements_df$Manual.Placement)))
# Choose 2 schools at random
schools_to_swap = sample(school_df$sch_id, 2)
# Choose 1 ACM from each of those schools. Select only ACMs who have no Manual.Placement
swap1 = sample(acms_no_Manual.Placement$acm_id[ acms_no_Manual.Placement$placement == schools_to_swap[1] ], 1)
swap2 = sample(acms_no_Manual.Placement$acm_id[ acms_no_Manual.Placement$placement == schools_to_swap[2] ], 1)
swap_school_1 = acms_no_Manual.Placement$placement[acms_no_Manual.Placement$acm_id == swap1]
swap_school_2 = acms_no_Manual.Placement$placement[acms_no_Manual.Placement$acm_id == swap2]
# Swap the team assignment of those 2 ACMs - NOTE this is done by index, but we use acm_id as index
candidate_placements_df$placement[candidate_placements_df$acm_id == swap1] <- swap_school_2
candidate_placements_df$placement[candidate_placements_df$acm_id == swap2] <- swap_school_1
candidate_score = calculate_score(candidate_placements_df, school_df)
trace[i+1, 2] <- candidate_score$aggr_score
# Current implamentation of temperature never hits zero.
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
trace[i+1, 3] <- temp
trace[i+1, 4] <- ratio
if (runif(1) < ratio) {
team_placements_df = candidate_placements_df
placement_score = candidate_score$aggr_score
all_scores = candidate_score
if (placement_score < best_score) {
best_placements = team_placements_df
best_score = placement_score
best_score_diff = all_scores
}
}
}
# Merge in School characteristics
best_placements <- merge(best_placements, school_df, by.x = "placement", by.y = "sch_id", all.x = TRUE)
best_placements <- best_placements[order(best_placements$placement),]
return(list(best_placements=best_placements,
best_score=best_score,
diff_scores=best_score_diff,
trace=trace))
}
placement(acm_enc, school_targets, 1000)
library(doSNOW)
library(foreach)
cl <- makeCluster(8)
registerDoSNOW(cl)
Runs <- foreach(i=1:10) %dopar% {
library(dplyr)
library(tidyr)
print(system.time(placement(acm_enc, school_targets, 1000)))
placement(acm_enc, school_targets, 1000)
}
stopCluster(cl)
for (i in 1:10){
print(traceplot(Runs[[i]]$trace))
print(Runs[[i]]$best_score)
}
#View(Runs[[1]]$best_placements)
traceplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = score)) +
geom_point() +
coord_cartesian(ylim = c(0, 1e5))
}
for (i in 1:10){
print(traceplot(Runs[[i]]$trace))
print(Runs[[i]]$best_score)
}
traceplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = score)) +
geom_line() +
coord_cartesian(ylim = c(0, 1e5))
}
for (i in 1:10){
print(traceplot(Runs[[i]]$trace))
print(Runs[[i]]$best_score)
}
plot_curve <- function(iters){
# Derived these ratios based on the desired shape of the graph.
# Traits that were desirable were about 50% being highly volotile and the other half not.
# Wants to give it enough to to be conservative as well.
data <- data.frame(x = 1:iters, y = current_temperature(1:iters, 1000, iters * .1, iters * .05))
ggplot(data, aes(x, y)) +
geom_line()
}
plot_curve(10000)
run_intermediate_annealing_process = function(starting_placements, school_df, best_placements=starting_placements, best_score=1e12, starting_iteration=1, number_of_iterations) {
#starting_placements = team_placements_df
#school_df = school_targets
#best_placements = team_placements_df
#best_score = 142078800000
#starting_iteration = 1
#number_of_iterations = 10000
#s_curve_amplitude = 4000
#s_curve_center = 0
#s_curve_width = 3000
team_placements_df <- starting_placements
placement_score <- calculate_score(team_placements_df, school_df)$aggr_score
trace <- data.frame(iter=c(1:number_of_iterations), score=0, temp=0, ratio=0)
trace[1, 2] <- placement_score
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, 3000, number_of_iterations * .1, number_of_iterations * .05)
candidate_placements_df <- team_placements_df
acms_no_Manual.Placement <- subset(candidate_placements_df, (is.na(candidate_placements_df$Manual.Placement)))
# Choose 2 schools at random
schools_to_swap = sample(school_df$sch_id, 2)
# Choose 1 ACM from each of those schools. Select only ACMs who have no Manual.Placement
swap1 = sample(acms_no_Manual.Placement$acm_id[ acms_no_Manual.Placement$placement == schools_to_swap[1] ], 1)
swap2 = sample(acms_no_Manual.Placement$acm_id[ acms_no_Manual.Placement$placement == schools_to_swap[2] ], 1)
swap_school_1 = acms_no_Manual.Placement$placement[acms_no_Manual.Placement$acm_id == swap1]
swap_school_2 = acms_no_Manual.Placement$placement[acms_no_Manual.Placement$acm_id == swap2]
# Swap the team assignment of those 2 ACMs - NOTE this is done by index, but we use acm_id as index
candidate_placements_df$placement[candidate_placements_df$acm_id == swap1] <- swap_school_2
candidate_placements_df$placement[candidate_placements_df$acm_id == swap2] <- swap_school_1
candidate_score = calculate_score(candidate_placements_df, school_df)
trace[i+1, 2] <- candidate_score$aggr_score
# Current implamentation of temperature never hits zero.
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
trace[i+1, 3] <- temp
trace[i+1, 4] <- ratio
if (runif(1) < ratio) {
team_placements_df = candidate_placements_df
placement_score = candidate_score$aggr_score
all_scores = candidate_score
if (placement_score < best_score) {
best_placements = team_placements_df
best_score = placement_score
best_score_diff = all_scores
}
}
}
# Merge in School characteristics
best_placements <- merge(best_placements, school_df, by.x = "placement", by.y = "sch_id", all.x = TRUE)
best_placements <- best_placements[order(best_placements$placement),]
return(list(best_placements=best_placements,
best_score=best_score,
diff_scores=best_score_diff,
trace=trace))
}
for (i in 1:10){
print(traceplot(Runs[[i]]$trace))
print(Runs[[i]]$best_score)
}
traceplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = score)) +
geom_line() +
coord_cartesian(ylim = c(0, 1e10))
}
for (i in 1:10){
print(traceplot(Runs[[i]]$trace))
print(Runs[[i]]$best_score)
}
traceplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = score)) +
geom_line() +
coord_cartesian(ylim = c(0, 1e3))
}
traceplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = score)) +
geom_point() +
coord_cartesian(ylim = c(0, 1e3))
}
traceplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter, y = score)) +
geom_point() +
coord_cartesian(ylim = c(0, 1e3))
}
tempplot <- function(trace){
library(ggplot2)
ggplot(data = trace, aes(x = iter)) +
geom_point(aes(y=ratio)) +
geom_line(aes(y=temp)) +
coord_cartesian(ylim = c(0, 1e3))
}
for (i in 1:10){
print(traceplot(Runs[[i]]$trace))
print(tempplot(Runs[[i]]$trace))
print(Runs[[i]]$best_score)
}
library(doSNOW)
library(foreach)
cl <- makeCluster(8)
registerDoSNOW(cl)
Runs <- foreach(i=1:16) %dopar% {
library(dplyr)
library(tidyr)
#print(system.time(placement(acm_enc, school_targets, 25000)))
placement(acm_enc, school_targets, 25000)
}
run_intermediate_annealing_process = function(starting_placements, school_df, best_placements=starting_placements, best_score=1e12, starting_iteration=1, number_of_iterations, center_scale=0.1, width_scale=0.1) {
#starting_placements = team_placements_df
#school_df = school_targets
#best_placements = team_placements_df
#best_score = 142078800000
#starting_iteration = 1
#number_of_iterations = 10000
#s_curve_amplitude = 4000
#s_curve_center = 0
#s_curve_width = 3000
team_placements_df <- starting_placements
placement_score <- calculate_score(team_placements_df, school_df)$aggr_score
trace <- data.frame(iter=c(1:number_of_iterations), score=0, temp=0, ratio=0)
trace[1, 2] <- placement_score
for(i in 1:number_of_iterations) {
iter = starting_iteration + i
temp = current_temperature(iter, 3000, number_of_iterations * center_scale, number_of_iterations * width_scale)
candidate_placements_df <- team_placements_df
acms_no_Manual.Placement <- subset(candidate_placements_df, (is.na(candidate_placements_df$Manual.Placement)))
# Choose 2 schools at random
schools_to_swap = sample(school_df$sch_id, 2)
# Choose 1 ACM from each of those schools. Select only ACMs who have no Manual.Placement
swap1 = sample(acms_no_Manual.Placement$acm_id[ acms_no_Manual.Placement$placement == schools_to_swap[1] ], 1)
swap2 = sample(acms_no_Manual.Placement$acm_id[ acms_no_Manual.Placement$placement == schools_to_swap[2] ], 1)
swap_school_1 = acms_no_Manual.Placement$placement[acms_no_Manual.Placement$acm_id == swap1]
swap_school_2 = acms_no_Manual.Placement$placement[acms_no_Manual.Placement$acm_id == swap2]
# Swap the team assignment of those 2 ACMs - NOTE this is done by index, but we use acm_id as index
candidate_placements_df$placement[candidate_placements_df$acm_id == swap1] <- swap_school_2
candidate_placements_df$placement[candidate_placements_df$acm_id == swap2] <- swap_school_1
candidate_score = calculate_score(candidate_placements_df, school_df)
trace[i+1, 2] <- candidate_score$aggr_score
# Current implamentation of temperature never hits zero.
if (temp > 0) {
ratio = exp((placement_score - candidate_score$aggr_score) / temp)
} else {
ratio = as.numeric(candidate_score$aggr_score < placement_score)
}
trace[i+1, 3] <- temp
trace[i+1, 4] <- ratio
if (runif(1) < ratio) {
team_placements_df = candidate_placements_df
placement_score = candidate_score$aggr_score
all_scores = candidate_score
if (placement_score < best_score) {
best_placements = team_placements_df
best_score = placement_score
best_score_diff = all_scores
}
}
}
# Merge in School characteristics
best_placements <- merge(best_placements, school_df, by.x = "placement", by.y = "sch_id", all.x = TRUE)
best_placements <- best_placements[order(best_placements$placement),]
return(list(best_placements=best_placements,
best_score=best_score,
diff_scores=best_score_diff,
trace=trace))
}
runif(1, 1e-3, 1e-1)
1e-3
placement <- function(acm_enc, school_targets, number_iterations, center_scale, width_scale) {
team_placements_df <- initial_placement(acm_enc, school_targets)
output <- run_intermediate_annealing_process(starting_placements = team_placements_df, school_df = school_targets, best_placements = team_placements_df, best_score = 1e12, starting_iteration = 1, number_of_iterations = number_iterations, center_scale=center_scale, width_scale=width_scale)
}
Runs <- foreach(i=1:16) %dopar% {
library(dplyr)
library(tidyr)
#print(system.time(placement(acm_enc, school_targets, 25000)))
placement(acm_enc, school_targets, 1000, center_scale=runif(1, 1e-3, 0.25), width_scale=runif(1, 1e-3, 0.25))
}
library(doSNOW)
library(foreach)
cl <- makeCluster(8)
registerDoSNOW(cl)
Runs <- foreach(i=1:16) %dopar% {
library(dplyr)
library(tidyr)
#print(system.time(placement(acm_enc, school_targets, 25000)))
placement(acm_enc, school_targets, 1000, center_scale=runif(1, 1e-3, 0.25), width_scale=runif(1, 1e-3, 0.25))
}
stopCluster(cl)
for (i in 1:10){
print(traceplot(Runs[[i]]$trace))
print(tempplot(Runs[[i]]$trace))
print(Runs[[i]]$best_score)
}
#View(Runs[[1]]$best_placements)
install.packages("gridExtra")
library(gridExtra)
library(doSNOW)
library(foreach)
library(gridExtra)
cl <- makeCluster(8)
registerDoSNOW(cl)
Runs <- foreach(i=1:16) %dopar% {
library(dplyr)
library(tidyr)
#print(system.time(placement(acm_enc, school_targets, 25000)))
placement(acm_enc, school_targets, 15000, center_scale=runif(1, 1e-3, 0.25), width_scale=runif(1, 1e-3, 0.25))
}
stopCluster(cl)
for (i in 1:10){
ax <- traceplot(Runs[[i]]$trace)
bx <- tempplot(Runs[[i]]$trace)
print(grid.arrange(ax, bx, ncol=2))
print(Runs[[i]]$best_score)
}
#View(Runs[[1]]$best_placements)
for (i in 1:10){
ax <- traceplot(Runs[[i]]$trace)
bx <- tempplot(Runs[[i]]$trace)
plot(grid.arrange(ax, bx, ncol=2))
print(Runs[[i]]$best_score)
}
Runs[[7]]
bestPlacement <- Runs[[7]]$best_placements
View(bestPlacement)
team_placements_df <- initial_placement(acm_enc, school_targets)
View(team_placements_df)
team_placements = list()
for (x in school_targets$sch_id){
team_slots = list(
# create a list that repeats each school 'id' for the size of each team
rep(x,
subset(school_targets$size, school_targets$sch_id == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- data.frame(placement=unlist(team_placements))
slots <- nrow(team_placements)
filled_acm_roster <- c(acm_enc$acm_id, 9000:(9000 + slots - nrow(acm_enc) - 1))
team_placements_df <- data.frame(placement=team_placements[sample(nrow(team_placements), replace=F), ],
acm_id= filled_acm_roster)
View(team_placements_df)
team_placements_df <- left_join(team_placements_df, acm_enc, by = "acm_id") %>%
replace_na(replace = list(Math.Confidence = 0, Ed_HS = 0, Ed_SomeCol = 0, Ed_Col = 0,
HasTutored = 0, SpanishAble = 0, Lang_Other = 0, Male = 0,
Other.Gender =0, Race.Ethnicity.Hispanic = 0,
Race.Ethnicity.Asian = 0, Race.Ethnicity.White = 0,
Race.Ethnicity.Black = 0, days_old = 0))
sch_id_names <- school_df[, c("sch_id", "School")]
colnames(sch_id_names) <- c("Manual.Placement_id", "School.Name")
team_placements_df <- merge(team_placements_df, sch_id_names, by.x = "Manual.Placement", by.y = "School.Name", all.x = TRUE)
acms_with_Manual.Placement <- subset(team_placements_df, (!is.na(team_placements_df$Manual.Placement)))
acms_no_Manual.Placement <- subset(team_placements_df, (is.na(team_placements_df$Manual.Placement)))
View(acms_no_Manual.Placement)
View(acms_with_Manual.Placement)
for (x in acms_with_Manual.Placement$acm_id){
#x <- 345
acm_row <- subset(acms_with_Manual.Placement, acms_with_Manual.Placement$acm_id == x)
# Choose 1 acm_id currently assigned to the school at which we want to ensure manual placement is honored
acm_id_to_swap <- sample( subset( acms_no_Manual.Placement$acm_id, acms_no_Manual.Placement$placement == acm_row$Manual.Placement_id ), 1 )
# Swap the team assignment of those 2 ACMs
swap1 <- acm_row$placement # School of the ACM with a Manual Placement
swap2 <- team_placements_df[team_placements_df$acm_id == acm_id_to_swap, ]$placement # School of ACM at the target school for manual placement
team_placements_df[team_placements_df$acm_id == acm_id_to_swap, ]$placement <- swap1
team_placements_df[team_placements_df$acm_id == acm_row$acm_id, ]$placement <- swap2
}
View(team_placements_df)
acms_with_Manual.Placement <- subset(team_placements_df, (!is.na(team_placements_df$Manual.Placement)))
