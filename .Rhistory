# Identify rates of Tutoring Experience
distros$tut_exp <- group_by(acm_enc, HasTutored) %>%
summarise(count=n()) %>%
mutate(ratio = count/N)
# Spanish and other spoken language distribution
distros$lang <- data.frame(ability = c("other"), ratio = c(nrow(acm_enc[acm_enc$Lang_Other == 1, ]) / N))
# Math Ability
distros$math <- nrow(acm_enc[acm_enc$Math_Confidence == 1,]) / N
# Note on tutoring pref.  We'll simply set this parameter to the team size appropriate for the level type.  This should thus maximize the incentive on putting folks with the appropriate tutoring pref at the appropriate levels.
distros
}
# I derived this function mildly arbitrarily. The logic is that we probably want at least one spanish speaker at a school, but there are then diminishing returns.  It scales so that for a school that 100% hispanic, we would aim to have 5 spanish speakers on the team.  A team thats 50% hispanic will aim to have 4. The main problem with this approach is that we may create too many spots for spanish speakers, or have not have enough spanish speakers for the intended spots.
spanishNeed <- function(x) {
1.5772*log(x) - 2.1205
}
# Directly calculates the expected number of ACMs per team for each of the markers.
# My methodology is to aim for a uniform distribution when it makes sense.
school_config <- function(school_df, acm_enc){
# Precalculate some helpful counts
corps_demos <- corps_demographic_targets(school_df, acm_enc)
# Unravel list into some variables.  Mostly so that the code is a little cleaner later.
education <- corps_demos$education
lang <- corps_demos$lang
tut_exp <- corps_demos$tut_exp
math <- corps_demos$math
school.data <- select(school_df, `sch_id`, `Team Size`, `School Type`, `% Caucasian`:`% N/A`) %>%
rename(size = `Team Size`,
span = `School Type`) %>%
mutate(HSGrad_tgt = ifelse(span=="HS", 0, education[education$level %in% 'HS',]$ratio * size),
SomeCol_tgt = education[education$level %in% 'SomeCol',]$ratio * size,
SpanPref_ES = ifelse(span=="ES", size, 0),
SpanPref_MS = ifelse(span=="MS", size, 0),
SpanPref_HS = ifelse(span=="HS", size, 0),
TutExp = size * tut_exp[tut_exp$HasTutored == 1,]$ratio,
SpanishNeed = pmax(spanishNeed(`% Hispanic`), 1),# This sets a minimum of 1 spanish speaker per team.  This might make sense in LA, but not other places.
OtherLang_tgt = lang[lang$ability %in% 'other',]$ratio * size,
Math_tgt = ifelse(span=="ES", size*.5*math, ifelse(span=="MS", .75*size*math, size*math)))
}
# Initial Team Placements
# Assumption: the number of ACMs in acm_df is exactly the same as the number of team slots
initial_placement <- function(acm_enc, school_targets){
# First place acm's at schools designated by Manual.Placement column
# NOTE: Removed seed parameter.  Seed is used for reproducability, but we want randomness in the start.
# first create an empty list
team_placements = list()
# use a for-loop to read each team size
for (x in 1:nrow(school_targets)){
team_slots = list(
# create a list that repeats each school 'id' for the size of each team
rep(x,
subset(school_targets$size, school_targets$sch_id == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- data.frame(placement=unlist(team_placements))
# Randomize Starting Place
#set.seed(seed)
team_placements_df <- data.frame(placement=team_placements[sample(nrow(team_placements), replace=F), ],
acm_id= 1:nrow(team_placements))
# Merge team_placements_df with acm_df on the 'id' column
team_placements_df <- merge(acm_enc, team_placements_df, by = "acm_id", all.x = TRUE)
# Honor Manual Placements
sch_id_names <- school_df[, c("sch_id", "School Name")]
colnames(sch_id_names) <- c("Manual.Placement_id", "School.Name")
team_placements_df <- merge(team_placements_df, sch_id_names, by.x = "Manual.Placement", by.y = "School.Name", all.x = TRUE)
team_placements_df <- team_placements_df[order(team_placements_df$acm_id), ]
rownames(team_placements_df) <- 1:nrow(team_placements_df)
acms_with_Manual.Placement <- team_placements_df$acm_id[!is.na(team_placements_df$Manual.Placement_id)]
acms_no_Manual.Placement <- team_placements_df[is.na(team_placements_df$Manual.Placement_id), ]
for (x in acms_with_Manual.Placement){
acm_row <- team_placements_df[team_placements_df$acm_id == x, ]
acm_row_placement <- acm_row$Manual.Placement_id
# Choose 1 acm_id currently assigned to the school at which we want to ensure manual placement is honored
eligible_acms_for_swap = acms_no_Manual.Placement[acms_no_Manual.Placement$placement == acm_row_placement, ]
acm_id_to_swap <- sample( eligible_acms_for_swap$acm_id, 1 )
# Swap the team assignment of those 2 ACMs
swap1 <- acm_row$acm_id
swap2 <- acm_id_to_swap
team_placements_df$placement <- replace(team_placements_df$placement, c(swap1, swap2), team_placements_df$placement[c(swap2, swap1)])
team_placements_df <- team_placements_df[order(team_placements_df$acm_id), ]
rownames(team_placements_df) <- 1:nrow(team_placements_df)
}
# if prevent_roommates = "Yes"
# Remove Roommates from being on the same team
# Check each team for roommates
# For each placement with roommats
#   randomly choose (N - 1) ACMs to move to other teams
#   for x in N-1 acm_id
#     randomly choose other team
#     randomly choose acm_id from that team (remember not to choose an acm with manual placement)
#     swap
# for each
## We would like to ensure that high school students get placed in ES or MS
#acms_for_swaps <- merge(team_placements_df[is.na(team_placements_df$Manual.Placement_id), ], school_targets, by.x = "placement", by.y = "sch_id", all.x = TRUE)
#
##print(acms_for_swaps)
#
#hs_acms_to_swap <- acms_for_swaps[(acms_for_swaps$Ed_HS == 1) & (acms_for_swaps$span == "HS"),]
#acms_to_swap_with <- acms_for_swaps[(acms_for_swaps$Ed_HS == 0) & (acms_for_swaps$span != "HS"),]
#acms_to_swap_with <- acms_to_swap_with[sample(nrow(acms_to_swap_with), nrow(hs_acms_to_swap), replace=F), ]
#
#team_placements_df[team_placements_df$acm_id %in% hs_acms_to_swap$acm_id, ]$placement = acms_to_swap_with$placement
#team_placements_df[team_placements_df$acm_id %in% acms_to_swap_with$acm_id, ]$placement = hs_acms_to_swap$placement
return(team_placements_df)
}
team_placements_df <- initial_placement(acm_enc, school_targets)
team_placements_df$placement_diff = team_placements_df$Manual.Placement_id - team_placements_df$placement
mean(team_placements_df$acm_id[!is.na(team_placements_df$placement_diff)])
team_placements_df <- team_placements_df[-order(team_placements_df$acm_id), ]
team_placements_df
team_placements_df <- initial_placement(acm_enc, school_targets)
team_placements_df
team_placements_df[order(-team_placements_df$acm_id), ]
team_placements_df <- initial_placement(acm_enc, school_targets)
team_placements_df$placement_diff = team_placements_df$Manual.Placement_id - team_placements_df$placement
mean(team_placements_df$acm_id[!is.na(team_placements_df$placement_diff)])
team_placements_df$acm_id[!is.na(team_placements_df$placement_diff)]
team_placements_df <- initial_placement(acm_enc, school_targets)
team_placements_df$placement_diff = team_placements_df$Manual.Placement_id - team_placements_df$placement
team_placements_df$acm_id[!is.na(team_placements_df$placement_diff)]
team_placements_df <- initial_placement(acm_enc, school_targets)
team_placements_df
team_placements_df$acm_id[team_placements_df$placement_diff > 0]
team_placements_df
team_placements_df$placement_diff = team_placements_df$Manual.Placement_id - team_placements_df$placement
team_placements_df
team_placements_df$acm_id[team_placements_df$placement_diff != 0]
team_placements_df$acm_id[team_placements_df$placement_diff != 0, ]
team_placements_df <- initial_placement(acm_enc, school_targets)
team_placements_df$placement_diff = team_placements_df$Manual.Placement_id - team_placements_df$placement
team_placements_df$acm_id[team_placements_df$placement_diff != 0]
team_placements_df <- initial_placement(acm_enc, school_targets)
team_placements_df$placement_diff = team_placements_df$Manual.Placement_id - team_placements_df$placement
team_placements_df$acm_id[team_placements_df$placement_diff != 0]
!is.na(test)
test <- team_placements_df$acm_id[team_placements_df$placement_diff != 0]
!is.na(test)
test[!is.na(test)]
mean(test[!is.na(test)])
team_placements_df <- initial_placement(acm_enc, school_targets)
team_placements_df$placement_diff = team_placements_df$Manual.Placement_id - team_placements_df$placement
test <- team_placements_df$acm_id[team_placements_df$placement_diff != 0]
mean(test[!is.na(test)])
team_placements_df <- initial_placement(acm_enc, school_targets)
team_placements_df$placement_diff = team_placements_df$Manual.Placement_id - team_placements_df$placement
test <- team_placements_df$acm_id[team_placements_df$placement_diff != 0]
mean(test[!is.na(test)])
team_placements_df <- initial_placement(acm_enc, school_targets)
team_placements_df$placement_diff = team_placements_df$Manual.Placement_id - team_placements_df$placement
test <- team_placements_df$acm_id[team_placements_df$placement_diff != 0]
mean(test[!is.na(test)])
team_placements_df <- initial_placement(acm_enc, school_targets)
team_placements_df$placement_diff = team_placements_df$Manual.Placement_id - team_placements_df$placement
test <- team_placements_df$acm_id[team_placements_df$placement_diff != 0]
mean(test[!is.na(test)])
test[!is.na(test)]
team_placements_df
team_placements_df<-team_placements_df[order(-team_placements_df$acm_id), ]
team_placements_df
rownames(team_placements_df) <- 1:nrow(team_placements_df)
team_placements_df
# This portion looks different in Power BI
root_dir = "C:\\Users\\perus\\OneDrive\\Documents\\GitHub\\ACM-School-Placement\\"
root_dir = "C:\\Users\\CLuedtke\\ACM-School-Placement\\"
# In Power BI the source is "survey_export.csv" because that's a more accurate representation of a real survey implementation with messy headers and all. "Input 1 - ACM Data.csv" holds the same data, but with clean headers.
acm_df <- read.csv(file = paste(root_dir, "Input 1 - ACM Data.csv", sep = ""))
# This part not necessary in PowerBI, since dates are read in as %m/%d/%Y already
# acm_df$Birth.Date <- format(as.Date(acm_df$Birth.Date), "%m/%d/%Y")
# This line mimics Power BI's behavior
dataset <- acm_df
# How this portion appears in Power BI:
# 'dataset' holds the input data for this script
#
# acm_df <- dataset
#
# vars_df <- data.frame(
#   PowerBI.Survey.Items = c(
#     "Date Submitted",
#     "City",
#     "State/Region",
#     "Full name:",
#     "If applicable, preferred name(s):Â ",
#     "What is your date of birth?",
#     "City Year Site:What site will you serve with, and did you attend a City Year school at that site? (choose from # the list of schools)",
#     "School:What site will you serve with, and did you attend a City Year school at that site? (choose from the list # of schools)",
#     "What gender do you identify with?",
#     "African American/Black:What is your race/ethnicity (choose all that apply)",
#     "American Indian/Alaskan Native:What is your race/ethnicity (choose all that apply)",
#     "Asian:What is your race/ethnicity (choose all that apply)",
#     "Hispanic/Latino:What is your race/ethnicity (choose all that apply)",
#     "Middle Eastern:What is your race/ethnicity (choose all that apply)",
#     "Native Hawaiian or Pacific Islander:What is your race/ethnicity (choose all that apply)",
#     "White/Caucasian:What is your race/ethnicity (choose all that apply)",
#     "Other - Write In:What is your race/ethnicity (choose all that apply)",
#     "What is the highest level of education you have achieved?",
#     "Other - Write In:What is the highest level of education you have achieved?",
#     "Are you able to tutor and mentor students while speaking a language other than English?",
#     "Arabic:Other language",
#     "Cape Verdean Creole :Other language",
#     "Chinese (Cantonese):Other language",
#     "Chinese (Mandarin):Other language",
#     "Haitian Creole:Other language",
#     "French:Other language",
#     "Nepali:Other language",
#     "Polish:Other language",
#     "Spanish:Other language",
#     "Swahili:Other language",
#     "Urdu:Other language",
#     "Vietnamese:Other language",
#     "Other - Write In (Required):Other language",
#     "Do you have teaching or tutoring experience?",
#     "Months Teaching",
#     "Elementary school (K-5):What grade level(s) have you worked with in the past? Please select all that apply.",
#     "Middle school (6-8):What grade level(s) have you worked with in the past? Please select all that apply.",
#     "High school (9-12):What grade level(s) have you worked with in the past? Please select all that apply.",
#     "Do you have a teaching credential?",
#     "Elementary school:Which grade levels would you prefer to work with?",
#     "Middle school:Which grade levels would you prefer to work with?",
#     "High school:Which grade levels would you prefer to work with?",
#     "Would you prefer to support with ELA/literacy or math?",
#     "Please indicate the highest level of math in which you are confident in your skills.",
#     "Do you know where you will be living during the 2017-2018 school year?",
#     "Street address Line 1:SYAddress",
#     "Street address line 2:SYAddress",
#     "City:SYAddress",
#     "State:SYAddress",
#     "Zip:SYAddress",
#     "Will you be living with other City Year AmeriCorps members during the school year?:SYAddress",
#     "If so, please list their first and last names here::SYAddress",
#     "How will you travel to your school site?"
#   ),
#   Variable.Name = c(
#     "Date.Submitted",
#     "City",
#     "State.Region",
#     "Full.Name",
#     "Pref.Name",
#     "Birth.Date",
#     "Site.Name",
#     "Attnd.CY.School",
#     "Gender",
#     "Race.Ethnicity.African.American.Black",
#     "Race.Ethnicity.American.Indian.Alaskan.Native",
#     "Race.Ethnicity.Asian",
#     "Race.Ethnicity.Hispanic.Latino",
#     "Race.Ethnicity.Middle.Eastern",
#     "Race.Ethnicity.Native.Hawaiian.Pacific.Islander",
#     "Race.Ethnicity.White.Caucasian",
#     "Race.Ethnicity.Other",
#     "Educational.Attainment",
#     "Educational.Attainment.WriteIn",
#     "Language.Other.English",
#     "Language.Ability.Arabic",
#     "Language.Ability.CapeVerdeanCreole",
#     "Language.Ability.Chinese.Cantonese",
#     "Language.Ability.Chinese.Mandarin",
#     "Language.Ability.HaitianCreole",
#     "Language.Ability.French",
#     "Language.Ability.Nepali",
#     "Language.Ability.Polish",
#     "Language.Ability.Spanish",
#     "Language.Ability.Swahili",
#     "Language.Ability.Urdu",
#     "Language.Ability.Vietnamese",
#     "Language.Ability.Other",
#     "Tutoring.Experience",
#     "Tutoring.Experience.Months",
#     "Tutoring.Experience.ES",
#     "Tutoring.Experience.MS",
#     "Tutoring.Experience.HS",
#     "Teaching.Credential",
#     "Grade.Lvl.Pref.ES",
#     "Grade.Lvl.Pref.MS",
#     "Grade.Lvl.Pref.HS",
#     "Tutoring.Preference",
#     "Math.Confidence",
#     "Know.Living",
#     "Res.Address.Line.1",
#     "Res.Address.Line.2",
#     "Res.City",
#     "Res.State",
#     "Res.Postal.Code",
#     "Roomates",
#     "Roommate.Names",
#     "Travel.Method"
#   ),
#   stringsAsFactors=FALSE
#   )
#
# for (x in names(acm_df)){
#   try(names(acm_df)[names(acm_df) == x] <- vars_df$`Variable.Name`[vars_df$`PowerBI.Survey.Items` == x])
# }
# Dataframe of all ACMs who mentioned roommates or were mentioned by others
roommates_df = acm_df[acm_df$Roomates == 'Yes'
| acm_df$Full.Name %in% acm_df$Roommate.Names1
| acm_df$Full.Name %in% acm_df$Roommate.Names2
| acm_df$Full.Name %in% acm_df$Roommate.Names3
| acm_df$Full.Name %in% acm_df$Roommate.Names4, ]
roommates_df[] <- lapply(roommates_df, as.character)
acm_df$Roommate.Names1 = as.character(acm_df$Roommate.Names1)
acm_df$Roommate.Names2 = as.character(acm_df$Roommate.Names2)
acm_df$Roommate.Names3 = as.character(acm_df$Roommate.Names3)
acm_df$Roommate.Names4 = as.character(acm_df$Roommate.Names4)
for (x in roommates_df$Full.Name){
# select other rows containing ACM name
#roommates_df$Full.Name == x
# Select any rows containing ACM name
other_roommates = subset(roommates_df, apply(roommates_df, 1, function(y){any(y == x)}))
# Select unique roommate names
roommates_list = unique(c(other_roommates$Full.Name,
other_roommates$Roommate.Names1,
other_roommates$Roommate.Names2,
other_roommates$Roommate.Names3,
other_roommates$Roommate.Names4))
#Sort alphabetically and remove NAs
roommate_list = sort(roommates_list[!is.na(roommates_list)])
acm_df$Roommate.Names1[roommates_df$Full.Name == x] = roommate_list[1]
acm_df$Roommate.Names2[roommates_df$Full.Name == x] = roommate_list[2]
acm_df$Roommate.Names3[roommates_df$Full.Name == x] = roommate_list[3]
acm_df$Roommate.Names4[roommates_df$Full.Name == x] = roommate_list[4]
#roommates_df$Roomies[roommates_df$Full.Name == x] = paste(sort(roommates_list[!is.na(roommates_list)]), collapse=", ")
}
#  Encode Variables & Clean Up Input Dataframes
#Before being able to calculate a score, we'll need to encode all of our variables numerically.  For categorical ## variables, we can create a dummy variable for all except one of the categories (this is because the last category can be inferred).
# This function takes the input acm_df and encodes the variables in a way that makes the mathematically tractable.
library(dplyr)
library(tidyr)
acm_df <- dataset
encode_acm_df <- function(df){
acm_enc <- select(df, acm_id)
# Ed Attainment
acm_enc$Ed_HS <- as.numeric(grepl("High School/GED", df$Educational.Attainment))
acm_enc$Ed_SomeCol <- grepl("Some College", df$Educational.Attainment) + grepl("Associate's Degree", df$Educational.Attainment)
acm_enc$Ed_Col <- grepl("Bachelor's Degree", df$Educational.Attainment) + grepl("Master's Degree", df$Educational.Attainment)
# Tutoring Experience
acm_enc$HasTutored <- ifelse(df$Tutoring.Experience == "Yes", 1, 0)
# Tutoring Preference
acm_enc$Pref_HS <- ifelse(df$Grade.Lvl.Pref.HS == "High School", 1, 0)
acm_enc$Pref_MS <- ifelse(df$Grade.Lvl.Pref.MS == "Middle School", 1, 0)
acm_enc$Pref_ES <- ifelse(df$Grade.Lvl.Pref.ES == "Elementary School", 1, 0)
# Math Proficiency
acm_enc$Math_Confidence <- ifelse(df$Math.Confidence == "Pre-Algebra or lower" | df$Math.Confidence == "Algebra I", 0, 1)
# Language Ability
acm_enc$SpanishAble <- ifelse(df$Language.Ability.Spanish == "Spanish", 1, 0)
acm_enc$SpanishAble[is.na(acm_enc$SpanishAble)] <- 0
acm_enc$Lang_Other <- ifelse((df$Language.Other.English == "Yes") & (is.na(df$Language.Ability.Spanish != "Spanish")), 1, 0)
# Add in other features
acm_enc <- acm_enc %>%
left_join(., select(acm_df,
acm_id,
Gender,
Manual.Placement,
Birth.Date,
Race.Ethnicity.African.American.Black:Race.Ethnicity.Other),
by=c("acm_id" = "acm_id")) %>%
replace_na(list(Pref_HS = 0, Pref_MS = 0, Pref_ES = 0,
Lang_Other = 0)) %>%
mutate(days_old = as.integer(Sys.Date() - as.Date(as.character(df$Birth.Date), format="%m/%d/%Y")))
acm_enc$days_old[is.na(acm_enc$days_old)] <- 0
# Return
acm_enc
}
acm_enc <- encode_acm_df(acm_df)
dataset <- acm_enc
# 'dataset' holds the input data for this script
# changed days_old calculation to expect format="%m/%d/%Y"
number_of_iterations = 10
#root_dir = "C:\\Users\\perus\\OneDrive\\Documents\\GitHub\\ACM-School-Placement\\"
library(gmapsdistance)
library(readxl)
library(dplyr)
library(tidyr)
library(data.table)
library(dummies)
library(doSNOW)
# Loading this gave errors in Power BI
#library(doParallel)
acm_enc <- dataset
acm_commutes <- read_excel(path = paste(root_dir, "Input 2 - ACM Commutes.xlsx", sep = ""))
school_df <- read_excel(path = paste(root_dir, "Input 3 - School Data.xls", sep = ""))
# Add id columns
acm_commutes$acm_id <- 1:nrow(acm_commutes)
school_df$sch_id <- 1:nrow(school_df)
# Commute times in long format will be easier to index and subset. This can be accomplished in the output of "gmapsdistance" function later.
acm_commutes_long <-
select(acm_commutes, -or) %>%
gather(dest, dist, -acm_id) %>%
mutate(id_dest = paste(acm_id, dest, sep = "_"))
# This function calculates some import counts which I'm going to use a lot when trying to figure out the expected number of ACMs per team per metric.  This function will just be used internally by the school_config function.
corps_demographic_targets <- function(school_df, acm_enc){
# Calculate some totals used later in the function
N <- nrow(acm_enc)
S <- nrow(school_df)
# Counts of schools by level
school_counts <- group_by(school_df, `School Type`) %>% summarise(count=n())
# Approximation of densly spanish speaking schools
dense_hispanic <- nrow(school_df[school_df$`% Hispanic` > 10, ])
# We'll store our results in a list so we can return multiple tables
distros <- list()
# Produce ratio of folks who have completed at least an associates, and those who haven't
distros$education <- data.frame(level = c("HS", "SomeCol"), ratio = c(nrow(acm_enc[acm_enc$Ed_HS == 1,]) / N, nrow(acm_enc[acm_enc$Ed_SomeCol == 1,]) / N))
# Identify rates of Tutoring Experience
distros$tut_exp <- group_by(acm_enc, HasTutored) %>%
summarise(count=n()) %>%
mutate(ratio = count/N)
# Spanish and other spoken language distribution
distros$lang <- data.frame(ability = c("other"), ratio = c(nrow(acm_enc[acm_enc$Lang_Other == 1, ]) / N))
# Math Ability
distros$math <- nrow(acm_enc[acm_enc$Math_Confidence == 1,]) / N
# Note on tutoring pref.  We'll simply set this parameter to the team size appropriate for the level type.  This should thus maximize the incentive on putting folks with the appropriate tutoring pref at the appropriate levels.
distros
}
# I derived this function mildly arbitrarily. The logic is that we probably want at least one spanish speaker at a school, but there are then diminishing returns.  It scales so that for a school that 100% hispanic, we would aim to have 5 spanish speakers on the team.  A team thats 50% hispanic will aim to have 4. The main problem with this approach is that we may create too many spots for spanish speakers, or have not have enough spanish speakers for the intended spots.
spanishNeed <- function(x) {
1.5772*log(x) - 2.1205
}
# Directly calculates the expected number of ACMs per team for each of the markers.
# My methodology is to aim for a uniform distribution when it makes sense.
school_config <- function(school_df, acm_enc){
# Precalculate some helpful counts
corps_demos <- corps_demographic_targets(school_df, acm_enc)
# Unravel list into some variables.  Mostly so that the code is a little cleaner later.
education <- corps_demos$education
lang <- corps_demos$lang
tut_exp <- corps_demos$tut_exp
math <- corps_demos$math
school.data <- select(school_df, `sch_id`, `Team Size`, `School Type`, `% Caucasian`:`% N/A`) %>%
rename(size = `Team Size`,
span = `School Type`) %>%
mutate(HSGrad_tgt = ifelse(span=="HS", 0, education[education$level %in% 'HS',]$ratio * size),
SomeCol_tgt = education[education$level %in% 'SomeCol',]$ratio * size,
SpanPref_ES = ifelse(span=="ES", size, 0),
SpanPref_MS = ifelse(span=="MS", size, 0),
SpanPref_HS = ifelse(span=="HS", size, 0),
TutExp = size * tut_exp[tut_exp$HasTutored == 1,]$ratio,
SpanishNeed = pmax(spanishNeed(`% Hispanic`), 1),# This sets a minimum of 1 spanish speaker per team.  This might make sense in LA, but not other places.
OtherLang_tgt = lang[lang$ability %in% 'other',]$ratio * size,
Math_tgt = ifelse(span=="ES", size*.5*math, ifelse(span=="MS", .75*size*math, size*math)))
}
# Initial Team Placements
# Assumption: the number of ACMs in acm_df is exactly the same as the number of team slots
initial_placement <- function(acm_enc, school_targets){
# First place acm's at schools designated by Manual.Placement column
# NOTE: Removed seed parameter.  Seed is used for reproducability, but we want randomness in the start.
# first create an empty list
team_placements = list()
# use a for-loop to read each team size
for (x in 1:nrow(school_targets)){
team_slots = list(
# create a list that repeats each school 'id' for the size of each team
rep(x,
subset(school_targets$size, school_targets$sch_id == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- data.frame(placement=unlist(team_placements))
# Randomize Starting Place
#set.seed(seed)
team_placements_df <- data.frame(placement=team_placements[sample(nrow(team_placements), replace=F), ],
acm_id= 1:nrow(team_placements))
# Merge team_placements_df with acm_df on the 'id' column
team_placements_df <- merge(acm_enc, team_placements_df, by = "acm_id", all.x = TRUE)
# Honor Manual Placements
sch_id_names <- school_df[, c("sch_id", "School Name")]
colnames(sch_id_names) <- c("Manual.Placement_id", "School.Name")
team_placements_df <- merge(team_placements_df, sch_id_names, by.x = "Manual.Placement", by.y = "School.Name", all.x = TRUE)
team_placements_df <- team_placements_df[order(team_placements_df$acm_id), ]
rownames(team_placements_df) <- 1:nrow(team_placements_df)
acms_with_Manual.Placement <- team_placements_df$acm_id[!is.na(team_placements_df$Manual.Placement_id)]
acms_no_Manual.Placement <- team_placements_df[is.na(team_placements_df$Manual.Placement_id), ]
for (x in acms_with_Manual.Placement){
acm_row <- team_placements_df[team_placements_df$acm_id == x, ]
acm_row_placement <- acm_row$Manual.Placement_id
# Choose 1 acm_id currently assigned to the school at which we want to ensure manual placement is honored
eligible_acms_for_swap = acms_no_Manual.Placement[acms_no_Manual.Placement$placement == acm_row_placement, ]
acm_id_to_swap <- sample( eligible_acms_for_swap$acm_id, 1 )
# Swap the team assignment of those 2 ACMs
swap1 <- acm_row$acm_id
swap2 <- acm_id_to_swap
team_placements_df$placement <- replace(team_placements_df$placement, c(swap1, swap2), team_placements_df$placement[c(swap2, swap1)])
team_placements_df <- team_placements_df[order(team_placements_df$acm_id), ]
rownames(team_placements_df) <- 1:nrow(team_placements_df)
}
# if prevent_roommates = "Yes"
# Remove Roommates from being on the same team
# Check each team for roommates
# For each placement with roommats
#   randomly choose (N - 1) ACMs to move to other teams
#   for x in N-1 acm_id
#     randomly choose other team
#     randomly choose acm_id from that team (remember not to choose an acm with manual placement)
#     swap
# for each
## We would like to ensure that high school students get placed in ES or MS
#acms_for_swaps <- merge(team_placements_df[is.na(team_placements_df$Manual.Placement_id), ], school_targets, by.x = "placement", by.y = "sch_id", all.x = TRUE)
#
##print(acms_for_swaps)
#
#hs_acms_to_swap <- acms_for_swaps[(acms_for_swaps$Ed_HS == 1) & (acms_for_swaps$span == "HS"),]
#acms_to_swap_with <- acms_for_swaps[(acms_for_swaps$Ed_HS == 0) & (acms_for_swaps$span != "HS"),]
#acms_to_swap_with <- acms_to_swap_with[sample(nrow(acms_to_swap_with), nrow(hs_acms_to_swap), replace=F), ]
#
#team_placements_df[team_placements_df$acm_id %in% hs_acms_to_swap$acm_id, ]$placement = acms_to_swap_with$placement
#team_placements_df[team_placements_df$acm_id %in% acms_to_swap_with$acm_id, ]$placement = hs_acms_to_swap$placement
return(team_placements_df)
}
team_placements_df <- initial_placement(acm_enc, school_targets)
team_placements_df$placement_diff = team_placements_df$Manual.Placement_id - team_placements_df$placement
test <- team_placements_df$acm_id[team_placements_df$placement_diff != 0]
test[!is.na(test)]
