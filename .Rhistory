head(dt_commutes)
View(team_placements_df)
class(team_placements_df)
View(dt_commutes)
id_dest
head(acm_commutes)
# Chris
## Chris: We want the following characteristics to be represented evenly across teams. We calculate ratios  for the # entire corps, and later calculate how well each team matches these ratios.
gender.ratio.ideal <- with(acm_df, sum(Gender == "Male")/sum(Gender == "Female"))
# age -
# ethnicity
# attend local school, CY or local
# roommates? not necessary?
# Alex
# educational attainment (potentially different goals for HS/ES)
# tutoring experience (look at notes from survey)
# tutoring preference
# grade level preference
# language speaking
PickTime <- function(myid, myplace){subset(acm_commutes,
subset = id == myid,
select = myplace+1)}
## Characteristics that we don't want to be even across all schools
# edu.attainment.hs.ideal <-
# edu.attainment.es.ideal <-
# spanish
# Commute times in long format will be easier to index and subset
acm_commutes_long <-
select(acm_commutes, -or) %>%
gather(dest, dist, -id) %>%
mutate(id_dest = paste(id, dest, sep = "_"))
calculate_score = function(acm_df, team_placements_df) {
## Convert the team_placement list into a dataframe with an 'id' column
# team_placements_df <- data.frame(id = 1:length(team_placements),
#                                 Team.Placement = team_placements)
## New! Convert the team_placement list into a dataframe with an 'id' column
# team_placements_df <- data.frame(id = 1:length(team_placements),
#                                  Team.Placement = team_placements,
#                                  dest = colnames(acm_commutes)[team_placements + 1]) %>%
#   within(id_dest <- paste(id, dest, sep = "_"))
# Merge team_placements_df with acm_df on the 'id' column we just created
acm_df_with_placements <- merge(acm_df, team_placements_df, by = "id", all.x = TRUE)
# Merge acm_df_with_placements with school_df to pull in school characteristics
acm_df_with_placements <- merge(acm_df_with_placements, school_df, by.x = "placement", by.y = "id", all.x = TRUE)
#Placement.Scores <-
#  group_by(acm_df_with_placements, Team.Placement) %>%
#  summarize(gender.ratio = sum(Gender == "Male")/sum(Gender == "Female"),
#            age.var = var(Age)) %>%
#  mutate(gender.ratio.dev = abs(gender.ratio - gender.ratio.ideal)) %>%
#  ungroup() %>%
## 3 is some arbitrary score weight
#  summarize(gender.ratio.score = mean(gender.ratio.dev)*3,
#            avg.age.var = -mean(age.var))
## Also, negative scores are better, and the "-" in front of mean age variance means that
## higher average variance of team ages gets relatively more favorable scores.
## NSM's new method for calling commute times
# system.time({
#   filter(acm_commutes_long, id_dest %in% team_placements_df$id_dest) %>%
#     summarize(sum(dist))
# })
## NSM: even faster way to do the same thing, with the data.table package
team_placements_df$dest = colnames(acm_commutes)[team_placements_df$placement + 1]
team_placements_df <- within(team_placements_df, id_dest <- paste(id, dest, sep = "_"))
dt_commutes <- data.table(acm_commutes_long)
dt_commutes[id_dest %in% team_placements_df$id_dest,  sum(dist)]
#browser()
## Old commute calc method references functions defined just before 'calculate_score'
# acm_df_with_placements$"Commute.Time" <- unlist(with(acm_df_with_placements, mapply(PickTime, id, placement)))
# return(sum(acm_df_with_placements$"Commute.Time"))
#
# Old commute calc method (10x slower!)
#   acm_row <- subset(acm_df_with_placements, id == x)[ , grepl("Time.to.", names(acm_row))]
#   acm_commute <- acm_row[ , grepl("Time.to.", names(acm_row))]
#   Actual.Commute.Time <- acm_commute[acm_row$Team.Placement]
#   acm_commutes <- rbind(acm_commutes, Actual.Commute.Time[1,1])
}
## USEFULL: system.time({ <<code to time>> })
# system.time({
output <- run_intermediate_annealing_process(acm_df, team_placements_df, placement_score = 445109, best_placements = team_placements_df, best_score = 445109, starting_iteration = 1, number_of_iterations = 1000, s_curve_amplitude = 4000, s_curve_center = 0, s_curve_width = 3000)
#})
output
# Assumption: the number of ACMs in acm_df is exactly the same as the number of team slots
initial_placement <- function(){
# first create an empty list
team_placements = list()
# use a for-loop to read each team size
for (x in 1:nrow(school_df)){
team_slots = list(
# create a list that repeats each school 'id' for the size of each team
rep(x,
subset(school_df$"Team Size", school_df$"id" == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- data.frame(placement=unlist(team_placements))
# Randomize Starting Place
set.seed(42)
data.frame(placement=team_placements[sample(nrow(team_placements), replace=F), ],
id= 1:nrow(team_placements))
}
team_placements_df <- initial_placement()
team_placements_df
# Assumption: the number of ACMs in acm_df is exactly the same as the number of team slots
initial_placement <- function(){
# first create an empty list
team_placements = list()
# use a for-loop to read each team size
for (x in 1:nrow(school_df)){
team_slots = list(
# create a list that repeats each school 'id' for the size of each team
rep(x,
subset(school_df$"Team Size", school_df$"id" == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- data.frame(placement=unlist(team_placements))
# Randomize Starting Place
set.seed(42)
data.frame(placement=team_placements[sample(nrow(team_placements), replace=F), ],
id= 1:nrow(team_placements))
}
team_placements_df <- initial_placement()
team_placements_df
# Assumption: the number of ACMs in acm_df is exactly the same as the number of team slots
initial_placement <- function(){
# first create an empty list
team_placements = list()
# use a for-loop to read each team size
for (x in 1:nrow(school_df)){
team_slots = list(
# create a list that repeats each school 'id' for the size of each team
rep(x,
subset(school_df$"Team Size", school_df$"id" == x)
)
)
team_placements <- c(team_placements, team_slots)
}
team_placements <- data.frame(placement=unlist(team_placements))
# Randomize Starting Place
set.seed(42)
data.frame(placement=team_placements[sample(nrow(team_placements), replace=F), ],
id= 1:nrow(team_placements))
}
team_placements_df <- initial_placement()
team_placements_df
View(acm_df)
View(acm_df_fake)
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
#acm_df <- read.csv(file = "Input 1 - ACM Data.csv")
acm_commutes <- read_excel(path = "Input 2 - ACM Commutes.xlsx")
school_df <- read_excel(path = "Input 3 - School Data.xls")
# For some reason there is an empty row at the end of acm_df, so it's removed here:
#acm_df <- acm_df[-nrow(acm_df),]
# Add id columns
acm_df$id <- 1:nrow(acm_df)
acm_commutes$id <- 1:nrow(acm_commutes)
school_df$id <- 1:nrow(school_df)
#acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
# For some reason there is an empty row at the end of acm_df in the .xls, so it's removed here:
#acm_df <- acm_df[-nrow(acm_df),]
acm_df <- read.csv(file = "Input 1 - ACM Data.csv")
acm_commutes <- read_excel(path = "Input 2 - ACM Commutes.xlsx")
school_df <- read_excel(path = "Input 3 - School Data.xls")
# Add id columns
acm_df$id <- 1:nrow(acm_df)
acm_commutes$id <- 1:nrow(acm_commutes)
school_df$id <- 1:nrow(school_df)
acm_df
acm_df
gender_bal <-
acm_df %>%
group_by(Gender) %>%
summarize(overall = n() / nrow(acm_df))
# Chris
## Chris: We want the following characteristics to be represented evenly across teams. We calculate ratios  for the # entire corps, and later calculate how well each team matches these ratios.
gender.ratio.ideal <- with(acm_df, sum(Gender == "Male")/sum(Gender == "Female"))
# calc percent prevalence each gender category in entire corps, calc difference between those numbers and that found within school teams
gender_bal <-
acm_df %>%
group_by(Gender) %>%
dplyr::summarize(overall = n() / nrow(acm_df))
# age -
# ethnicity
# attend local school, CY or local
# roommates? not necessary?
# Alex
# educational attainment (potentially different goals for HS/ES)
# tutoring experience (look at notes from survey)
# tutoring preference
# grade level preference
# language speaking
gender_bal <-
acm_df %>%
group_by(Gender) %>%
dplyr::summarize(overall = n() / nrow(acm_df))
gender_bal
gender_bal <-
acm_df %>%
group_by(Gender)
class(gender_bal)
str(gender_bal)
gender_bal <-
acm_df %>%
group_by(Gender) %>%
dplyr::summarize(overall = n() / nrow(acm_df))
gender_bal
colnames(acm_df)
acm_df$sch_id <- sample(1:26, nrow(acm_df), replace = TRUE)
gender_bal <-
acm_df %>%
group_by(Gender, sch_id) %>%
dplyr::summarize(n_gs = n())
gender_bal
nrow(gender_bal)
nrow(gender_bal)/26
class(acm_df$Gender)
gender_bal <-
acm_df %>%
group_by(Gender, sch_id) %>%
complete(Gender, sch_id)
nrow(gender_bal)
954/26
26*5
head(gender_bal)
gender_counts <-
dt[,
.(n_gs = .N),
by = c("Gender", "sch_id")]
class(dt)
dt <- data.table(acm_df)
gender_counts <-
dt[,
.(n_gs = .N),
by = c("Gender", "sch_id")]
dim(gender_counts)
gender_frame <-
expand.grid(sch_id = 1:26, Gender = levels(acm_df$Gender))
dim(gender_frame)
head(gender_frame)
gender_g <- group_by(acm_df, Gender) %>% dplyr::summarize(pct_g = n()/nrow(acm_df))
gender_g <- group_by(acm_df, Gender) %>% dplyr::summarize(pct_g = n()/nrow(acm_df))
gender_frame <-
merge(x = gender_frame,
y = gender_g,
by = "Gender",
all.x = TRUE)
head(gender_frame)
tail(gender_frame)
gender_gs <-
acm_df %>%
group_by(sch_id) %>%
dplyr::mutate(n_s = n()) %>%
group_by(sch_id, Gender) %>%
dplyr::summarize(pct_gs = n()/n_s)
gender_gs <-
acm_df %>%
group_by(sch_id) %>%
dplyr::mutate(n_s = n())
gender_gs <-
acm_df %>%
group_by(sch_id) %>%
dplyr::mutate(n_s = n()) %>%
group_by(sch_id, Gender)
head(gender_gs)
summary(gender_gs$n_s)
gender_gs <-
acm_df %>%
group_by(sch_id) %>%
dplyr::mutate(n_s = n()) %>%
group_by(sch_id, Gender) %>%
dplyr::summarize(pct_gs = n()/n_s)
gender_gs <-
acm_df %>%
group_by(sch_id) %>%
dplyr::mutate(n_s = n()) %>%
group_by(sch_id, Gender) %>%
dplyr::summarize(pct_gs = n_s)
gender_gs <-
acm_df %>%
group_by(sch_id) %>%
dplyr::mutate(n_s = n()) %>%
group_by(sch_id, Gender) %>%
dplyr::summarize(pct_gs = 1)
# Chris
## Chris: We want the following characteristics to be represented evenly across teams. We calculate ratios  for the # entire corps, and later calculate how well each team matches these ratios.
gender.ratio.ideal <- with(acm_df, sum(Gender == "Male")/sum(Gender == "Female"))
# calc percent prevalence each gender category in entire corps, calc difference between those numbers and that found within school teams
acm_df$sch_id <- sample(1:26, nrow(acm_df), replace = TRUE)
# Note: move this inside the loop of assignments
dt <- data.table(acm_df)
gender_frame <-
expand.grid(sch_id = 1:26, Gender = levels(acm_df$Gender))
# Note--need to replace sch_id with the appropriate school id values based off of the data
gender_g <- group_by(acm_df, Gender) %>% dplyr::summarize(pct_g = n()/nrow(acm_df))
gender_frame <-
merge(x = gender_frame,
y = gender_g,
by = "Gender",
all.x = TRUE)
gender_gs <-
acm_df %>%
group_by(sch_id) %>%
dplyr::mutate(n_s = n()) %>%
group_by(sch_id, Gender) %>%
dplyr::summarize(pct_gs = n())
# age -
# ethnicity
# attend local school, CY or local
# roommates? not necessary?
# Alex
# educational attainment (potentially different goals for HS/ES)
# tutoring experience (look at notes from survey)
# tutoring preference
# grade level preference
# language speaking
sumamry(gender_gs)
summary(gender_gs$pct_gs)
gender_gs <-
acm_df %>%
group_by(sch_id) %>%
dplyr::mutate(n_s = n()) %>%
group_by(sch_id, Gender) %>%
dplyr::summarize(pct_gs = n()/n_s)
gender_gs <-
acm_df %>%
group_by(sch_id) %>%
dplyr::mutate(n_s = n()) %>%
group_by(sch_id, Gender) %>%
dplyr::summarize(pct_gs = n()/5)
gender_gs <-
acm_df %>%
group_by(sch_id) %>%
dplyr::mutate(n_s = n()) %>%
group_by(sch_id, Gender) %>%
dplyr::summarize(pct_gs = n()/n())
summary(gender_gs$pct_gs)
gender_gs <-
acm_df %>%
group_by(sch_id) %>%
dplyr::mutate(sch_enr = n()) %>%
group_by(sch_id, Gender) %>%
dplyr::summarize(pct_gs = n()/sch_enr)
gender_gs <-
acm_df %>%
group_by(sch_id) %>%
dplyr::mutate(sch_enr = n()) %>%
group_by(sch_id, Gender) %>%
dplyr::summarize(pct_gs = n()/mean(sch_enr))
gender_gs <-
acm_df %>%
group_by(sch_id, Gender) %>%
dplyr::mutate(n_gs = n()) %>%
group_by(sch_id) %>%
dplyr::summarize(pct_gs = n_gs/sum(n_gs))
gender_gs <-
acm_df %>%
group_by(sch_id, Gender) %>%
dplyr::summarize(n_gs = n())
gender_gs
gender_gs <-
acm_df %>%
group_by(sch_id, Gender) %>%
dplyr::summarize(n_gs = n()) %>%
group_by(sch_id) %>%
dplyr::mutate(pct_gs = n_gs/sum(n_gs))
head(gender_gs)
gender_frame <-
merge(x = gender_frame,
y = gender_gs,
by = c("sch_id", "Gender"),
all.x = TRUE)
head(gender_frame)
gender_frame <-
merge(x = gender_frame,
y = gender_gs,
by = c("sch_id", "Gender"),
all.x = TRUE) %>%
within(diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs))
gender_frame <-
merge(x = gender_frame,
y = gender_gs,
by = c("sch_id", "Gender"),
all.x = TRUE)
gender_frame <-
merge(x = gender_frame,
y = gender_gs,
by = c("sch_id", "Gender"),
all.x = TRUE) %>%
within(diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs))
gender_frame <-
merge(x = gender_frame,
y = gender_gs,
by = c("sch_id", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
})
gender_frame <-
merge(x = gender_frame,
y = gender_gs,
by = c("sch_id", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
})
gender_frame <-
merge(x = gender_frame,
y = gender_gs,
by = c("sch_id", "Gender"),
all.x = TRUE)
gender_frame <- within(gender_frame, {
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
})
gender_frame <-
merge(x = gender_frame,
y = gender_gs,
by = c("sch_id", "Gender"),
all.x = TRUE)
gender_frame_g <-
merge(x = gender_frame,
y = gender_g,
by = "Gender",
all.x = TRUE)
gender_gs <-
acm_df %>%
group_by(sch_id, Gender) %>%
dplyr::summarize(n_gs = n()) %>%
group_by(sch_id) %>%
dplyr::mutate(pct_gs = n_gs/sum(n_gs))
gender_frame_gs <-
merge(x = gender_frame_g,
y = gender_gs,
by = c("sch_id", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
})
gender_frame <-
expand.grid(sch_id = 1:26, Gender = levels(acm_df$Gender))
# Note--need to replace sch_id with the appropriate school id values based off of the data
gender_g <- group_by(acm_df, Gender) %>% dplyr::summarize(pct_g = n()/nrow(acm_df))
gender_frame_g <-
merge(x = gender_frame,
y = gender_g,
by = "Gender",
all.x = TRUE)
gender_gs <-
acm_df %>%
group_by(sch_id, Gender) %>%
dplyr::summarize(n_gs = n()) %>%
group_by(sch_id) %>%
dplyr::mutate(pct_gs = n_gs/sum(n_gs))
gender_frame_gs <-
merge(x = gender_frame_g,
y = gender_gs,
by = c("sch_id", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
})
head(gender_frame_gs)
gender_frame_gs <-
merge(x = gender_frame_g,
y = gender_gs,
by = c("sch_id", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
}) %>%
summarise(mean_gend_diff = mean(abs_diff_gs))
gender_frame_gs
gender_g <- group_by(acm_df, Gender)
gender_g %>% dplyr::summarize(pct_g = n()/nrow(acm_df))
gender_g
gender_g <- group_by(acm_df, Gender) %>% summarize(pct_g = n()/nrow(acm_df))
gender_g
gender_frame <-
expand.grid(sch_id = 1:26, Gender = levels(acm_df$Gender))
gender_frame
class(gender_frame)
gender_frame_g <-
merge(x = gender_frame,
y = gender_g,
by = "Gender",
all.x = TRUE)
gender_frame_g
gender_gs <-
acm_df %>%
group_by(sch_id, Gender) %>%
dplyr::summarize(n_gs = n()) %>%
group_by(sch_id) %>%
dplyr::mutate(pct_gs = n_gs/sum(n_gs))
gender_gs
gender_frame_gs <-
merge(x = gender_frame_g,
y = gender_gs,
by = c("sch_id", "Gender"),
all.x = TRUE) %>%
within({
diff_gs <- pct_g - ifelse(is.na(pct_gs), 0, pct_gs)
abs_diff_gs <- abs(diff_gs)
}) %>%
summarise(mean_gend_diff = mean(abs_diff_gs))
gender_frame_gs
