knitr::opts_chunk$set(echo = TRUE)
library("gmapsdistance")
library(readxl)
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# Add an index column for schools
school_df$id <- 1:nrow(school_df)
acm_df$"First + Last Name" = paste(acm_df$`First Name`, acm_df$`Last Name`)
acm_df$"First + Last Name"
acm_df$"First + Last Name" = paste(acm_df$`First Name`, acm_df$`Last Name`)
acm_df$"First + Last Name"
acm_df$`First Name`
acm_df$"First + Last Name" = paste(acm_df$"First Name", acm_df$`Last Name`)
acm_df$"First Name"
View(acm_df)
acm_df$id <- 1:nrow(acm_df)
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- acm_df[acm_df$id = ACM_id]
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- acm_df[acm_df$id == ACM_id]
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
acm_df[acm_df$id == ACM_id] = cbind(acm_df[acm_df$id == ACM_id], commute)
}
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
ACM_row <- acm_df[acm_df$id == 1]
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
ACM_row <- acm_df[acm_df$id == 1]
ACM_row$"Method of Commute"
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
ACM_row <- acm_df[acm_df$id == 1]
ACM_row
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
ACM_row
acm_df[acm_df$id == 1]
acm_df[acm_df$id = 1]
acm_df[acm_df$id == 1]
class(acm_df)
ACM_row <- subset(acm_df, acm_df$id == 1)
ACM_row
acm_df$id
subset(acm_df, acm_df$id == 1)
subset(acm_df, acm_df$id = 1)
class(acm_df)
ACM_row <- acm_df[with(acm_df, id ==1]
ACM_row <- acm_df[with(acm_df, id ==1]
ACM_row <- acm_df[with(acm_df, id ==1)]
ACM_row
ACM_row = acm_df[with(acm_df, id ==1)]
ACM_row
acm_df[with(acm_df, id ==1)]
acm_df[with(acm_df, id == 1), ]
subset(acm_df, id == 1)
subset(acm_df, "id" == 1)
subset(acm_df, id == 1)
acm_df[acm_df$id == 1]
acm_df[with(acm_df, id == 1), ]
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
acm_df[with(acm_df, id == ACM_id), ] = cbind(acm_df[with(acm_df, id == ACM_id), ], commute)
}
# There will likely be a warning prompt because some corps members are roommates. The warning is because there are duplicate origin addresses.
# results = gmapsdistance(origin = acm_df[1:2,]$"Full Address", destination = school_df[1:2,]$"Address", mode = "driving", combinations = "all", shape = "wide")
#cbind combines two tables
# acm_data = cbind(acm_data, results)
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
cbind(acm_df[with(acm_df, id == ACM_id), ], commute)
}
# There will likely be a warning prompt because some corps members are roommates. The warning is because there are duplicate origin addresses.
# results = gmapsdistance(origin = acm_df[1:2,]$"Full Address", destination = school_df[1:2,]$"Address", mode = "driving", combinations = "all", shape = "wide")
#cbind combines two tables
# acm_data = cbind(acm_data, results)
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
test <- cbind(acm_df[with(acm_df, id == ACM_id), ], commute)
}
# There will likely be a warning prompt because some corps members are roommates. The warning is because there are duplicate origin addresses.
# results = gmapsdistance(origin = acm_df[1:2,]$"Full Address", destination = school_df[1:2,]$"Address", mode = "driving", combinations = "all", shape = "wide")
#cbind combines two tables
# acm_data = cbind(acm_data, results)
test
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
acm_df[acm_df$id == AMD_id] <- cbind(acm_df[with(acm_df, id == ACM_id), ], commute)
}
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
acm_df[acm_df$id == ACM_id] <- cbind(acm_df[with(acm_df, id == ACM_id), ], commute)
}
# There will likely be a warning prompt because some corps members are roommates. The warning is because there are duplicate origin addresses.
# results = gmapsdistance(origin = acm_df[1:2,]$"Full Address", destination = school_df[1:2,]$"Address", mode = "driving", combinations = "all", shape = "wide")
#cbind combines two tables
# acm_data = cbind(acm_data, results)
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
cbind(acm_df[with(acm_df, id == ACM_id), ], commute)
}
# There will likely be a warning prompt because some corps members are roommates. The warning is because there are duplicate origin addresses.
# results = gmapsdistance(origin = acm_df[1:2,]$"Full Address", destination = school_df[1:2,]$"Address", mode = "driving", combinations = "all", shape = "wide")
#cbind combines two tables
# acm_data = cbind(acm_data, results)
acm_df[1,]
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
acm_df[ACM_id,] <- cbind(acm_df[with(acm_df, id == ACM_id), ], commute)
}
# There will likely be a warning prompt because some corps members are roommates. The warning is because there are duplicate origin addresses.
# results = gmapsdistance(origin = acm_df[1:2,]$"Full Address", destination = school_df[1:2,]$"Address", mode = "driving", combinations = "all", shape = "wide")
#cbind combines two tables
# acm_data = cbind(acm_data, results)
commute
commute$Time
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
acm_df[ACM_id,] <- cbind(acm_df[with(acm_df, id == ACM_id), ], commute$Time)
}
# There will likely be a warning prompt because some corps members are roommates. The warning is because there are duplicate origin addresses.
# results = gmapsdistance(origin = acm_df[1:2,]$"Full Address", destination = school_df[1:2,]$"Address", mode = "driving", combinations = "all", shape = "wide")
#cbind combines two tables
# acm_data = cbind(acm_data, results)
knitr::opts_chunk$set(echo = TRUE)
ACM_commutes = []
ACM_commutes <- data.frame(Ints=integer())
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
library("gmapsdistance")
library(readxl)
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# Add an index column for schools
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
ACM_commutes <- rbind(ACM_commutes, commute$Time)
}
# There will likely be a warning prompt because some corps members are roommates. The warning is because there are duplicate origin addresses.
# results = gmapsdistance(origin = acm_df[1:2,]$"Full Address", destination = school_df[1:2,]$"Address", mode = "driving", combinations = "all", shape = "wide")
#cbind combines two tables
# acm_data = cbind(acm_data, results)
ACM_commutes
acm_df <- cbind(acm_df, ACM_commutes)
n <- max(length(acm_df), length(ACM_commutes))
length(acm_df) <- n
length(ACM_commutes) <- n
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# Add an index column for schools
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
ACM_commutes <- rbind(ACM_commutes, commute$Time)
}
n <- max(length(acm_df), length(ACM_commutes))
length(acm_df) <- n
length(ACM_commutes) <- n
acm_df <- cbind(acm_df, ACM_commutes)
ACM_commutes
acm_df <- read_excel(path = "Input 1 - ACM Data.xls")
school_df <- read_excel(path = "Input 2 - School Data.xls")
# Add an index column for schools
school_df$id <- 1:nrow(school_df)
acm_df$id <- 1:nrow(acm_df)
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
commute$id = ACM_id
ACM_commutes <- rbind(ACM_commutes, commute$Time)
}
acm_df2 <- merge(acm_df, ACM_commutes,by="id")
commute
# Prior to this step, you may need to ensure that "Address.Line.1" does not include any apartment/suite/room info.
# This line combines address data into one text string:
acm_df[["Full Address"]] = paste(acm_df[["Address Line 1"]], acm_df[["City"]], acm_df[["State"]], acm_df[["Postal Code"]])
# Replace spaces with "+" and remove commas (queries to google maps cannot include spaces)
acm_df[["Full Address"]] = gsub(" ", "+", acm_df[["Full Address"]])
school_df[["Address"]] = gsub(" ", "+", school_df[["Address"]])
school_df$"Address" = gsub(",", "", school_df$"Address")
# Input your own API Key here
set.api.key("AIzaSyDFlU9RkmJBJdw0YGMswYECXQeZeKxFmuc")
# acm_df[acm_df$id == 1]
# class(acm_df)
#
# acm_df[with(acm_df, id == 1), ]
# ACM_row = acm_df[with(acm_df, id ==1)]
# ACM_row
# commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df$"Address", mode = ACM_row$"Method # of Commute", combinations = "all", shape = "wide")
ACM_commutes <- data.frame(Ints=integer())
for (ACM_id in acm_df[1:2,]$id){
ACM_row <- subset(acm_df, id == ACM_id)
commute = gmapsdistance(origin = ACM_row$"Full Address", destination = school_df[1:2,]$"Address", mode = ACM_row$"Method of Commute", combinations = "all", shape = "wide")
commute[["id"]] = ACM_id
ACM_commutes <- rbind(ACM_commutes, commute$Time)
}
# commute
acm_df2 <- merge(acm_df, ACM_commutes,by="id")
commute
